#main.py
import json, io
import uuid
from datetime import datetime
from lxml import etree
import logging
from converters.Common_operations import NoticeProcessor
from converters.BT_01_Procedure import (
    parse_procedure_legal_basis_id,
    parse_procedure_legal_basis_description,
    parse_procedure_legal_basis_noid,
    parse_procedure_legal_basis_noid_description,
    parse_procedure_legal_basis_notice,
    merge_procedure_legal_basis
)
from converters.BT_03 import parse_form_type, merge_form_type
from converters.BT_04_Procedure import parse_procedure_identifier, merge_procedure_identifier
from converters.BT_05_notice import parse_notice_dispatch_date_time, merge_notice_dispatch_date_time
from converters.BT_06_Lot import parse_strategic_procurement, merge_strategic_procurement
from converters.BT_09_Procedure import parse_cross_border_law, merge_cross_border_law
from converters.BT_10 import parse_contract_xml
from converters.BT_11_Procedure_Buyer import parse_buyer_legal_type, merge_buyer_legal_type
from converters.BT_88_Procedure import parse_procedure_features, merge_procedure_features
from converters.BT_105_Procedure import parse_procedure_type, merge_procedure_type
from converters.BT_106_Procedure import parse_procedure_accelerated, merge_procedure_accelerated
from converters.BT_109_Lot import parse_framework_duration_justification, merge_framework_duration_justification
from converters.BT_111_Lot import parse_framework_buyer_categories, merge_framework_buyer_categories
from converters.BT_113_Lot import parse_framework_max_participants, merge_framework_max_participants
from converters.BT_115_GPA_Coverage import parse_gpa_coverage, merge_gpa_coverage
from converters.BT_13713_LotResult import parse_lot_result_identifier, merge_lot_result_identifier
from converters.BT_13714_Tender import parse_tender_lot_identifier, merge_tender_lot_identifier
from converters.BT_1375_Procedure import parse_group_lot_identifier, merge_group_lot_identifier
from converters.BT_119_LotResult import parse_dps_termination, merge_dps_termination
from converters.BT_120_Lot import parse_no_negotiation_necessary, merge_no_negotiation_necessary
from converters.BT_122_Lot import parse_electronic_auction_description, merge_electronic_auction_description
from converters.BT_123_Lot import parse_electronic_auction_url, merge_electronic_auction_url
from converters.BT_124_Tool_Atypical_URL import parse_tool_atypical_url, merge_tool_atypical_url
from converters.BT_125_Lot import parse_previous_planning_identifier_lot, merge_previous_planning_identifier_lot
from converters.BT_125_Part import parse_previous_planning_identifier_part, merge_previous_planning_identifier_part
from converters.BT_1252_Procedure import parse_direct_award_justification, merge_direct_award_justification
from converters.BT_127_notice import parse_future_notice_date, merge_future_notice_date
from converters.BT_13_Lot import parse_additional_info_deadline, merge_additional_info_deadline
from converters.BT_13_Part import parse_additional_info_deadline_part, merge_additional_info_deadline_part
from converters.BT_130_Lot import parse_dispatch_invitation_tender, merge_dispatch_invitation_tender
from converters.BT_131_Lot import parse_deadline_receipt_tenders, merge_deadline_receipt_tenders
from converters.BT_1311_Lot import parse_deadline_receipt_requests, merge_deadline_receipt_requests
from converters.BT_132_Lot import parse_lot_public_opening_date, merge_lot_public_opening_date
from converters.BT_133_Lot import parse_lot_bid_opening_location, merge_lot_bid_opening_location
from converters.BT_134_Lot import parse_lot_public_opening_description, merge_lot_public_opening_description
from converters.BT_135_Procedure import parse_direct_award_justification_rationale, merge_direct_award_justification_rationale
from converters.BT_1351_Procedure import parse_accelerated_procedure_justification, merge_accelerated_procedure_justification
from converters.BT_136_Procedure import parse_direct_award_justification_code, merge_direct_award_justification_code
from converters.BT_137_Lot import parse_purpose_lot_identifier, merge_purpose_lot_identifier
from converters.BT_137_LotsGroup import parse_lots_group_identifier, merge_lots_group_identifier
from converters.BT_137_Part import parse_part_identifier, merge_part_identifier
from converters.BT_14_Lot import parse_lot_documents_restricted, merge_lot_documents_restricted
from converters.BT_14_Part import parse_part_documents_restricted, merge_part_documents_restricted
from converters.BT_140_notice import parse_change_reason_code, merge_change_reason_code
from converters.BT_142_LotResult import parse_winner_chosen, merge_winner_chosen
from converters.BT_144_LotResult import parse_not_awarded_reason, merge_not_awarded_reason
from converters.BT_145_Contract import parse_contract_conclusion_date, merge_contract_conclusion_date
from converters.BT_1451_Contract import parse_winner_decision_date, merge_winner_decision_date
from converters.BT_15_Lot_Part import parse_documents_url, merge_documents_url
from converters.BT_150_Contract import parse_contract_identifier, merge_contract_identifier
from converters.BT_151_Contract import parse_contract_url, merge_contract_url
from converters.BT_16_Organization_Company import parse_organization_part_name, merge_organization_part_name
from converters.BT_16_Organization_TouchPoint import parse_touchpoint_part_name, merge_touchpoint_part_name
from converters.BT_160_Tender import parse_concession_revenue_buyer, merge_concession_revenue_buyer
from converters.BT_162_Tender import parse_concession_revenue_user, merge_concession_revenue_user
from converters.BT_163_Tender import parse_concession_value_description, merge_concession_value_description
from converters.BT_165_Organization_Company import parse_winner_size, merge_winner_size
from converters.BT_17_Lot import parse_submission_electronic, merge_submission_electronic
from converters.BT_171_Tender import parse_tender_rank, merge_tender_rank
from converters.BT_1711_Tender import parse_tender_ranked, merge_tender_ranked
from converters.BT_18_Lot import parse_submission_url, merge_submission_url
from converters.BT_19_Lot import parse_submission_nonelectronic_justification, merge_submission_nonelectronic_justification
from converters.BT_191_Tender import parse_country_origin, merge_country_origin
from converters.BT_193_Tender import parse_tender_variant, merge_tender_variant
#from converters.BT_195 import parse_unpublished_identifier
from converters.BT_195_BT_09_Procedure import parse_unpublished_cross_border_law, merge_unpublished_cross_border_law
from converters.BT_195_BT_105_Procedure import parse_unpublished_procedure_type, merge_unpublished_procedure_type

from converters.BT_195_BT_106_Procedure import parse_unpublished_procedure_accelerated, merge_unpublished_procedure_accelerated
from converters.BT_195_BT_1252_Procedure import parse_unpublished_direct_award_justification, merge_unpublished_direct_award_justification
from converters.BT_195_BT_135_Procedure import parse_unpublished_direct_award_justification_text, merge_unpublished_direct_award_justification_text
from converters.BT_195_BT_1351_Procedure import parse_unpublished_procedure_accelerated_justification, merge_unpublished_procedure_accelerated_justification
from converters.BT_195_BT_136_Procedure import parse_unpublished_direct_award_justification_bt_136, merge_unpublished_direct_award_justification_bt_136
from converters.BT_195_BT_142_LotResult import parse_unpublished_winner_chosen, merge_unpublished_winner_chosen
from converters.BT_195_BT_144_LotResult import parse_unpublished_not_awarded_reason, merge_unpublished_not_awarded_reason
from converters.BT_195_BT_160_Tender import parse_unpublished_concession_revenue_buyer, merge_unpublished_concession_revenue_buyer
from converters.BT_195_BT_162_Tender import parse_unpublished_concession_revenue_user, merge_unpublished_concession_revenue_user
from converters.BT_195_BT_163_Tender import parse_unpublished_concession_value_description, merge_unpublished_concession_value_description
from converters.BT_195_BT_171_Tender import parse_unpublished_tender_rank, merge_unpublished_tender_rank
from converters.BT_195_BT_191_Tender import parse_unpublished_country_origin, merge_unpublished_country_origin
from converters.BT_195_BT_193_Tender import parse_unpublished_winning_tender_variant, merge_unpublished_winning_tender_variant
from converters.BT_195_BT_539_Lot import parse_unpublished_award_criterion_type, merge_unpublished_award_criterion_type
from converters.BT_539_LotsGroup import parse_award_criterion_type_lots_group, merge_award_criterion_type_lots_group
from converters.BT_540_Lot import parse_award_criterion_description, merge_award_criterion_description
from converters.BT_540_LotsGroup import parse_award_criterion_description_lots_group, merge_award_criterion_description_lots_group
from converters.BT_195_BT_541_Lot_Fixed import parse_unpublished_award_criterion_number_fixed, merge_unpublished_award_criterion_number_fixed
from converters.BT_195_BT_541_Lot_Threshold import parse_unpublished_award_criterion_number_threshold, merge_unpublished_award_criterion_number_threshold
from converters.BT_195_BT_541_Lot_Weight import parse_unpublished_award_criterion_number_weight, merge_unpublished_award_criterion_number_weight
from converters.BT_195_BT_541_LotsGroup_Fixed import parse_unpublished_award_criterion_number_fixed_lotsgroup, merge_unpublished_award_criterion_number_fixed_lotsgroup
from converters.BT_195_BT_541_LotsGroup_Threshold import parse_unpublished_award_criterion_number_threshold_lotsgroup, merge_unpublished_award_criterion_number_threshold_lotsgroup
from converters.BT_195_BT_541_LotsGroup_Weight import parse_unpublished_award_criterion_number_weight_lotsgroup_bt541, merge_unpublished_award_criterion_number_weight_lotsgroup_bt541
from converters.BT_5421_Lot import parse_award_criterion_number_weight_lot, merge_award_criterion_number_weight_lot
from converters.BT_5421_LotsGroup import parse_award_criterion_number_weight_lots_group, merge_award_criterion_number_weight_lots_group
from converters.BT_5422_Lot import parse_award_criterion_number_fixed, merge_award_criterion_number_fixed
from converters.BT_5422_LotsGroup import parse_award_criterion_number_fixed_lotsgroup, merge_award_criterion_number_fixed_lotsgroup
from converters.BT_195_BT_5422_LotsGroup import parse_unpublished_award_criterion_number_fixed_lotsgroup_bt5422, merge_unpublished_award_criterion_number_fixed_lotsgroup_bt5422
from converters.BT_195_BT_5423_Lot import parse_unpublished_award_criterion_number_threshold_lot, merge_unpublished_award_criterion_number_threshold_lot
from converters.BT_195_BT_5423_LotsGroup import parse_unpublished_award_criterion_number_threshold_lotsgroup_bt5423, merge_unpublished_award_criterion_number_threshold_lotsgroup_bt5423
from converters.BT_195_BT_543_Lot import parse_unpublished_award_criteria_complicated_lot, merge_unpublished_award_criteria_complicated_lot
from converters.BT_195_BT_543_LotsGroup import parse_unpublished_award_criteria_complicated_lotsgroup, merge_unpublished_award_criteria_complicated_lotsgroup
from converters.BT_195_BT_553_Tender import parse_unpublished_subcontracting_value_tender, merge_unpublished_subcontracting_value_tender
from converters.BT_195_BT_554_Tender import parse_unpublished_subcontracting_description_tender, merge_unpublished_subcontracting_description_tender
from converters.BT_195_BT_555_Tender import parse_unpublished_subcontracting_percentage_tender, merge_unpublished_subcontracting_percentage_tender
from converters.BT_195_BT_635_LotResult import parse_unpublished_buyer_review_request_count_lotresult_bt635, merge_unpublished_buyer_review_request_count_lotresult_bt635
from converters.BT_195_BT_636_LotResult import parse_unpublished_buyer_review_request_irregularity_type_lotresult_bt636, merge_unpublished_buyer_review_request_irregularity_type_lotresult_bt636
from converters.BT_195_BT_660_LotResult import parse_unpublished_framework_reestimated_value_lotresult_bt660, merge_unpublished_framework_reestimated_value_lotresult_bt660
from converters.BT_195_BT_709_LotResult import parse_unpublished_maximum_value_lotresult_bt709, merge_unpublished_maximum_value_lotresult_bt709
from converters.BT_195_BT_710_LotResult import parse_unpublished_tender_lowest_value_lotresult_bt710, merge_unpublished_tender_lowest_value_lotresult_bt710
from converters.BT_195_BT_711_LotResult import parse_unpublished_tender_highest_value_lotresult_bt711, merge_unpublished_tender_highest_value_lotresult_bt711
from converters.BT_195_BT_712_LotResult import parse_unpublished_buyer_review_complainants_lotresult_bt712, merge_unpublished_buyer_review_complainants_lotresult_bt712
from converters.BT_195_BT_720_Tender import parse_unpublished_winning_tender_value_tender_bt720, merge_unpublished_winning_tender_value_tender_bt720
from converters.BT_195_BT_733_Lot import parse_unpublished_award_criteria_order_justification_lot_bt733, merge_unpublished_award_criteria_order_justification_lot_bt733
from converters.BT_195_BT_733_LotsGroup import parse_unpublished_award_criteria_order_justification_lotsgroup_bt733, merge_unpublished_award_criteria_order_justification_lotsgroup_bt733
from converters.BT_195_BT_734_Lot import parse_unpublished_award_criterion_name_lot_bt734, merge_unpublished_award_criterion_name_lot_bt734
from converters.BT_195_BT_734_LotsGroup import parse_unpublished_award_criterion_name_lotsgroup_bt734, merge_unpublished_award_criterion_name_lotsgroup_bt734
from converters.BT_195_BT_759_LotResult import parse_unpublished_received_submissions_count_lotresult_bt759, merge_unpublished_received_submissions_count_lotresult_bt759
from converters.BT_195_BT_760_LotResult import parse_unpublished_received_submissions_type_lotresult_bt760, merge_unpublished_received_submissions_type_lotresult_bt760
from converters.BT_195_BT_773_Tender import parse_unpublished_subcontracting_tender_bt773, merge_unpublished_subcontracting_tender_bt773
from converters.BT_195_BT_88_Procedure import parse_unpublished_procedure_features_procedure_bt88, merge_unpublished_procedure_features_procedure_bt88
from converters.BT_196_BT_1252_Procedure import parse_unpublished_justification_description_procedure_bt1252, merge_unpublished_justification_description_procedure_bt1252
from converters.BT_196_BT_135_Procedure import parse_unpublished_justification_description_procedure_bt135, merge_unpublished_justification_description_procedure_bt135
from converters.BT_196_BT_1351_Procedure import parse_unpublished_justification_description_procedure_bt1351, merge_unpublished_justification_description_procedure_bt1351
#from converters.BT_196_BT_09_Procedure import parse_unpublished_justification_description_procedure_bt09, merge_unpublished_justification_description_procedure_bt09
#from converters.BT_196_BT_105_Procedure import parse_unpublished_justification_description_procedure_bt105, merge_unpublished_justification_description_procedure_bt105
#from converters.BT_196_BT_106_Procedure import parse_unpublished_justification_description_procedure_bt106, merge_unpublished_justification_description_procedure_bt106
from converters.BT_196_BT_136_Procedure import parse_unpublished_justification_description_procedure_bt136, merge_unpublished_justification_description_procedure_bt136
from converters.BT_196_BT_142_LotResult import parse_unpublished_justification_description_lotresult_bt142, merge_unpublished_justification_description_lotresult_bt142
from converters.BT_196_BT_144_LotResult import parse_unpublished_justification_description_lotresult_bt144, merge_unpublished_justification_description_lotresult_bt144
from converters.BT_196_BT_160_Tender import parse_unpublished_justification_description_tender_bt160, merge_unpublished_justification_description_tender_bt160
from converters.BT_196_BT_162_Tender import parse_unpublished_justification_description_tender_bt162, merge_unpublished_justification_description_tender_bt162
from converters.BT_196_BT_163_Tender import parse_unpublished_justification_description_tender_bt163, merge_unpublished_justification_description_tender_bt163
from converters.BT_196_BT_171_Tender import parse_unpublished_justification_description_tender_bt171, merge_unpublished_justification_description_tender_bt171
from converters.BT_196_BT_191_Tender import parse_unpublished_justification_description_tender_bt191, merge_unpublished_justification_description_tender_bt191
from converters.BT_196_BT_193_Tender import parse_unpublished_justification_description_tender_bt193, merge_unpublished_justification_description_tender_bt193
from converters.BT_196_BT_539_Lot import parse_unpublished_justification_description_lot_bt539, merge_unpublished_justification_description_lot_bt539
from converters.BT_196_BT_539_LotsGroup import parse_unpublished_justification_description_lotsgroup_bt539, merge_unpublished_justification_description_lotsgroup_bt539
from converters.BT_196_BT_540_Lot import parse_unpublished_justification_description_lot_bt540, merge_unpublished_justification_description_lot_bt540
from converters.BT_196_BT_540_LotsGroup import parse_unpublished_justification_description_lotsgroup_bt540, merge_unpublished_justification_description_lotsgroup_bt540
from converters.BT_196_BT_541_Lot_Fixed import parse_unpublished_justification_description_lot_fixed_bt541, merge_unpublished_justification_description_lot_fixed_bt541
from converters.BT_196_BT_541_Lot_Threshold import parse_unpublished_justification_description_lot_threshold_bt541, merge_unpublished_justification_description_lot_threshold_bt541
from converters.BT_196_BT_541_Lot_Weight import parse_unpublished_justification_description_lot_weight_bt541, merge_unpublished_justification_description_lot_weight_bt541
from converters.BT_196_BT_541_LotsGroup_Fixed import parse_unpublished_justification_description_lotsgroup_fixed_bt541, merge_unpublished_justification_description_lotsgroup_fixed_bt541
from converters.BT_196_BT_541_LotsGroup_Threshold import parse_unpublished_justification_description_lotsgroup_threshold_bt541, merge_unpublished_justification_description_lotsgroup_threshold_bt541
from converters.BT_196_BT_541_LotsGroup_Weight import parse_unpublished_justification_description_lotsgroup_weight_bt541, merge_unpublished_justification_description_lotsgroup_weight_bt541
from converters.BT_196_BT_5421_Lot import parse_unpublished_justification_description_lot_bt5421, merge_unpublished_justification_description_lot_bt5421
from converters.BT_196_BT_5421_LotsGroup import parse_unpublished_justification_description_lotsgroup_bt5421, merge_unpublished_justification_description_lotsgroup_bt5421
from converters.BT_196_BT_5422_Lot import parse_unpublished_justification_description_lot_bt5422, merge_unpublished_justification_description_lot_bt5422
from converters.BT_196_BT_5422_LotsGroup import parse_unpublished_justification_description_lotsgroup_bt5422, merge_unpublished_justification_description_lotsgroup_bt5422
from converters.BT_196_BT_5423_Lot import parse_unpublished_justification_description_lot_bt5423, merge_unpublished_justification_description_lot_bt5423
from converters.BT_196_BT_5423_LotsGroup import parse_unpublished_justification_description_lotsgroup_bt5423, merge_unpublished_justification_description_lotsgroup_bt5423
from converters.BT_196_BT_543_Lot import parse_unpublished_justification_description_lot_bt543, merge_unpublished_justification_description_lot_bt543
from converters.BT_196_BT_543_LotsGroup import parse_unpublished_justification_description_lotsgroup_bt543, merge_unpublished_justification_description_lotsgroup_bt543
from converters.BT_196_BT_553_Tender import parse_unpublished_justification_description_tender_bt553, merge_unpublished_justification_description_tender_bt553
from converters.BT_196_BT_554_Tender import parse_unpublished_justification_description_tender_bt554, merge_unpublished_justification_description_tender_bt554
from converters.BT_196_BT_555_Tender import parse_unpublished_justification_description_tender_bt555, merge_unpublished_justification_description_tender_bt555
from converters.BT_196_BT_635_LotResult import parse_unpublished_justification_description_lotresult_bt635, merge_unpublished_justification_description_lotresult_bt635
from converters.BT_196_BT_636_LotResult import parse_bt_196_lot_result, merge_bt_196_lot_result
from converters.BT_196_BT_660_LotResult import parse_bt_196_bt_660_lot_result, merge_bt_196_bt_660_lot_result
from converters.BT_196_BT_709_LotResult import parse_bt_196_bt_709_lot_result, merge_bt_196_bt_709_lot_result
from converters.BT_196_BT_710_LotResult import parse_bt_196_bt_710_lot_result, merge_bt_196_bt_710_lot_result
from converters.BT_196_BT_711_LotResult import parse_bt_196_bt_711_lot_result, merge_bt_196_bt_711_lot_result
from converters.BT_196_BT_712_LotResult import parse_bt_196_bt_712_lot_result, merge_bt_196_bt_712_lot_result
from converters.BT_196_BT_720_Tender import parse_bt_196_bt_720_tender, merge_bt_196_bt_720_tender
from converters.BT_196_BT_733_Lot import parse_bt_196_bt_733_lot, merge_bt_196_bt_733_lot
from converters.BT_196_BT_733_LotsGroup import parse_bt_196_bt_733_lots_group, merge_bt_196_bt_733_lots_group
from converters.BT_196_BT_734_Lot import parse_bt_196_bt_734_lot, merge_bt_196_bt_734_lot
from converters.BT_196_BT_734_LotsGroup import parse_bt_196_bt_734_lots_group, merge_bt_196_bt_734_lots_group
from converters.BT_196_BT_759_LotResult import parse_bt_196_bt_759_lot_result, merge_bt_196_bt_759_lot_result
from converters.BT_196_BT_760_LotResult import parse_bt_196_bt_760_lot_result, merge_bt_196_bt_760_lot_result
from converters.BT_196_BT_773_Tender import parse_bt_196_bt_773_tender, merge_bt_196_bt_773_tender
from converters.BT_196_BT_88_Procedure import parse_bt_196_bt_88_procedure, merge_bt_196_bt_88_procedure
#from converters.BT_197_BT_106_Procedure import parse_unpublished_justification_code_procedure_bt106, merge_unpublished_justification_code_procedure_bt106
#from converters.BT_197_BT_105_Procedure import parse_bt_197_bt_105_procedure, merge_bt_197_bt_105_procedure
#from converters.BT_197_BT_09_Procedure import parse_unpublished_justification_code_procedure_bt09, merge_unpublished_justification_code_procedure_bt09
from converters.BT_197_BT_1252_Procedure import parse_unpublished_justification_code_procedure_bt1252, merge_unpublished_justification_code_procedure_bt1252
from converters.BT_197_BT_135_Procedure import parse_unpublished_justification_code_procedure_bt135, merge_unpublished_justification_code_procedure_bt135
from converters.BT_197_BT_1351_Procedure import parse_unpublished_justification_code_procedure_bt1351, merge_unpublished_justification_code_procedure_bt1351
from converters.BT_197_BT_136_Procedure import parse_bt_197_bt_136_procedure, merge_bt_197_bt_136_procedure
from converters.BT_197_BT_142_LotResult import parse_bt_197_bt_142_lot_result, merge_bt_197_bt_142_lot_result
from converters.BT_197_BT_144_LotResult import parse_bt_197_bt_144_lot_result, merge_bt_197_bt_144_lot_result
from converters.BT_197_BT_160_Tender import parse_bt_197_bt_160_tender, merge_bt_197_bt_160_tender
from converters.BT_197_BT_162_Tender import parse_bt_197_bt_162_tender, merge_bt_197_bt_162_tender
from converters.BT_197_BT_163_Tender import parse_bt_197_bt_163_tender, merge_bt_197_bt_163_tender
from converters.BT_197_BT_171_Tender import parse_bt_197_bt_171_tender, merge_bt_197_bt_171_tender
from converters.BT_197_BT_191_Tender import parse_bt_197_bt_191_tender, merge_bt_197_bt_191_tender
from converters.BT_197_BT_193_Tender import parse_bt_197_bt_193_tender, merge_bt_197_bt_193_tender
from converters.BT_197_BT_539_Lot import parse_bt_197_bt_539_lot, merge_bt_197_bt_539_lot
from converters.BT_197_BT_539_LotsGroup import parse_bt_197_bt_539_lotsgroup, merge_bt_197_bt_539_lotsgroup
from converters.BT_197_BT_540_Lot import parse_bt_197_bt_540_lot, merge_bt_197_bt_540_lot
from converters.bt_197_bt_540_lots_group import parse_bt_197_bt_540_lots_group, merge_bt_197_bt_540_lots_group
from converters.BT_197_BT_541_Lot_Fixed import parse_bt_197_bt_541_lot_fixed, merge_bt_197_bt_541_lot_fixed
from converters.BT_197_BT_541_Lot_Threshold import parse_bt_197_bt_541_lot_threshold, merge_bt_197_bt_541_lot_threshold
from converters.BT_197_BT_541_Lot_Weight import parse_bt_197_bt_541_lot_weight, merge_bt_197_bt_541_lot_weight
from converters.BT_197_BT_541_LotsGroup_Fixed import parse_bt_197_bt_541_lotsgroup_fixed, merge_bt_197_bt_541_lotsgroup_fixed
from converters.BT_197_BT_541_LotsGroup_Threshold import parse_bt_197_bt_541_lotsgroup_threshold, merge_bt_197_bt_541_lotsgroup_threshold
from converters.BT_197_BT_541_LotsGroup_Weight import parse_bt_197_bt_541_lotsgroup_weight, merge_bt_197_bt_541_lotsgroup_weight
from converters.BT_197_BT_5421_Lot import parse_bt_197_bt_5421_lot, merge_bt_197_bt_5421_lot
from converters.BT_197_BT_5421_LotsGroup import parse_bt_197_bt_5421_lotsgroup, merge_bt_197_bt_5421_lotsgroup
from converters.BT_197_BT_5422_Lot import parse_bt_197_bt_5422_lot, merge_bt_197_bt_5422_lot
from converters.BT_197_BT_5422_LotsGroup import parse_bt_197_bt_5422_lotsgroup, merge_bt_197_bt_5422_lotsgroup
from converters.BT_197_BT_5423_Lot import parse_bt_197_bt_5423_lot, merge_bt_197_bt_5423_lot
from converters.BT_197_BT_5423_LotsGroup import parse_bt_197_bt_5423_lotsgroup, merge_bt_197_bt_5423_lotsgroup
from converters.BT_197_BT_543_Lot import parse_bt_197_bt_543_lot, merge_bt_197_bt_543_lot
from converters.BT_197_BT_543_LotsGroup import parse_bt_197_bt_543_lotsgroup, merge_bt_197_bt_543_lotsgroup
from converters.BT_197_BT_553_Tender import parse_bt_197_bt_553_tender, merge_bt_197_bt_553_tender
from converters.BT_197_BT_554_Tender import parse_bt_197_bt_554_tender, merge_bt_197_bt_554_tender
from converters.BT_197_BT_555_Tender import parse_bt_197_bt_555_tender, merge_bt_197_bt_555_tender
from converters.BT_197_BT_635_LotResult import parse_bt_197_bt_635_lotresult, merge_bt_197_bt_635_lotresult
from converters.BT_197_BT_636_LotResult import parse_bt_197_bt_636_lotresult, merge_bt_197_bt_636_lotresult
from converters.BT_197_BT_660_LotResult import parse_bt_197_bt_660_lotresult, merge_bt_197_bt_660_lotresult
from converters.BT_197_BT_709_LotResult import parse_bt_197_bt_709_lotresult, merge_bt_197_bt_709_lotresult
from converters.BT_197_BT_710_LotResult import parse_bt_197_bt_710_lotresult, merge_bt_197_bt_710_lotresult
from converters.BT_197_BT_711_LotResult import parse_bt_197_bt_711_lotresult, merge_bt_197_bt_711_lotresult
from converters.BT_197_BT_712_LotResult import parse_bt_197_bt_712_lotresult, merge_bt_197_bt_712_lotresult
from converters.BT_197_BT_720_Tender import parse_bt_197_bt_720_tender, merge_bt_197_bt_720_tender
from converters.BT_197_BT_733_Lot import parse_bt_197_bt_733_lot, merge_bt_197_bt_733_lot
from converters.BT_197_BT_733_LotsGroup import parse_bt_197_bt_733_lotsgroup, merge_bt_197_bt_733_lotsgroup
from converters.BT_197_BT_734_Lot import parse_bt_197_bt_734_lot, merge_bt_197_bt_734_lot
from converters.BT_197_BT_734_LotsGroup import parse_bt_197_bt_734_lotsgroup, merge_bt_197_bt_734_lotsgroup
from converters.BT_197_BT_759_LotResult import parse_bt_197_bt_759_lotresult, merge_bt_197_bt_759_lotresult
from converters.BT_197_BT_760_LotResult import parse_bt_197_bt_760_lotresult, merge_bt_197_bt_760_lotresult
from converters.BT_197_BT_773_Tender import parse_bt_197_bt_773_tender, merge_bt_197_bt_773_tender
from converters.BT_197_BT_88_Procedure import parse_bt_197_bt_88_procedure, merge_bt_197_bt_88_procedure

#from converters.BT_198_BT_09_Procedure import parse_bt_198_bt_09_procedure, merge_bt_198_bt_09_procedure
from converters.BT_198_BT_105_Procedure import parse_bt_198_bt_105_procedure, merge_bt_198_bt_105_procedure
from converters.BT_198_BT_106_Procedure import parse_bt_198_bt_106_procedure, merge_bt_198_bt_106_procedure

from converters.BT_200_Contract import parse_contract_modification_reason, merge_contract_modification_reason
from converters.BT_201_Contract import parse_contract_modification_description, merge_contract_modification_description
from converters.BT_202_Contract import parse_contract_modification_summary, merge_contract_modification_summary
from converters.BT_21_Lot import parse_lot_title, merge_lot_title
from converters.BT_21_LotsGroup import parse_lots_group_title, merge_lots_group_title
from converters.BT_21_Part import parse_part_title, merge_part_title
from converters.BT_21_Procedure import parse_procedure_title, merge_procedure_title
from converters.BT_22_Lot import parse_lot_internal_identifier, merge_lot_internal_identifier
from converters.BT_23_Lot import parse_main_nature, merge_main_nature
from converters.BT_23_Part import parse_main_nature_part, merge_main_nature_part
from converters.BT_23_Procedure import parse_main_nature_procedure, merge_main_nature_procedure
from converters.BT_24_Lot import parse_lot_description, merge_lot_description
from converters.BT_24_LotsGroup import parse_lots_group_description, merge_lots_group_description
from converters.BT_24_Part import parse_part_description, merge_part_description
from converters.BT_24_Procedure import parse_procedure_description, merge_procedure_description
from converters.BT_25_Lot import parse_lot_quantity, merge_lot_quantity
from converters.BT_26a_lot import parse_classification_type, merge_classification_type
from converters.BT_26a_part import parse_classification_type_part, merge_classification_type_part
from converters.BT_26a_procedure import parse_classification_type_procedure, merge_classification_type_procedure
from converters.BT_26m_lot import parse_main_classification_type_lot, merge_main_classification_type_lot
from converters.BT_26m_part import parse_main_classification_type_part, merge_main_classification_type_part
from converters.BT_26m_procedure import parse_main_classification_type_procedure, merge_main_classification_type_procedure
from converters.BT_262_lot import parse_main_classification_code_lot, merge_main_classification_code_lot
from converters.BT_262_part import parse_main_classification_code_part, merge_main_classification_code_part
from converters.BT_262_procedure import parse_main_classification_code_procedure, merge_main_classification_code_procedure
from converters.BT_263_lot import parse_additional_classification_code_lot, merge_additional_classification_code_lot
from converters.BT_263_part import parse_additional_classification_code_part, merge_additional_classification_code_part
from converters.BT_263_procedure import parse_additional_classification_code_procedure, merge_additional_classification_code_procedure
from converters.BT_27_Lot import parse_bt_27_lot, merge_bt_27_lot
from converters.BT_27_LotsGroup import parse_bt_27_lots_group, merge_bt_27_lots_group
from converters.BT_27_Part import parse_bt_27_part, merge_bt_27_part
from converters.BT_27_Procedure import parse_bt_27_procedure, merge_bt_27_procedure
from converters.BT_271_Lot import parse_bt_271_lot, merge_bt_271_lot
from converters.BT_271_LotsGroup import parse_bt_271_lots_group, merge_bt_271_lots_group
from converters.BT_271_Procedure import parse_bt_271_procedure, merge_bt_271_procedure
from converters.BT_300_Lot import parse_lot_additional_info, merge_lot_additional_info
from converters.BT_300_LotsGroup import parse_lotsgroup_additional_info, merge_lotsgroup_additional_info
from converters.BT_300_Part import parse_part_additional_info, merge_part_additional_info
from converters.BT_300_Procedure import parse_procedure_additional_info, merge_procedure_additional_info
from converters.BT_31_Procedure import parse_max_lots_allowed, merge_max_lots_allowed
from converters.BT_3201_Tender import parse_tender_identifier, merge_tender_identifier
from converters.BT_3202_Contract import parse_contract_tender_id, merge_contract_tender_id
from converters.BT_33_Procedure import parse_max_lots_awarded, merge_max_lots_awarded
from converters.BT_330_Procedure import parse_group_identifier, merge_group_identifier
from converters.BT_36_Lot import parse_lot_duration, merge_lot_duration
from converters.BT_36_Part import parse_part_duration, merge_part_duration
from converters.BT_40_Lot import parse_lot_selection_criteria_second_stage, merge_lot_selection_criteria_second_stage
from converters.BT_41_Lot import parse_lot_following_contract, merge_lot_following_contract
from converters.BT_42_Lot import parse_lot_jury_decision_binding, merge_lot_jury_decision_binding
from converters.BT_44_Lot import parse_prize_rank, merge_prize_rank
from converters.BT_45_Lot import parse_lot_rewards_other, merge_lot_rewards_other
from converters.BT_46_Lot import parse_jury_member_name, merge_jury_member_name
from converters.BT_47_Lot import parse_participant_name, merge_participant_name
from converters.BT_50_Lot import parse_minimum_candidates, merge_minimum_candidates
from converters.BT_500_Organization_Company import parse_organization_name, merge_organization_name
from converters.BT_500_Organization_TouchPoint import parse_touchpoint_name, merge_touchpoint_name
from converters.BT_500_UBO import parse_ubo_name, merge_ubo_name
from converters.BT_501_Organization_Company import parse_organization_identifier, merge_organization_identifier
from converters.BT_5010_Lot import parse_eu_funds_financing_identifier, merge_eu_funds_financing_identifier
from converters.BT_5011_Contract import parse_contract_eu_funds_financing_identifier, merge_contract_eu_funds_financing_identifier
from converters.BT_502_Organization_Company import parse_organization_contact_point, merge_organization_contact_point
from converters.BT_502_Organization_TouchPoint import parse_touchpoint_contact_point, merge_touchpoint_contact_point
from converters.BT_503_Organization_Company import parse_organization_contact_telephone, merge_organization_contact_telephone
from converters.BT_503_Organization_TouchPoint import parse_touchpoint_contact_telephone, merge_touchpoint_contact_telephone
from converters.BT_503_UBO import parse_ubo_telephone, merge_ubo_telephone
from converters.BT_505_Organization_Company import parse_organization_website, merge_organization_website
from converters.BT_505_Organization_TouchPoint import parse_touchpoint_website, merge_touchpoint_website
from converters.BT_506_Organization_Company import parse_organization_contact_email, merge_organization_contact_email
from converters.BT_506_Organization_TouchPoint import parse_touchpoint_contact_email, merge_touchpoint_contact_email
from converters.BT_506_UBO import parse_ubo_email, merge_ubo_email
from converters.BT_507_Organization_Company import parse_organization_country_subdivision, merge_organization_country_subdivision
from converters.BT_507_Organization_TouchPoint import parse_touchpoint_country_subdivision, merge_touchpoint_country_subdivision
from converters.BT_507_UBO import parse_ubo_country_subdivision, merge_ubo_country_subdivision
from converters.BT_5071_Lot import parse_place_performance_country_subdivision, merge_place_performance_country_subdivision
from converters.BT_5071_Part import parse_part_place_performance_country_subdivision, merge_part_place_performance_country_subdivision
from converters.BT_5071_Procedure import parse_procedure_place_performance_country_subdivision, merge_procedure_place_performance_country_subdivision
from converters.BT_508_Procedure_Buyer import parse_buyer_profile_url, merge_buyer_profile_url
from converters.BT_509_Organization_Company import parse_organization_edelivery_gateway, merge_organization_edelivery_gateway
from converters.BT_509_Organization_TouchPoint import parse_touchpoint_edelivery_gateway, merge_touchpoint_edelivery_gateway
from converters.BT_51_Lot import parse_lot_maximum_candidates, merge_lot_maximum_candidates
from converters.BT_510a_Organization_Company import parse_organization_street, merge_organization_street
from converters.BT_510a_Organization_TouchPoint import parse_touchpoint_street, merge_touchpoint_street
from converters.BT_510a_UBO import parse_ubo_street, merge_ubo_street
from converters.BT_510b_Organization_Company import parse_organization_streetline1, merge_organization_streetline1
from converters.BT_510b_Organization_TouchPoint import parse_touchpoint_streetline1, merge_touchpoint_streetline1
from converters.BT_510b_UBO import parse_ubo_streetline1, merge_ubo_streetline1
from converters.BT_510c_Organization_Company import parse_organization_streetline2, merge_organization_streetline2
from converters.BT_510c_Organization_TouchPoint import parse_touchpoint_streetline2, merge_touchpoint_streetline2
from converters.BT_510c_UBO import parse_ubo_streetline2, merge_ubo_streetline2

from converters.BT_5101a_Lot import parse_lot_place_performance_street, merge_lot_place_performance_street
from converters.BT_5101a_Part import parse_part_place_performance_street, merge_part_place_performance_street
from converters.BT_5101a_Procedure import parse_procedure_place_performance_street, merge_procedure_place_performance_street
from converters.BT_5101b_Lot import parse_lot_place_performance_streetline1, merge_lot_place_performance_streetline1
from converters.BT_5101b_Part import parse_part_place_performance_streetline1, merge_part_place_performance_streetline1
from converters.BT_5101b_Procedure import parse_procedure_place_performance_streetline1, merge_procedure_place_performance_streetline1
from converters.BT_5101c_Lot import parse_lot_place_performance_streetline2, merge_lot_place_performance_streetline2
from converters.BT_5101c_Part import parse_part_place_performance_streetline2, merge_part_place_performance_streetline2
from converters.BT_5101c_Procedure import parse_procedure_place_performance_streetline2, merge_procedure_place_performance_streetline2
from converters.BT_512_Organization_Company import parse_organization_postcode, merge_organization_postcode
from converters.BT_512_Organization_TouchPoint import parse_touchpoint_postcode, merge_touchpoint_postcode
from converters.BT_512_UBO import parse_ubo_postcode, merge_ubo_postcode
from converters.BT_5121_Lot import parse_place_performance_post_code, merge_place_performance_post_code
from converters.BT_5121_Part import parse_place_performance_post_code_part, merge_place_performance_post_code_part
from converters.BT_5121_Procedure import parse_place_performance_post_code_procedure, merge_place_performance_post_code_procedure
from converters.BT_513_Organization_Company import parse_organization_city, merge_organization_city
from converters.BT_513_Organization_TouchPoint import parse_touchpoint_city, merge_touchpoint_city
from converters.BT_513_UBO import parse_ubo_city, merge_ubo_city
from converters.BT_5131_Lot import parse_place_performance_city, merge_place_performance_city
from converters.BT_5131_Part import parse_place_performance_city_part, merge_place_performance_city_part
from converters.BT_5131_Procedure import parse_place_performance_city_procedure, merge_place_performance_city_procedure
from converters.BT_514_Organization_Company import parse_organization_country, merge_organization_country
from converters.BT_514_Organization_TouchPoint import parse_touchpoint_country, merge_touchpoint_country
from converters.BT_514_UBO import parse_ubo_country, merge_ubo_country
from converters.BT_5141_Lot import parse_lot_country, merge_lot_country
from converters.BT_5141_Part import parse_part_country, merge_part_country
from converters.BT_5141_Procedure import parse_procedure_country, merge_procedure_country
from converters.BT_52_Lot import parse_successive_reduction_indicator, merge_successive_reduction_indicator
from converters.BT_531_Lot import parse_lot_additional_nature, merge_lot_additional_nature
from converters.BT_531_Part import parse_part_additional_nature, merge_part_additional_nature
from converters.BT_531_Procedure import parse_procedure_additional_nature, merge_procedure_additional_nature
from converters.BT_536_Lot import parse_lot_start_date, merge_lot_start_date
from converters.BT_536_Part import parse_part_contract_start_date, merge_part_contract_start_date
from converters.BT_537_Lot import parse_lot_duration_end_date, merge_lot_duration_end_date
from converters.BT_537_Part import parse_part_duration_end_date, merge_part_duration_end_date
from converters.BT_538_Lot import parse_lot_duration_other, merge_lot_duration_other
from converters.BT_538_Part import parse_part_duration_other, merge_part_duration_other
from converters.BT_539_Lot import parse_award_criterion_type, merge_award_criterion_type
from converters.BT_539_LotsGroup import parse_award_criterion_type_lots_group, merge_award_criterion_type_lots_group
from converters.BT_54_Lot import parse_options_description, merge_options_description
#from converters.BT_540_Lot import parse_lot_award_criterion_description, merge_lot_award_criterion_description
from converters.BT_540_LotsGroup import parse_award_criterion_description_lots_group, merge_award_criterion_description_lots_group
from converters.BT_541_Lot_FixedNumber import parse_award_criterion_fixed_number, merge_award_criterion_fixed_number
from converters.BT_5421_Lot import parse_award_criterion_number_weight_lot, merge_award_criterion_number_weight_lot
from converters.BT_5421_LotsGroup import parse_award_criterion_number_weight_lots_group, merge_award_criterion_number_weight_lots_group

from converters.BT_5423_Lot import parse_award_criterion_number_threshold, merge_award_criterion_number_threshold
from converters.BT_5423_LotsGroup import parse_award_criterion_number_threshold_lotsgroup, merge_award_criterion_number_threshold_lotsgroup
from converters.BT_543_Lot import parse_award_criteria_complicated, merge_award_criteria_complicated
from converters.BT_543_LotsGroup import parse_award_criteria_complicated_lotsgroup, merge_award_criteria_complicated_lotsgroup
from converters.BT_553_Tender import parse_subcontracting_value, merge_subcontracting_value
from converters.BT_554_Tender import parse_subcontracting_description, merge_subcontracting_description
from converters.BT_555_Tender import parse_subcontracting_percentage, merge_subcontracting_percentage
from converters.BT_57_Lot import parse_renewal_description, merge_renewal_description
from converters.BT_58_Lot import parse_renewal_maximum, merge_renewal_maximum
from converters.BT_60_Lot import parse_eu_funds, merge_eu_funds
from converters.BT_610_Procedure_Buyer import parse_activity_entity, merge_activity_entity
from converters.BT_6110_Contract import parse_contract_eu_funds_details, merge_contract_eu_funds_details
from converters.BT_6140_Lot import parse_lot_eu_funds_details, merge_lot_eu_funds_details
from converters.BT_615_Lot import parse_documents_restricted_url, merge_documents_restricted_url
from converters.BT_615_Part import parse_documents_restricted_url_part, merge_documents_restricted_url_part
from converters.BT_625_Lot import parse_unit, merge_unit
from converters.BT_63_Lot import parse_variants, merge_variants
from converters.BT_630_Lot import parse_deadline_receipt_expressions, merge_deadline_receipt_expressions
from converters.BT_631_Lot import parse_dispatch_invitation_interest, merge_dispatch_invitation_interest
from converters.BT_632_Lot import parse_tool_name, merge_tool_name
from converters.BT_632_Part import parse_tool_name_part, merge_tool_name_part
from converters.BT_633_Organization import parse_organization_natural_person, merge_organization_natural_person
from converters.BT_635_LotResult import parse_buyer_review_requests_count, merge_buyer_review_requests_count
from converters.BT_636_LotResult import parse_irregularity_type, merge_irregularity_type
from converters.BT_64_Lot import parse_subcontracting_obligation_minimum, merge_subcontracting_obligation_minimum
from converters.BT_644_Lot_Prize_Value import parse_lot_prize_value, merge_lot_prize_value
from converters.BT_65_Lot_Subcontracting_Obligation import parse_subcontracting_obligation, merge_subcontracting_obligation
from converters.BT_651_Lot_Subcontracting_Tender_Indication import parse_subcontracting_tender_indication, merge_subcontracting_tender_indication
from converters.BT_660_LotResult import parse_framework_reestimated_value, merge_framework_reestimated_value
from converters.BT_67_Exclusion_Grounds import parse_exclusion_grounds, merge_exclusion_grounds
from converters.BT_70_Lot import parse_lot_performance_terms, merge_lot_performance_terms
from converters.BT_702a_Notice import parse_notice_language, merge_notice_language
from converters.BT_706_UBO import parse_ubo_nationalities, merge_ubo_nationalities
from converters.BT_707_Lot import parse_lot_documents_restricted_justification, merge_lot_documents_restricted_justification
from converters.BT_707_Part import parse_part_documents_restricted_justification, merge_part_documents_restricted_justification
from converters.BT_708_Lot import parse_lot_documents_official_language, merge_lot_documents_official_language
from converters.BT_708_Part import parse_part_documents_official_language, merge_part_documents_official_language
from converters.BT_709_LotResult import parse_framework_maximum_value, merge_framework_maximum_value
from converters.BT_71_Lot import parse_reserved_participation, merge_reserved_participation
from converters.BT_71_Part import parse_reserved_participation_part, merge_reserved_participation_part
from converters.BT_710_LotResult import parse_tender_value_lowest, merge_tender_value_lowest
from converters.BT_711_LotResult import parse_tender_value_highest, merge_tender_value_highest
from converters.BT_712_LotResult import parse_lot_result_complaints, merge_lot_result_complaints
from converters.BT_717_Lot import parse_clean_vehicles_directive, merge_clean_vehicles_directive
from converters.BT_719_notice import parse_procurement_documents_change_date, merge_procurement_documents_change_date
from converters.BT_720_Tender import parse_tender_value, merge_tender_value
from converters.BT_721_Contract_Title import parse_contract_title, merge_contract_title
from converters.BT_722_Contract import parse_contract_eu_funds, merge_contract_eu_funds
from converters.BT_7220_Lot import parse_lot_eu_funds, merge_lot_eu_funds
from converters.BT_723_LotResult import parse_vehicle_category, merge_vehicle_category
from converters.BT_726_Lot import parse_lot_sme_suitability, merge_lot_sme_suitability
from converters.BT_726_LotsGroup import parse_lots_group_sme_suitability, merge_lots_group_sme_suitability
from converters.BT_726_Part import parse_part_sme_suitability, merge_part_sme_suitability
from converters.BT_727_Lot import parse_lot_place_performance, merge_lot_place_performance
from converters.BT_727_Part import parse_part_place_performance, merge_part_place_performance
from converters.BT_727_Procedure import parse_procedure_place_performance, merge_procedure_place_performance
from converters.BT_728_Lot import parse_lot_place_performance_additional, merge_lot_place_performance_additional
from converters.BT_728_Part import parse_part_place_performance_additional, merge_part_place_performance_additional
from converters.BT_728_Procedure import parse_procedure_place_performance_additional, merge_procedure_place_performance_additional
from converters.BT_729_Lot import parse_lot_subcontracting_obligation_maximum, merge_lot_subcontracting_obligation_maximum
from converters.BT_732_Lot import parse_lot_security_clearance_description, merge_lot_security_clearance_description
from converters.BT_733_Lot import parse_lot_award_criteria_order_justification, merge_lot_award_criteria_order_justification
from converters.BT_733_LotsGroup import parse_lots_group_award_criteria_order_justification, merge_lots_group_award_criteria_order_justification
from converters.BT_734_Lot import parse_award_criterion_name, merge_award_criterion_name
from converters.BT_734_LotsGroup import parse_award_criterion_name_lotsgroup, merge_award_criterion_name_lotsgroup
from converters.BT_735_Lot import parse_cvd_contract_type, merge_cvd_contract_type
from converters.BT_735_LotResult import parse_cvd_contract_type_lotresult, merge_cvd_contract_type_lotresult
from converters.BT_736_Lot import parse_reserved_execution, merge_reserved_execution
from converters.BT_736_Part import parse_reserved_execution_part, merge_reserved_execution_part
from converters.BT_737_Lot import parse_documents_unofficial_language, merge_documents_unofficial_language
from converters.BT_737_Part import parse_documents_unofficial_language_part, merge_documents_unofficial_language_part
from converters.BT_738_notice import parse_notice_preferred_publication_date, merge_notice_preferred_publication_date
from converters.BT_739_Organization_Company import parse_organization_contact_fax, merge_organization_contact_fax
from converters.BT_739_Organization_TouchPoint import parse_touchpoint_contact_fax, merge_touchpoint_contact_fax
from converters.BT_739_UBO import parse_ubo_fax, merge_ubo_fax
from converters.BT_740_Procedure_Buyer import parse_buyer_contracting_entity, merge_buyer_contracting_entity
from converters.BT_743_Lot import parse_electronic_invoicing, merge_electronic_invoicing
from converters.BT_744_Lot import parse_submission_electronic_signature, merge_submission_electronic_signature
from converters.BT_745_Lot import parse_submission_nonelectronic_description, merge_submission_nonelectronic_description
from converters.BT_746_Organization import parse_winner_listed, merge_winner_listed
from converters.BT_747_Lot import parse_selection_criteria_type, merge_selection_criteria_type
#from converters.BT_749_Lot import parse_selection_criteria_name, merge_selection_criteria_name
from converters.BT_75_Lot import parse_guarantee_required_description, merge_guarantee_required_description
from converters.BT_750_Lot import parse_selection_criteria, merge_selection_criteria
from converters.BT_752_Lot_ThresholdNumber import parse_selection_criteria_threshold_number, merge_selection_criteria_threshold_number
from converters.BT_752_Lot_WeightNumber import parse_selection_criteria_weight_number, merge_selection_criteria_weight_number
from converters.BT_7531_Lot import parse_selection_criteria_number_weight, merge_selection_criteria_number_weight
from converters.BT_7532_Lot import parse_selection_criteria_number_threshold, merge_selection_criteria_number_threshold
from converters.BT_754_Lot import parse_accessibility_criteria, merge_accessibility_criteria
from converters.BT_755_Lot import parse_accessibility_justification, merge_accessibility_justification
from converters.BT_756_Procedure import parse_pin_competition_termination, merge_pin_competition_termination
from converters.BT_759_LotResult import parse_received_submissions_count, merge_received_submissions_count
from converters.BT_76_Lot import parse_tenderer_legal_form, merge_tenderer_legal_form
from converters.BT_760_LotResult import parse_received_submissions_type, merge_received_submissions_type
from converters.BT_762_ChangeReasonDescription import parse_change_reason_description, merge_change_reason_description
from converters.BT_763_LotsAllRequired import parse_lots_all_required, merge_lots_all_required
from converters.BT_764_SubmissionElectronicCatalogue import parse_submission_electronic_catalogue, merge_submission_electronic_catalogue
from converters.BT_765_FrameworkAgreement import parse_framework_agreement, merge_framework_agreement
from converters.BT_765_PartFrameworkAgreement import parse_part_framework_agreement, merge_part_framework_agreement
from converters.BT_766_DynamicPurchasingSystem import parse_dynamic_purchasing_system, merge_dynamic_purchasing_system
from converters.BT_766_PartDynamicPurchasingSystem import parse_part_dynamic_purchasing_system, merge_part_dynamic_purchasing_system
from converters.BT_767_Lot import parse_electronic_auction, merge_electronic_auction
from converters.BT_769_Lot import parse_multiple_tenders, merge_multiple_tenders
from converters.BT_77_Lot import parse_financial_terms, merge_financial_terms
from converters.BT_771_Lot import parse_late_tenderer_info, merge_late_tenderer_info
from converters.BT_772_Lot import parse_late_tenderer_info_description, merge_late_tenderer_info_description
from converters.BT_773_Tender import parse_subcontracting, merge_subcontracting
from converters.BT_774_Lot import parse_green_procurement, merge_green_procurement
from converters.BT_775_Lot import parse_social_procurement, merge_social_procurement
from converters.BT_776_Lot import parse_procurement_innovation, merge_procurement_innovation
from converters.BT_777_Lot import parse_strategic_procurement_description, merge_strategic_procurement_description
from converters.BT_78_Lot import parse_security_clearance_deadline, merge_security_clearance_deadline
from converters.BT_79_Lot import parse_performing_staff_qualification, merge_performing_staff_qualification
from converters.BT_801_Lot import parse_non_disclosure_agreement, merge_non_disclosure_agreement
from converters.BT_802_Lot import parse_non_disclosure_agreement_description, merge_non_disclosure_agreement_description
from converters.BT_805_Lot import parse_green_procurement_criteria, merge_green_procurement_criteria
from converters.BT_92_Lot import parse_electronic_ordering, merge_electronic_ordering
from converters.BT_93_Lot import parse_electronic_payment, merge_electronic_payment
from converters.BT_94_Lot import parse_recurrence, merge_recurrence
from converters.BT_95_Lot import parse_recurrence_description, merge_recurrence_description
from converters.BT_97_Lot import parse_submission_language, merge_submission_language
from converters.BT_98_Lot import parse_tender_validity_deadline, merge_tender_validity_deadline
from converters.BT_99_Lot import parse_review_deadline_description, merge_review_deadline_description
#from converters.BT_198_BT_105 import parse_unpublished_access_date, merge_unpublished_access_date
from converters.OPP_020_Contract import map_extended_duration_indicator, merge_extended_duration_indicator
from converters.OPP_021_Contract import map_essential_assets, merge_essential_assets
from converters.OPP_022_Contract import map_asset_significance, merge_asset_significance
from converters.OPP_023_Contract import map_asset_predominance, merge_asset_predominance
from converters.OPP_031_Tender import parse_contract_conditions, merge_contract_conditions
from converters.OPP_032_Tender import parse_revenues_allocation, merge_revenues_allocation
from converters.OPP_034_Tender import parse_penalties_and_rewards, merge_penalties_and_rewards
from converters.OPP_040_Procedure import parse_main_nature_sub_type, merge_main_nature_sub_type
from converters.OPP_050_Organization import parse_buyers_group_lead_indicator, merge_buyers_group_lead_indicator
from converters.OPP_051_Organization import parse_awarding_cpb_buyer_indicator, merge_awarding_cpb_buyer_indicator
from converters.OPP_052_Organization import parse_acquiring_cpb_buyer_indicator, merge_acquiring_cpb_buyer_indicator
from converters.OPP_080_Tender import parse_kilometers_public_transport, merge_kilometers_public_transport
from converters.OPP_090_Procedure import parse_previous_notice_identifier, merge_previous_notice_identifier
from converters.OPT_030_Procedure_SProvider import parse_provided_service_type, merge_provided_service_type
from converters.OPP_071_Lot import parse_quality_target_code, merge_quality_target_code
from converters.OPP_072_Lot import parse_quality_target_description, merge_quality_target_description
from converters.OPP_100_Contract import parse_framework_notice_identifier, merge_framework_notice_identifier
from converters.OPP_110_111_FiscalLegis import parse_fiscal_legislation, merge_fiscal_legislation
from converters.OPP_112_120_EnvironLegis import parse_environmental_legislation, merge_environmental_legislation
from converters.OPP_113_130_EmployLegis import parse_employment_legislation, merge_employment_legislation
from converters.OPP_140_ProcurementDocs import parse_procurement_documents, merge_procurement_documents
from converters.OPT_155_LotResult import parse_vehicle_type, merge_vehicle_type
from converters.OPT_156_LotResult import parse_vehicle_numeric, merge_vehicle_numeric
from converters.OPT_160_UBO import parse_ubo_first_name, merge_ubo_first_name
from converters.OPT_170_Tenderer import parse_tendering_party_leader, merge_tendering_party_leader
from converters.OPT_200_Organization_Company import parse_organization_technical_identifier, merge_organization_technical_identifier
from converters.OPT_201_Organization_TouchPoint import parse_touchpoint_technical_identifier, merge_touchpoint_technical_identifier
from converters.OPT_202_UBO import parse_beneficial_owner_identifier, merge_beneficial_owner_identifier
from converters.OPT_300_Contract_Signatory import parse_contract_signatory, merge_contract_signatory
from converters.OPT_300_Procedure_SProvider import parse_procedure_sprovider, merge_procedure_sprovider
from converters.OPT_301_Lot_AddInfo import parse_additional_info_provider_identifier, merge_additional_info_provider_identifier
from converters.OPT_301_Lot_DocProvider import parse_document_provider_identifier, merge_document_provider_identifier
from converters.OPT_301_Lot_EmployLegis import parse_employment_legislation_document_reference, merge_employment_legislation_document_reference
from converters.OPT_301_Lot_EnvironLegis import parse_environmental_legislation_document_reference, merge_environmental_legislation_document_reference
from converters.OPT_301_Lot_ReviewOrg import parse_review_org_identifier, merge_review_org_identifier
from converters.OPT_301_Lot_Mediator import parse_mediator_identifier, merge_mediator_identifier
from converters.OPT_301_Lot_ReviewInfo import parse_review_info_identifier, merge_review_info_identifier
from converters.OPT_301_Lot_TenderEval import parse_tender_evaluator_identifier, merge_tender_evaluator_identifier
from converters.OPT_301_Lot_TenderReceipt import parse_tender_recipient_identifier, merge_tender_recipient_identifier
from converters.OPT_301_LotResult_Financing import parse_lotresult_financing, merge_lotresult_financing
from converters.OPT_301_LotResult_Paying import parse_lotresult_paying, merge_lotresult_paying
from converters.OPT_301_Part_AddInfo import parse_part_addinfo, merge_part_addinfo
from converters.OPT_301_Part_DocProvider import parse_part_docprovider, merge_part_docprovider
from converters.OPT_301_Part_EmployLegis import parse_part_employlegis, merge_part_employlegis
from converters.OPT_301_Part_EnvironLegis import parse_part_environlegis, merge_part_environlegis
from converters.OPT_301_Part_FiscalLegis import parse_part_fiscallegis, merge_part_fiscallegis
from converters.OPT_301_Part_Mediator import parse_part_mediator, merge_part_mediator
from converters.OPT_301_Part_ReviewInfo import parse_part_reviewinfo, merge_part_reviewinfo
from converters.OPT_301_Part_ReviewOrg import parse_part_revieworg, merge_part_revieworg
from converters.OPT_301_Part_TenderEval import parse_part_tendereval, merge_part_tendereval
from converters.OPT_301_Part_TenderReceipt import parse_part_tenderreceipt, merge_part_tenderreceipt
from converters.OPT_301_Tenderer_MainCont import parse_tenderer_maincont, merge_tenderer_maincont

# add more OPT 301 her

from converters.OPT_302_Organization import parse_beneficial_owner_reference, merge_beneficial_owner_reference
from converters.OPT_310_Tender import parse_tendering_party_id_reference, merge_tendering_party_id_reference
from converters.OPT_315_LotResult import parse_contract_identifier_reference, merge_contract_identifier_reference
from converters.OPT_316_Contract import parse_contract_technical_identifier, merge_contract_technical_identifier
from converters.OPT_320_LotResult import parse_tender_identifier_reference, merge_tender_identifier_reference



def configure_logging():
    # Create a logger
    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)

    # Create formatter
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s', datefmt='%Y-%m-%d %H:%M:%S')

    # Create file handler and set level to info
    file_handler = logging.FileHandler('app.log', mode='w')
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(formatter)

    # Add handler to logger
    logger.addHandler(file_handler)

def remove_empty_elements(data):
    """
    Recursively remove empty lists, empty dicts, or None elements from a dictionary or list.
    Preserves False boolean values and zero numeric values.
    """
    if isinstance(data, dict):
        return {
            key: remove_empty_elements(value)
            for key, value in data.items()
            if value is not None and (value or isinstance(value, (bool, int, float)))
        }
    elif isinstance(data, list):
        return [
            remove_empty_elements(item)
            for item in data
            if item is not None and (item or isinstance(item, (bool, int, float)))
        ]
    else:
        return data

# Additional step to remove keys with empty dictionaries
def remove_empty_dicts(data):
    if isinstance(data, dict):
        return {
            key: remove_empty_dicts(value)
            for key, value in data.items()
            if value or isinstance(value, (bool, int, float))
        }
    elif isinstance(data, list):
        return [remove_empty_dicts(item) for item in data if item or isinstance(item, (bool, int, float))]
    else:
        return data

def main(xml_path, ocid_prefix):
    # Read the XML content from the file
    with open(xml_path, 'rb') as xml_file:
        xml_content = xml_file.read()

    configure_logging()
    logger = logging.getLogger(__name__)
    logger.info(f"Starting XML to JSON conversion for file: {xml_path}")

    # Initialize NoticeProcessor
    notice_processor = NoticeProcessor(ocid_prefix)

    # Create the release JSON
    release_json_str = notice_processor.create_release(xml_content)
    release_json = json.loads(release_json_str)  # Parse the JSON string into a dictionary
    

    #############################BT

    # Parse and merge BT-01 Procedure data
    for parse_func in [
        parse_procedure_legal_basis_id,
        parse_procedure_legal_basis_description,
        parse_procedure_legal_basis_noid,
        parse_procedure_legal_basis_noid_description,
        parse_procedure_legal_basis_notice
    ]:
        try:
            legal_basis_data = parse_func(xml_content)
            if legal_basis_data:
                merge_procedure_legal_basis(release_json, legal_basis_data)
            else:
                logger.info(f"No data found for {parse_func.__name__}")
        except Exception as e:
            logger.error(f"Error processing {parse_func.__name__}: {str(e)}")

    # Parse and merge BT-03 Form Type
    logger.info("Processing BT-03: Form Type")
    form_type_data = parse_form_type(xml_content)
    if form_type_data:
        merge_form_type(release_json, form_type_data)
    else:
        logger.warning("No Form Type data found")

    # Parse and merge BT-04 Procedure Identifier
    try:
        procedure_identifier_data = parse_procedure_identifier(xml_content)
        if procedure_identifier_data:
            merge_procedure_identifier(release_json, procedure_identifier_data)
        else:
            logger.info("No Procedure Identifier data found")
    except Exception as e:
        logger.error(f"Error processing Procedure Identifier: {str(e)}")

    # Parse and merge BT-05-notice Notice Dispatch Date and Time
    logger.info("Processing BT-05-notice: Notice Dispatch Date and Time")
    dispatch_datetime_data = parse_notice_dispatch_date_time(xml_content)
    if dispatch_datetime_data:
        merge_notice_dispatch_date_time(release_json, dispatch_datetime_data)
    else:
        logger.warning("No Notice Dispatch Date and Time data found")

    # Parse and merge BT-06-Lot Strategic Procurement
    logger.info("Processing BT-06-Lot: Strategic Procurement")
    strategic_procurement_data = parse_strategic_procurement(xml_content)
    if strategic_procurement_data:
        merge_strategic_procurement(release_json, strategic_procurement_data)
    else:
        logger.warning("No Strategic Procurement data found")
    
    # Parse and merge BT-09-Procedure Cross Border Law
    logger.info("Processing BT-09-Procedure: Cross Border Law")
    cross_border_law_data = parse_cross_border_law(xml_content)
    if cross_border_law_data:
        merge_cross_border_law(release_json, cross_border_law_data)
    else:
        logger.warning("No Cross Border Law data found")
    
    # Parse BT-10
    contract_info = parse_contract_xml(xml_content)
    if contract_info:
        if contract_info.get("parties"):
            for new_party in contract_info["parties"]:
                existing_party = next((party for party in release_json.get("parties", []) if party["id"] == new_party["id"]), None)
                if existing_party:
                    if "details" not in existing_party:
                        existing_party["details"] = {"classifications": []}
                    elif "classifications" not in existing_party["details"]:
                        existing_party["details"]["classifications"] = []
                    existing_party["details"]["classifications"].extend(new_party["details"]["classifications"])
                else:
                    release_json.setdefault("parties", []).append(new_party)

    # Parse and merge BT-105-Procedure
    try:
        procedure_type_data = parse_procedure_type(xml_content)
        if procedure_type_data:
            merge_procedure_type(release_json, procedure_type_data)
        else:
            logger.info("No procedure type data found")
    except Exception as e:
        logger.error(f"Error processing procedure type data: {str(e)}")

    # Parse and merge BT-106-Procedure
    try:
        procedure_accelerated_data = parse_procedure_accelerated(xml_content)
        if procedure_accelerated_data:
            merge_procedure_accelerated(release_json, procedure_accelerated_data)
        else:
            logger.info("No procedure accelerated data found")
    except Exception as e:
        logger.error(f"Error processing procedure accelerated data: {str(e)}")

    # Parse and merge BT-109-Lot Framework Duration Justification
    logger.info("Processing BT-109-Lot: Framework Duration Justification")
    framework_duration_data = parse_framework_duration_justification(xml_content)
    if framework_duration_data:
        merge_framework_duration_justification(release_json, framework_duration_data)
    else:
        logger.warning("No Framework Duration Justification data found")

    # Parse and merge BT-11-Procedure-Buyer Buyer Legal Type
    logger.info("Processing BT-11-Procedure-Buyer: Buyer Legal Type")
    buyer_legal_type_data = parse_buyer_legal_type(xml_content)
    if buyer_legal_type_data:
        merge_buyer_legal_type(release_json, buyer_legal_type_data)
    else:
        logger.warning("No Buyer Legal Type data found")
        
    # Parse and merge BT-111-Lot Framework Buyer Categories
    logger.info("Processing BT-111-Lot: Framework Buyer Categories")
    framework_buyer_categories_data = parse_framework_buyer_categories(xml_content)
    if framework_buyer_categories_data:
        merge_framework_buyer_categories(release_json, framework_buyer_categories_data)
    else:
        logger.warning("No Framework Buyer Categories data found")

    # Parse and merge BT-113-Lot Framework Maximum Participants Number
    logger.info("Processing BT-113-Lot: Framework Maximum Participants Number")
    max_participants_data = parse_framework_max_participants(xml_content)
    if max_participants_data:
        merge_framework_max_participants(release_json, max_participants_data)
    else:
        logger.warning("No Framework Maximum Participants data found")
        
    # Parse and merge BT-115 GPA Coverage
    logger.info("Processing BT-115: GPA Coverage")
    gpa_coverage_data = parse_gpa_coverage(xml_content)
    if gpa_coverage_data:
        merge_gpa_coverage(release_json, gpa_coverage_data)
    else:
        logger.warning("No GPA Coverage data found")

    # Parse and merge BT-119-LotResult DPS Termination
    logger.info("Processing BT-119-LotResult: DPS Termination")
    dps_termination_data = parse_dps_termination(xml_content)
    if dps_termination_data:
        merge_dps_termination(release_json, dps_termination_data)
    else:
        logger.warning("No DPS Termination data found")

    # Parse and merge BT-120-Lot No Negotiation Necessary
    logger.info("Processing BT-120-Lot: No Negotiation Necessary")
    no_negotiation_data = parse_no_negotiation_necessary(xml_content)
    if no_negotiation_data:
        merge_no_negotiation_necessary(release_json, no_negotiation_data)
    else:
        logger.warning("No No Negotiation Necessary data found")   

    # Parse and merge BT-122-Lot Electronic Auction Description
    logger.info("Processing BT-122-Lot: Electronic Auction Description")
    auction_description_data = parse_electronic_auction_description(xml_content)
    if auction_description_data:
        merge_electronic_auction_description(release_json, auction_description_data)
    else:
        logger.warning("No Electronic Auction Description data found")

    # Parse and merge BT-123-Lot Electronic Auction URL
    logger.info("Processing BT-123-Lot: Electronic Auction URL")
    auction_url_data = parse_electronic_auction_url(xml_content)
    if auction_url_data:
        merge_electronic_auction_url(release_json, auction_url_data)
    else:
        logger.warning("No Electronic Auction URL data found")

    # Parse and merge BT-124 Tool Atypical URL
    logger.info("Processing BT-124: Tool Atypical URL")
    atypical_url_data = parse_tool_atypical_url(xml_content)
    if atypical_url_data:
        merge_tool_atypical_url(release_json, atypical_url_data)
    else:
        logger.warning("No Tool Atypical URL data found")

    # Parse and merge BT-125(i)-Lot Previous Planning Identifier
    logger.info("Processing BT-125(i)-Lot: Previous Planning Identifier")
    previous_planning_lot_data = parse_previous_planning_identifier_lot(xml_content)
    if previous_planning_lot_data:
        merge_previous_planning_identifier_lot(release_json, previous_planning_lot_data)
    else:
        logger.warning("No Previous Planning Identifier (Lot) data found")

    # Parse and merge BT-125(i)-Part and BT-1251-Part Previous Planning Identifier
    logger.info("Processing BT-125(i)-Part and BT-1251-Part: Previous Planning Identifier")
    previous_planning_part_data = parse_previous_planning_identifier_part(xml_content)
    if previous_planning_part_data:
        #logger.info(f"Found {len(previous_planning_part_data['relatedProcesses'])} related processes for parts")
        #logger.info(f"Data before merge: {json.dumps(previous_planning_part_data, indent=2)}")
        merge_previous_planning_identifier_part(release_json, previous_planning_part_data)
        #logger.info(f"Data after merge: {json.dumps(release_json.get('relatedProcesses', []), indent=2)}")
    else:
        logger.warning("No Previous Planning Identifier (Part) data found")

    # Parse and merge BT-1252-Procedure Direct Award Justification
    logger.info("Processing BT-1252-Procedure: Direct Award Justification")
    direct_award_data = parse_direct_award_justification(xml_content)
    if direct_award_data:
        merge_direct_award_justification(release_json, direct_award_data)
    else:
        logger.warning("No Direct Award Justification data found")

    # Parse and merge BT-127 Future Notice Date
    logger.info("Processing BT-127: Future Notice Date")
    future_notice_date = parse_future_notice_date(xml_content)
    if future_notice_date:
        merge_future_notice_date(release_json, future_notice_date)
    else:
        logger.warning("No Future Notice Date found")

    # Parse and merge BT-13 Additional Information Deadline
    logger.info("Processing BT-13: Additional Information Deadline")
    lots_data = parse_additional_info_deadline(xml_content)
    if lots_data:
        merge_additional_info_deadline(release_json, lots_data)
    else:
        logger.warning("No Additional Information Deadline found")

    # Parse and merge BT-13 Additional Information Deadline (Part)
    logger.info("Processing BT-13: Additional Information Deadline (Part)")
    deadline_part = parse_additional_info_deadline_part(xml_content)
    if deadline_part:
        merge_additional_info_deadline_part(release_json, deadline_part)
    else:
        logger.warning("No Additional Information Deadline (Part) found")

    # Parse and merge BT-130-Lot
    try:
        dispatch_invitation_data = parse_dispatch_invitation_tender(xml_content)
        if dispatch_invitation_data:
            merge_dispatch_invitation_tender(release_json, dispatch_invitation_data)
        else:
            logger.info("No Dispatch Invitation Tender data found")
    except Exception as e:
        logger.error(f"Error processing Dispatch Invitation Tender data: {str(e)}")

    # Parse and merge BT-131-Lot
    try:
        with open(xml_path, 'r', encoding='utf-8') as xml_file:
            xml_content = xml_file.read()
        
        deadline_data = parse_deadline_receipt_tenders(xml_content)
        if deadline_data:
            merge_deadline_receipt_tenders(release_json, deadline_data)
        else:
            logger.info("No Deadline Receipt Tenders data found")
    except Exception as e:
        logger.error(f"Error processing Deadline Receipt Tenders data: {str(e)}")

    # Parse and merge BT-1311-Lot
    try:
        with open(xml_path, 'r', encoding='utf-8') as xml_file:
            xml_content = xml_file.read()
        
        deadline_requests_data = parse_deadline_receipt_requests(xml_content)
        if deadline_requests_data:
            merge_deadline_receipt_requests(release_json, deadline_requests_data)
        else:
            logger.info("No Deadline Receipt Requests data found")
    except Exception as e:
        logger.error(f"Error processing Deadline Receipt Requests data: {str(e)}")

    # Parse and merge BT-132-Lot
    try:
        lot_public_opening_date_data = parse_lot_public_opening_date(xml_content)
        if lot_public_opening_date_data:
            merge_lot_public_opening_date(release_json, lot_public_opening_date_data)
        else:
            logger.info("No Lot Public Opening Date data found")
    except Exception as e:
        logger.error(f"Error processing Lot Public Opening Date data: {str(e)}")

    # Parse and merge BT-133-Lot
    try:
        lot_bid_opening_data = parse_lot_bid_opening_location(xml_content)
        if lot_bid_opening_data:
            merge_lot_bid_opening_location(release_json, lot_bid_opening_data)
        else:
            logger.info("No Lot Bid Opening Location data found")
    except Exception as e:
        logger.error(f"Error processing Lot Bid Opening Location data: {str(e)}")

    # Parse and merge BT-134-Lot
    try:
        lot_public_opening_description_data = parse_lot_public_opening_description(xml_content)
        if lot_public_opening_description_data:
            merge_lot_public_opening_description(release_json, lot_public_opening_description_data)
        else:
            logger.info("No Lot Public Opening Description data found")
    except Exception as e:
        logger.error(f"Error processing Lot Public Opening Description data: {str(e)}")

    # Parse and merge BT-135-Procedure
    try:
        justification_rationale = parse_direct_award_justification_rationale(xml_content)
        if justification_rationale:
            merge_direct_award_justification_rationale(release_json, justification_rationale)
        else:
            logger.info("No Direct Award Justification Rationale found")
    except Exception as e:
        logger.error(f"Error processing Direct Award Justification Rationale: {str(e)}")

    # Parse and merge BT-1351-Procedure
    try:
        accelerated_procedure_justification_data = parse_accelerated_procedure_justification(xml_content)
        if accelerated_procedure_justification_data:
            merge_accelerated_procedure_justification(release_json, accelerated_procedure_justification_data)
        else:
            logger.info("No Accelerated Procedure Justification data found")
    except Exception as e:
        logger.error(f"Error processing Accelerated Procedure Justification data: {str(e)}")

    # Parse and merge BT-136-Procedure
    try:
        justification_code = parse_direct_award_justification_code(xml_content)
        if justification_code:
            merge_direct_award_justification_code(release_json, justification_code)
        else:
            logger.info("No Direct Award Justification Code found")
    except Exception as e:
        logger.error(f"Error processing Direct Award Justification Code: {str(e)}")

    # Parse and merge BT-137-Lot Purpose Lot Identifier
    try:
        purpose_lot_identifier_data = parse_purpose_lot_identifier(xml_content)
        if purpose_lot_identifier_data:
            merge_purpose_lot_identifier(release_json, purpose_lot_identifier_data)
            logger.info("BT-137-Lot: Successfully merged Purpose Lot Identifier data")
        else:
            logger.info("BT-137-Lot: No Purpose Lot Identifier data found")
    except Exception as e:
        logger.error(f"BT-137-Lot: Error processing Purpose Lot Identifier data: {str(e)}")

    # Parse and merge BT-137-LotsGroup
    try:
        lots_group_data = parse_lots_group_identifier(xml_content)
        if lots_group_data:
            merge_lots_group_identifier(release_json, lots_group_data)
        else:
            logger.info("No lots group identifier data found")
    except Exception as e:
        logger.error(f"Error processing lots group identifier data: {str(e)}")

    # Parse and merge BT-137-Part
    try:
        part_data = parse_part_identifier(xml_content)
        if part_data:
            merge_part_identifier(release_json, part_data)
        else:
            logger.info("No part identifier data found")
    except Exception as e:
        logger.error(f"Error processing part identifier data: {str(e)}")

    # Parse and merge BT-13713-LotResult
    try:
        lot_result_data = parse_lot_result_identifier(xml_content)
        if lot_result_data:
            merge_lot_result_identifier(release_json, lot_result_data)
        else:
            logger.info("No lot result identifier data found")
    except Exception as e:
        logger.error(f"Error processing lot result identifier data: {str(e)}")
            
    # Parse and merge BT-13714-Tender
    try:
        tender_lot_identifier_data = parse_tender_lot_identifier(xml_content)
        if tender_lot_identifier_data:
            merge_tender_lot_identifier(release_json, tender_lot_identifier_data)
        else:
            logger.info("No Tender Lot Identifier data found")
    except Exception as e:
        logger.error(f"Error processing Tender Lot Identifier data: {str(e)}")

    # Parse and merge BT-1375-Procedure
    try:
        group_lot_data = parse_group_lot_identifier(xml_content)
        if group_lot_data:
            merge_group_lot_identifier(release_json, group_lot_data)
        else:
            logger.info("No Group Lot Identifier data found")
    except Exception as e:
        logger.error(f"Error processing Group Lot Identifier data: {str(e)}")

    # Parse and merge BT-14-Lot
    try:
        lot_documents_restricted_data = parse_lot_documents_restricted(xml_content)
        if lot_documents_restricted_data:
            merge_lot_documents_restricted(release_json, lot_documents_restricted_data)
        else:
            logger.info("No lot documents restricted data found")
    except Exception as e:
        logger.error(f"Error processing lot documents restricted data: {str(e)}")

    # Parse and merge BT-14-Part
    try:
        part_documents_restricted_data = parse_part_documents_restricted(xml_content)
        if part_documents_restricted_data:
            merge_part_documents_restricted(release_json, part_documents_restricted_data)
        else:
            logger.info("No part documents restricted data found")
    except Exception as e:
        logger.error(f"Error processing part documents restricted data: {str(e)}")

    # Parse and merge BT-140-notice
    try:
        change_reason_code_data = parse_change_reason_code(xml_content)
        if change_reason_code_data:
            merge_change_reason_code(release_json, change_reason_code_data)
        else:
            logger.info("No change reason code data found")
    except Exception as e:
        logger.error(f"Error processing change reason code data: {str(e)}")
    
    # Parse and merge BT-142-LotResult
    try:
        winner_chosen_data = parse_winner_chosen(xml_content)
        if winner_chosen_data:
            merge_winner_chosen(release_json, winner_chosen_data)
        else:
            logger.info("No winner chosen data found")
    except Exception as e:
        logger.error(f"Error processing winner chosen data: {str(e)}")

    # Parse and merge BT-144-LotResult
    try:
        not_awarded_reason_data = parse_not_awarded_reason(xml_content)
        if not_awarded_reason_data:
            merge_not_awarded_reason(release_json, not_awarded_reason_data)
        else:
            logger.info("No not awarded reason data found")
    except Exception as e:
        logger.error(f"Error processing not awarded reason data: {str(e)}")

    # Parse and merge BT-145-Contract
    try:
        contract_conclusion_date_data = parse_contract_conclusion_date(xml_content)
        if contract_conclusion_date_data:
            merge_contract_conclusion_date(release_json, contract_conclusion_date_data)
        else:
            logger.info("No Contract Conclusion Date data found")
    except Exception as e:
        logger.error(f"Error processing Contract Conclusion Date data: {str(e)}")

    # Parse and merge BT-1451-Contract
    try:
        winner_decision_date_data = parse_winner_decision_date(xml_content)
        if winner_decision_date_data:
            merge_winner_decision_date(release_json, winner_decision_date_data)
        else:
            logger.info("No Winner Decision Date data found")
    except Exception as e:
        logger.error(f"Error processing Winner Decision Date data: {str(e)}")

    # Parse and merge BT-15-Lot-Part
    try:
        documents_url_data = parse_documents_url(xml_content)
        if documents_url_data:
            merge_documents_url(release_json, documents_url_data)
        else:
            logger.info("No documents URL data found")
    except Exception as e:
        logger.error(f"Error processing documents URL data: {str(e)}")

    # Parse and merge BT-150-Contract
    try:
        contract_identifier_data = parse_contract_identifier(xml_content)
        if contract_identifier_data:
            merge_contract_identifier(release_json, contract_identifier_data)
        else:
            logger.info("No Contract Identifier data found")
    except Exception as e:
        logger.error(f"Error processing Contract Identifier data: {str(e)}")

    # Parse and merge BT-151-Contract
    try:
        contract_url_data = parse_contract_url(xml_content)
        if contract_url_data:
            merge_contract_url(release_json, contract_url_data)
        else:
            logger.info("No contract URL data found")
    except Exception as e:
        logger.error(f"Error processing contract URL data: {str(e)}")

    # Parse the organization info BT-500 
    try:
        organization_name_data = parse_organization_name(xml_content)
        if organization_name_data:
            merge_organization_name(release_json, organization_name_data)
        else:
            logger.info("No Organization Name data found")
    except Exception as e:
        logger.error(f"Error processing Organization Name data: {str(e)}")

    # Process BT-16-Organization-Company
    try:
        organization_part_name_data = parse_organization_part_name(xml_content)
        if organization_part_name_data:
            #logger.info(f"BT-16 data before merge: {organization_part_name_data}")
            merge_organization_part_name(release_json, organization_part_name_data)
            #logger.info(f"BT-16 data after merge: {release_json.get('parties', [])}")
        else:
            logger.info("No Organization Part Name data found")
    except Exception as e:
        logger.error(f"Error processing Organization Part Name data: {str(e)}")

    # Parse the organization info BT_500_Organization_TouchPoint
    try:
        touchpoint_name_data = parse_touchpoint_name(xml_content)
        if touchpoint_name_data:
            merge_touchpoint_name(release_json, touchpoint_name_data)
        else:
            logger.info("No TouchPoint Name data found")
    except Exception as e:
        logger.error(f"Error processing TouchPoint Name data: {str(e)}")

    # Parse and merge BT-16-Organization-TouchPoint
    try:
        touchpoint_part_name_data = parse_touchpoint_part_name(xml_content)
        if touchpoint_part_name_data:
            #logger.info(f"BT-16 TouchPoint data before merge: {touchpoint_part_name_data}")
            merge_touchpoint_part_name(release_json, touchpoint_part_name_data)
            #logger.info(f"BT-16 TouchPoint data after merge: {release_json.get('parties', [])}")
        else:
            logger.info("No TouchPoint Part Name data found")
    except Exception as e:
        logger.error(f"Error processing TouchPoint Part Name data: {str(e)}")

    # Parse and merge BT-160-Tender
    try:
        concession_revenue_buyer_data = parse_concession_revenue_buyer(xml_content)
        if concession_revenue_buyer_data:
            #logger.info(f"BT-160 Concession Revenue Buyer data before merge: {concession_revenue_buyer_data}")
            merge_concession_revenue_buyer(release_json, concession_revenue_buyer_data)
            #logger.info(f"BT-160 Concession Revenue Buyer data after merge: {release_json.get('contracts', [])}")
        else:
            logger.info("No Concession Revenue Buyer data found")
    except Exception as e:
        logger.error(f"Error processing Concession Revenue Buyer data: {str(e)}")

    # Parse and merge BT-162-Tender
    try:
        concession_revenue_user_data = parse_concession_revenue_user(xml_content)
        if concession_revenue_user_data:
            #logger.info(f"BT-162 Concession Revenue User data before merge: {concession_revenue_user_data}")
            merge_concession_revenue_user(release_json, concession_revenue_user_data)
            #logger.info(f"BT-162 Concession Revenue User data after merge: {release_json.get('contracts', [])}")
        else:
            logger.info("No Concession Revenue User data found")
    except Exception as e:
        logger.error(f"Error processing Concession Revenue User data: {str(e)}")

    # Parse and merge BT-163-Tender
    try:
        concession_value_description_data = parse_concession_value_description(xml_content)
        if concession_value_description_data:
            merge_concession_value_description(release_json, concession_value_description_data)
        else:
            logger.info("No concession value description data found")
    except Exception as e:
        logger.error(f"Error processing concession value description data: {str(e)}")

    # Parse and merge BT-165-Organization-Company
    try:
        winner_size_data = parse_winner_size(xml_content)
        if winner_size_data:
            merge_winner_size(release_json, winner_size_data)
        else:
            logger.info("No Winner Size data found")
    except Exception as e:
        logger.error(f"Error processing Winner Size data: {str(e)}")

    # Parse and merge BT-17-Lot
    try:
        submission_electronic_data = parse_submission_electronic(xml_content)
        if submission_electronic_data:
            merge_submission_electronic(release_json, submission_electronic_data)
        else:
            logger.info("No Submission Electronic data found")
    except Exception as e:
        logger.error(f"Error processing Submission Electronic data: {str(e)}")

    # Parse and merge BT-171-Tender
    try:
        tender_rank_data = parse_tender_rank(xml_content)
        if tender_rank_data:
            merge_tender_rank(release_json, tender_rank_data)
        else:
            logger.info("No Tender Rank data found")
    except Exception as e:
        logger.error(f"Error processing Tender Rank data: {str(e)}")

    # Parse and merge BT-1711-Tender
    try:
        tender_ranked_data = parse_tender_ranked(xml_content)
        if tender_ranked_data:
            merge_tender_ranked(release_json, tender_ranked_data)
        else:
            logger.info("No Tender Ranked data found")
    except Exception as e:
        logger.error(f"Error processing Tender Ranked data: {str(e)}")

    # Parse the Submission URL (BT-18)
    try:
        submission_url_data = parse_submission_url(xml_content)
        if submission_url_data:
            merge_submission_url(release_json, submission_url_data)
        else:
            logger.info("No Submission URL data found")
    except Exception as e:
        logger.error(f"Error processing Submission URL data: {str(e)}")

    # Parse and merge BT-19-Lot
    try:
        justification_data = parse_submission_nonelectronic_justification(xml_content)
        if justification_data:
            merge_submission_nonelectronic_justification(release_json, justification_data)
        else:
            logger.info("No Submission Nonelectronic Justification data found")
    except Exception as e:
        logger.error(f"Error processing Submission Nonelectronic Justification data: {str(e)}")
    # Parse and merge BT-191-Tender
    try:
        country_origin_data = parse_country_origin(xml_content)
        if country_origin_data:
            #logger.info(f"BT-191 Country Origin data before merge: {country_origin_data}")
            merge_country_origin(release_json, country_origin_data)
            #logger.info(f"BT-191 Country Origin data after merge: {release_json.get('bids', {}).get('details', [])}")
        else:
            logger.info("No Country Origin data found")
    except Exception as e:
        logger.error(f"Error processing Country Origin data: {str(e)}")

    # Parse the Tender Variant (BT-193)
    try:
        tender_variant_data = parse_tender_variant(xml_content)
        if tender_variant_data:
            merge_tender_variant(release_json, tender_variant_data)
        else:
            logger.info("No Tender Variant data found")
    except Exception as e:
        logger.error(f"Error processing Tender Variant data: {str(e)}")

    # Parse and merge BT-195(BT-09)-Procedure
    try:
        unpublished_cross_border_law_data = parse_unpublished_cross_border_law(xml_content)
        if unpublished_cross_border_law_data:
            merge_unpublished_cross_border_law(release_json, unpublished_cross_border_law_data)
        else:
            logger.info("No Unpublished Cross Border Law data found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Cross Border Law data: {str(e)}")

    # Parse and merge BT-195(BT-105)-Procedure
    try:
        unpublished_procedure_type_data = parse_unpublished_procedure_type(xml_content)
        if unpublished_procedure_type_data:
            #logger.info(f"BT-195(BT-105) Unpublished Procedure Type data before merge: {unpublished_procedure_type_data}")
            merge_unpublished_procedure_type(release_json, unpublished_procedure_type_data)
            #logger.info(f"BT-195(BT-105) Unpublished Procedure Type data after merge: {release_json.get('withheldInformation', [])}")
        else:
            logger.info("No Unpublished Procedure Type data found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Procedure Type data: {str(e)}")

    # Parse and merge BT-195(BT-106)-Procedure
    try:
        unpublished_procedure_accelerated_data = parse_unpublished_procedure_accelerated(xml_content)
        if unpublished_procedure_accelerated_data:
            merge_unpublished_procedure_accelerated(release_json, unpublished_procedure_accelerated_data)
        else:
            logger.info("No Unpublished Procedure Accelerated data found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Procedure Accelerated data: {str(e)}")

    # Parse and merge BT-195(BT-1252)-Procedure
    try:
        unpublished_direct_award_justification_data = parse_unpublished_direct_award_justification(xml_content)
        if unpublished_direct_award_justification_data:
            #logger.info(f"BT-195(BT-1252) Unpublished Direct Award Justification data before merge: {unpublished_direct_award_justification_data}")
            merge_unpublished_direct_award_justification(release_json, unpublished_direct_award_justification_data)
            #logger.info(f"BT-195(BT-1252) Unpublished Direct Award Justification data after merge: {release_json.get('withheldInformation', [])}")
        else:
            logger.info("No Unpublished Direct Award Justification data found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Direct Award Justification data: {str(e)}")

    # Parse and merge BT-195(BT-135)-Procedure
    try:
        unpublished_direct_award_justification_text_data = parse_unpublished_direct_award_justification_text(xml_content)
        if unpublished_direct_award_justification_text_data:
            #logger.info(f"BT-195(BT-135) Unpublished Direct Award Justification Text data before merge: {unpublished_direct_award_justification_text_data}")
            merge_unpublished_direct_award_justification_text(release_json, unpublished_direct_award_justification_text_data)
            #logger.info(f"BT-195(BT-135) Unpublished Direct Award Justification Text data after merge: {release_json.get('withheldInformation', [])}")
        else:
            logger.info("No Unpublished Direct Award Justification Text data found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Direct Award Justification Text data: {str(e)}")

    # Parse and merge BT-195(BT-1351)-Procedure
    try:
        unpublished_procedure_accelerated_justification_data = parse_unpublished_procedure_accelerated_justification(xml_content)
        if unpublished_procedure_accelerated_justification_data:
            #logger.info(f"BT-195(BT-1351) Unpublished Procedure Accelerated Justification data before merge: {unpublished_procedure_accelerated_justification_data}")
            merge_unpublished_procedure_accelerated_justification(release_json, unpublished_procedure_accelerated_justification_data)
            #logger.info(f"BT-195(BT-1351) Unpublished Procedure Accelerated Justification data after merge: {release_json.get('withheldInformation', [])}")
        else:
            logger.info("No Unpublished Procedure Accelerated Justification data found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Procedure Accelerated Justification data: {str(e)}")

    # Parse and merge BT-195(BT-136)-Procedure
    try:
        unpublished_direct_award_justification_data_bt_136 = parse_unpublished_direct_award_justification_bt_136(xml_content)
        if unpublished_direct_award_justification_data_bt_136:
            #logger.info(f"BT-195(BT-136) Unpublished Direct Award Justification data before merge: {unpublished_direct_award_justification_data_bt_136}")
            merge_unpublished_direct_award_justification_bt_136(release_json, unpublished_direct_award_justification_data_bt_136)
            #logger.info(f"BT-195(BT-136) Unpublished Direct Award Justification data after merge: {release_json.get('withheldInformation', [])}")
        else:
            logger.info("No Unpublished Direct Award Justification data found for BT-136")
    except Exception as e:
        logger.error(f"Error processing Unpublished Direct Award Justification data for BT-136: {str(e)}")

    # Parse and merge BT-195(BT-142)-LotResult
    try:
        unpublished_winner_chosen_data = parse_unpublished_winner_chosen(xml_content)
        if unpublished_winner_chosen_data:
            #logger.info(f"BT-195(BT-142) Unpublished Winner Chosen data before merge: {unpublished_winner_chosen_data}")
            merge_unpublished_winner_chosen(release_json, unpublished_winner_chosen_data)
            #logger.info(f"BT-195(BT-142) Unpublished Winner Chosen data after merge: {release_json.get('withheldInformation', [])}")
        else:
            logger.info("No Unpublished Winner Chosen data found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Winner Chosen data: {str(e)}")

    # Parse and merge BT-195(BT-144)-LotResult
    try:
        unpublished_not_awarded_reason_data = parse_unpublished_not_awarded_reason(xml_content)
        if unpublished_not_awarded_reason_data:
            #logger.info(f"BT-195(BT-144) Unpublished Not Awarded Reason data before merge: {unpublished_not_awarded_reason_data}")
            merge_unpublished_not_awarded_reason(release_json, unpublished_not_awarded_reason_data)
            #logger.info(f"BT-195(BT-144) Unpublished Not Awarded Reason data after merge: {release_json.get('withheldInformation', [])}")
        else:
            logger.info("No Unpublished Not Awarded Reason data found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Not Awarded Reason data: {str(e)}")

    # Parse and merge BT-195(BT-160)-Tender
    try:
        unpublished_concession_revenue_buyer_data = parse_unpublished_concession_revenue_buyer(xml_content)
        if unpublished_concession_revenue_buyer_data:
            #logger.info(f"BT-195(BT-160) Unpublished Concession Revenue Buyer data before merge: {unpublished_concession_revenue_buyer_data}")
            merge_unpublished_concession_revenue_buyer(release_json, unpublished_concession_revenue_buyer_data)
            #logger.info(f"BT-195(BT-160) Unpublished Concession Revenue Buyer data after merge: {release_json.get('withheldInformation', [])}")
        else:
            logger.info("No Unpublished Concession Revenue Buyer data found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Concession Revenue Buyer data: {str(e)}")

    # Parse and merge BT-195(BT-162)-Tender
    try:
        unpublished_concession_revenue_user_data = parse_unpublished_concession_revenue_user(xml_content)
        if unpublished_concession_revenue_user_data:
            #logger.info(f"BT-195(BT-162) Unpublished Concession Revenue User data before merge: {unpublished_concession_revenue_user_data}")
            merge_unpublished_concession_revenue_user(release_json, unpublished_concession_revenue_user_data)
            #logger.info(f"BT-195(BT-162) Unpublished Concession Revenue User data after merge: {release_json.get('withheldInformation', [])}")
        else:
            logger.info("No Unpublished Concession Revenue User data found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Concession Revenue User data: {str(e)}")

    # Parse and merge BT-195(BT-163)-Tender
    try:
        unpublished_concession_value_description_data = parse_unpublished_concession_value_description(xml_content)
        if unpublished_concession_value_description_data:
            #logger.info(f"BT-195(BT-163) Unpublished Concession Value Description data before merge: {unpublished_concession_value_description_data}")
            merge_unpublished_concession_value_description(release_json, unpublished_concession_value_description_data)
            #logger.info(f"BT-195(BT-163) Unpublished Concession Value Description data after merge: {release_json.get('withheldInformation', [])}")
        else:
            logger.info("No Unpublished Concession Value Description data found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Concession Value Description data: {str(e)}")

    # Parse and merge BT-195(BT-171)-Tender
    try:
        unpublished_tender_rank_data = parse_unpublished_tender_rank(xml_content)
        if unpublished_tender_rank_data:
            #logger.info(f"BT-195(BT-171) Unpublished Tender Rank data before merge: {unpublished_tender_rank_data}")
            merge_unpublished_tender_rank(release_json, unpublished_tender_rank_data)
            #logger.info(f"BT-195(BT-171) Unpublished Tender Rank data after merge: {release_json.get('withheldInformation', [])}")
        else:
            logger.info("No Unpublished Tender Rank data found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Tender Rank data: {str(e)}")

    # Parse and merge BT-195(BT-191)-Tender
    try:
        unpublished_country_origin_data = parse_unpublished_country_origin(xml_content)
        if unpublished_country_origin_data:
            #logger.info(f"BT-195(BT-191) Unpublished Country Origin data before merge: {unpublished_country_origin_data}")
            merge_unpublished_country_origin(release_json, unpublished_country_origin_data)
            #logger.info(f"BT-195(BT-191) Unpublished Country Origin data after merge: {release_json.get('withheldInformation', [])}")
        else:
            logger.info("No Unpublished Country Origin data found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Country Origin data: {str(e)}")

    # Parse and merge BT-195(BT-193)-Tender
    try:
        unpublished_winning_tender_variant_data = parse_unpublished_winning_tender_variant(xml_content)
        if unpublished_winning_tender_variant_data:
            #logger.info(f"BT-195(BT-193) Unpublished Winning Tender Variant data before merge: {unpublished_winning_tender_variant_data}")
            merge_unpublished_winning_tender_variant(release_json, unpublished_winning_tender_variant_data)
            #logger.info(f"BT-195(BT-193) Unpublished Winning Tender Variant data after merge: {release_json.get('withheldInformation', [])}")
        else:
            logger.info("No Unpublished Winning Tender Variant data found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Winning Tender Variant data: {str(e)}")

    # Parse and merge BT-195(BT-539)-Lot
    try:
        unpublished_award_criterion_type_data = parse_unpublished_award_criterion_type(xml_content)
        if unpublished_award_criterion_type_data:
            #logger.info(f"BT-195(BT-539) Unpublished Award Criterion Type data before merge: {unpublished_award_criterion_type_data}")
            merge_unpublished_award_criterion_type(release_json, unpublished_award_criterion_type_data)
            #logger.info(f"BT-195(BT-539) Unpublished Award Criterion Type data after merge: {release_json.get('withheldInformation', [])}")
        else:
            logger.info("No Unpublished Award Criterion Type data found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Award Criterion Type data: {str(e)}")

    # Parse and merge BT-195(BT-539)-LotsGroup
    try:
        unpublished_award_criterion_type_lots_group_data = parse_unpublished_award_criterion_type_lots_group(xml_content)
        if unpublished_award_criterion_type_lots_group_data:
            #logger.info(f"BT-195(BT-539) Unpublished Award Criterion Type (LotsGroup) data before merge: {unpublished_award_criterion_type_lots_group_data}")
            merge_unpublished_award_criterion_type_lots_group(release_json, unpublished_award_criterion_type_lots_group_data)
            #logger.info(f"BT-195(BT-539) Unpublished Award Criterion Type (LotsGroup) data after merge: {release_json.get('withheldInformation', [])}")
        else:
            logger.info("No Unpublished Award Criterion Type (LotsGroup) data found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Award Criterion Type (LotsGroup) data: {str(e)}")

    # Parse and merge BT-195(BT-540)-Lot
    try:
        unpublished_award_criterion_description_data = parse_unpublished_award_criterion_description(xml_content)
        if unpublished_award_criterion_description_data:
            #logger.info(f"BT-195(BT-540) Unpublished Award Criterion Description data before merge: {unpublished_award_criterion_description_data}")
            merge_unpublished_award_criterion_description(release_json, unpublished_award_criterion_description_data)
            #logger.info(f"BT-195(BT-540) Unpublished Award Criterion Description data after merge: {release_json.get('withheldInformation', [])}")
        else:
            logger.info("No Unpublished Award Criterion Description data found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Award Criterion Description data: {str(e)}")

    # Parse and merge BT-195(BT-540)-LotsGroup
    try:
        unpublished_award_criterion_description_lots_group_data = parse_unpublished_award_criterion_description_lots_group(xml_content)
        if unpublished_award_criterion_description_lots_group_data:
            #logger.info(f"BT-195(BT-540) Unpublished Award Criterion Description (LotsGroup) data before merge: {unpublished_award_criterion_description_lots_group_data}")
            merge_unpublished_award_criterion_description_lots_group(release_json, unpublished_award_criterion_description_lots_group_data)
            #logger.info(f"BT-195(BT-540) Unpublished Award Criterion Description (LotsGroup) data after merge: {release_json.get('withheldInformation', [])}")
        else:
            logger.info("No Unpublished Award Criterion Description (LotsGroup) data found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Award Criterion Description (LotsGroup) data: {str(e)}")   

    # Parse and merge BT-195(BT-541)-Lot-Fixed
    try:
        unpublished_award_criterion_number_fixed_data = parse_unpublished_award_criterion_number_fixed(xml_content)
        if unpublished_award_criterion_number_fixed_data:
            #logger.info(f"BT-195(BT-541) Unpublished Award Criterion Number Fixed data before merge: {unpublished_award_criterion_number_fixed_data}")
            merge_unpublished_award_criterion_number_fixed(release_json, unpublished_award_criterion_number_fixed_data)
            #logger.info(f"BT-195(BT-541) Unpublished Award Criterion Number Fixed data after merge: {release_json.get('withheldInformation', [])}")
        else:
            logger.info("No Unpublished Award Criterion Number Fixed data found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Award Criterion Number Fixed data: {str(e)}")
 
    # Parse and merge BT-195(BT-541)-Lot-Threshold
    try:
        unpublished_award_criterion_number_threshold_data = parse_unpublished_award_criterion_number_threshold(xml_content)
        if unpublished_award_criterion_number_threshold_data:
            #logger.info(f"BT-195(BT-541) Unpublished Award Criterion Number Threshold data before merge: {unpublished_award_criterion_number_threshold_data}")
            merge_unpublished_award_criterion_number_threshold(release_json, unpublished_award_criterion_number_threshold_data)
            #logger.info(f"BT-195(BT-541) Unpublished Award Criterion Number Threshold data after merge: {release_json.get('withheldInformation', [])}")
        else:
            logger.info("No Unpublished Award Criterion Number Threshold data found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Award Criterion Number Threshold data: {str(e)}")

    # Parse and merge BT-195(BT-541)-Lot-Weight
    try:
        unpublished_award_criterion_number_weight_data = parse_unpublished_award_criterion_number_weight(xml_content)
        if unpublished_award_criterion_number_weight_data:
            merge_unpublished_award_criterion_number_weight(release_json, unpublished_award_criterion_number_weight_data)
        else:
            logger.info("No unpublished award criterion number weight data found")
    except Exception as e:
        logger.error(f"Error processing unpublished award criterion number weight data: {str(e)}")

    # Parse and merge BT-195(BT-541)-LotsGroup-Fixed
    try:
        unpublished_award_criterion_number_fixed_lotsgroup_data = parse_unpublished_award_criterion_number_fixed_lotsgroup(xml_content)
        if unpublished_award_criterion_number_fixed_lotsgroup_data:
            merge_unpublished_award_criterion_number_fixed_lotsgroup(release_json, unpublished_award_criterion_number_fixed_lotsgroup_data)
        else:
            logger.info("No unpublished award criterion number fixed lotsgroup data found")
    except Exception as e:
        logger.error(f"Error processing unpublished award criterion number fixed lotsgroup data: {str(e)}")

    # Parse and merge BT-195(BT-541)-LotsGroup-Threshold
    try:
        unpublished_award_criterion_number_threshold_lotsgroup_data = parse_unpublished_award_criterion_number_threshold_lotsgroup(xml_content)
        if unpublished_award_criterion_number_threshold_lotsgroup_data:
            merge_unpublished_award_criterion_number_threshold_lotsgroup(release_json, unpublished_award_criterion_number_threshold_lotsgroup_data)
        else:
            logger.info("No unpublished award criterion number threshold lotsgroup data found")
    except Exception as e:
        logger.error(f"Error processing unpublished award criterion number threshold lotsgroup data: {str(e)}")

    # Parse and merge BT-195(BT-541)-LotsGroup-Weight
    try:
        unpublished_award_criterion_number_weight_lotsgroup_bt541_data = parse_unpublished_award_criterion_number_weight_lotsgroup_bt541(xml_content)
        if unpublished_award_criterion_number_weight_lotsgroup_bt541_data:
            merge_unpublished_award_criterion_number_weight_lotsgroup_bt541(release_json, unpublished_award_criterion_number_weight_lotsgroup_bt541_data)
        else:
            logger.info("No unpublished award criterion number weight lotsgroup BT-541 data found")
    except Exception as e:
        logger.error(f"Error processing unpublished award criterion number weight lotsgroup BT-541 data: {str(e)}")

    # Parse and merge BT-195(BT-5421)-Lot
    try:
        unpublished_award_criterion_number_weight_lot_data = parse_unpublished_award_criterion_number_weight_lot(xml_content)
        if unpublished_award_criterion_number_weight_lot_data:
            merge_unpublished_award_criterion_number_weight_lot(release_json, unpublished_award_criterion_number_weight_lot_data)
        else:
            logger.info("No unpublished award criterion number weight lot data found")
    except Exception as e:
        logger.error(f"Error processing unpublished award criterion number weight lot data: {str(e)}")

    # Parse and merge BT-195(BT-5421)-LotsGroup
    try:
        unpublished_award_criterion_number_weight_lotsgroup_data = parse_unpublished_award_criterion_number_weight_lotsgroup(xml_content)
        if unpublished_award_criterion_number_weight_lotsgroup_data:
            merge_unpublished_award_criterion_number_weight_lotsgroup(release_json, unpublished_award_criterion_number_weight_lotsgroup_data)
        else:
            logger.info("No unpublished award criterion number weight lotsgroup data found")
    except Exception as e:
        logger.error(f"Error processing unpublished award criterion number weight lotsgroup data: {str(e)}")

    # Parse and merge BT-195(BT-5422)-Lot
    try:
        unpublished_award_criterion_number_fixed_lot_data = parse_unpublished_award_criterion_number_fixed_lot(xml_content)
        if unpublished_award_criterion_number_fixed_lot_data:
            merge_unpublished_award_criterion_number_fixed_lot(release_json, unpublished_award_criterion_number_fixed_lot_data)
        else:
            logger.info("No unpublished award criterion number fixed lot data found")
    except Exception as e:
        logger.error(f"Error processing unpublished award criterion number fixed lot data: {str(e)}")

    # Parse and merge BT-195(BT-5422)-LotsGroup
    try:
        unpublished_award_criterion_number_fixed_lotsgroup_data = parse_unpublished_award_criterion_number_fixed_lotsgroup_bt5422(xml_content)
        if unpublished_award_criterion_number_fixed_lotsgroup_data:
            merge_unpublished_award_criterion_number_fixed_lotsgroup_bt5422(release_json, unpublished_award_criterion_number_fixed_lotsgroup_data)
        else:
            logger.info("No unpublished award criterion number fixed lotsgroup data found")
    except Exception as e:
        logger.error(f"Error processing unpublished award criterion number fixed lotsgroup data: {str(e)}")

    # Parse and merge BT-195(BT-5423)-Lot
    try:
        unpublished_award_criterion_number_threshold_lot_data = parse_unpublished_award_criterion_number_threshold_lot(xml_content)
        if unpublished_award_criterion_number_threshold_lot_data:
            merge_unpublished_award_criterion_number_threshold_lot(release_json, unpublished_award_criterion_number_threshold_lot_data)
        else:
            logger.info("No unpublished award criterion number threshold lot data found")
    except Exception as e:
        logger.error(f"Error processing unpublished award criterion number threshold lot data: {str(e)}")

    # Parse and merge BT-195(BT-5423)-LotsGroup
    try:
        unpublished_award_criterion_number_threshold_lotsgroup_data = parse_unpublished_award_criterion_number_threshold_lotsgroup_bt5423(xml_content)
        if unpublished_award_criterion_number_threshold_lotsgroup_data:
            merge_unpublished_award_criterion_number_threshold_lotsgroup_bt5423(release_json, unpublished_award_criterion_number_threshold_lotsgroup_data)
        else:
            logger.info("No unpublished award criterion number threshold lotsgroup data found")
    except Exception as e:
        logger.error(f"Error processing unpublished award criterion number threshold lotsgroup data: {str(e)}")

    # Parse and merge BT-195(BT-543)-Lot
    try:
        unpublished_award_criteria_complicated_lot_data = parse_unpublished_award_criteria_complicated_lot(xml_content)
        if unpublished_award_criteria_complicated_lot_data:
            merge_unpublished_award_criteria_complicated_lot(release_json, unpublished_award_criteria_complicated_lot_data)
        else:
            logger.info("No unpublished award criteria complicated lot data found")
    except Exception as e:
        logger.error(f"Error processing unpublished award criteria complicated lot data: {str(e)}")

    # Parse and merge BT-195(BT-543)-LotsGroup
    try:
        unpublished_award_criteria_complicated_lotsgroup_data = parse_unpublished_award_criteria_complicated_lotsgroup(xml_content)
        if unpublished_award_criteria_complicated_lotsgroup_data:
            merge_unpublished_award_criteria_complicated_lotsgroup(release_json, unpublished_award_criteria_complicated_lotsgroup_data)
        else:
            logger.info("No unpublished award criteria complicated lotsgroup data found")
    except Exception as e:
        logger.error(f"Error processing unpublished award criteria complicated lotsgroup data: {str(e)}")

    # Parse and merge BT-195(BT-553)-Tender
    try:
        unpublished_subcontracting_value_tender_data = parse_unpublished_subcontracting_value_tender(xml_content)
        if unpublished_subcontracting_value_tender_data:
            merge_unpublished_subcontracting_value_tender(release_json, unpublished_subcontracting_value_tender_data)
        else:
            logger.info("No unpublished subcontracting value tender data found")
    except Exception as e:
        logger.error(f"Error processing unpublished subcontracting value tender data: {str(e)}")

    # Parse and merge BT-195(BT-554)-Tender
    try:
        unpublished_subcontracting_description_tender_data = parse_unpublished_subcontracting_description_tender(xml_content)
        if unpublished_subcontracting_description_tender_data:
            merge_unpublished_subcontracting_description_tender(release_json, unpublished_subcontracting_description_tender_data)
        else:
            logger.info("No unpublished subcontracting description tender data found")
    except Exception as e:
        logger.error(f"Error processing unpublished subcontracting description tender data: {str(e)}")

    # Parse and merge BT-195(BT-555)-Tender
    try:
        unpublished_subcontracting_percentage_tender_data = parse_unpublished_subcontracting_percentage_tender(xml_content)
        if unpublished_subcontracting_percentage_tender_data:
            merge_unpublished_subcontracting_percentage_tender(release_json, unpublished_subcontracting_percentage_tender_data)
        else:
            logger.info("No unpublished subcontracting percentage tender data found")
    except Exception as e:
        logger.error(f"Error processing unpublished subcontracting percentage tender data: {str(e)}")

    # Parse and merge BT-195(BT-635)-LotResult
    try:
        unpublished_buyer_review_request_count = parse_unpublished_buyer_review_request_count_lotresult_bt635(xml_content)
        if unpublished_buyer_review_request_count:
            merge_unpublished_buyer_review_request_count_lotresult_bt635(release_json, unpublished_buyer_review_request_count)
        else:
            logger.info("No Unpublished Buyer Review Request Count found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Buyer Review Request Count: {str(e)}")

    # Parse and merge BT-195(BT-636)-LotResult
    try:
        unpublished_buyer_review_request_irregularity_type = parse_unpublished_buyer_review_request_irregularity_type_lotresult_bt636(xml_content)
        if unpublished_buyer_review_request_irregularity_type:
            merge_unpublished_buyer_review_request_irregularity_type_lotresult_bt636(release_json, unpublished_buyer_review_request_irregularity_type)
        else:
            logger.info("No Unpublished Buyer Review Request Irregularity Type found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Buyer Review Request Irregularity Type: {str(e)}")

    # Parse and merge BT-195(BT-660)-LotResult
    try:
        unpublished_framework_reestimated_value = parse_unpublished_framework_reestimated_value_lotresult_bt660(xml_content)
        if unpublished_framework_reestimated_value:
            merge_unpublished_framework_reestimated_value_lotresult_bt660(release_json, unpublished_framework_reestimated_value)
        else:
            logger.info("No Unpublished Framework Re-estimated Value found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Framework Re-estimated Value: {str(e)}")

    # Parse and merge BT-195(BT-709)-LotResult
    try:
        unpublished_maximum_value = parse_unpublished_maximum_value_lotresult_bt709(xml_content)
        if unpublished_maximum_value:
            merge_unpublished_maximum_value_lotresult_bt709(release_json, unpublished_maximum_value)
        else:
            logger.info("No Unpublished Maximum Value found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Maximum Value: {str(e)}")

    # Parse and merge BT-195(BT-710)-LotResult
    try:
        unpublished_tender_lowest_value = parse_unpublished_tender_lowest_value_lotresult_bt710(xml_content)
        if unpublished_tender_lowest_value:
            merge_unpublished_tender_lowest_value_lotresult_bt710(release_json, unpublished_tender_lowest_value)
        else:
            logger.info("No Unpublished Tender Lowest Value found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Tender Lowest Value: {str(e)}")

    # Parse and merge BT-195(BT-711)-LotResult
    try:
        unpublished_tender_highest_value = parse_unpublished_tender_highest_value_lotresult_bt711(xml_content)
        if unpublished_tender_highest_value:
            merge_unpublished_tender_highest_value_lotresult_bt711(release_json, unpublished_tender_highest_value)
        else:
            logger.info("No Unpublished Tender Highest Value found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Tender Highest Value: {str(e)}")

    # Parse and merge BT-195(BT-712)-LotResult
    try:
        unpublished_buyer_review_complainants = parse_unpublished_buyer_review_complainants_lotresult_bt712(xml_content)
        if unpublished_buyer_review_complainants:
            merge_unpublished_buyer_review_complainants_lotresult_bt712(release_json, unpublished_buyer_review_complainants)
        else:
            logger.info("No Unpublished Buyer Review Complainants found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Buyer Review Complainants: {str(e)}")

    # Parse and merge BT-195(BT-720)-Tender
    try:
        unpublished_winning_tender_value = parse_unpublished_winning_tender_value_tender_bt720(xml_content)
        if unpublished_winning_tender_value:
            merge_unpublished_winning_tender_value_tender_bt720(release_json, unpublished_winning_tender_value)
        else:
            logger.info("No Unpublished Winning Tender Value found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Winning Tender Value: {str(e)}")

    # Parse and merge BT-195(BT-733)-Lot
    try:
        unpublished_award_criteria_order_justification = parse_unpublished_award_criteria_order_justification_lot_bt733(xml_content)
        if unpublished_award_criteria_order_justification:
            merge_unpublished_award_criteria_order_justification_lot_bt733(release_json, unpublished_award_criteria_order_justification)
        else:
            logger.info("No Unpublished Award Criteria Order Justification found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Award Criteria Order Justification: {str(e)}")

    # Parse and merge BT-195(BT-733)-LotsGroup
    try:
        unpublished_award_criteria_order_justification_lotsgroup = parse_unpublished_award_criteria_order_justification_lotsgroup_bt733(xml_content)
        if unpublished_award_criteria_order_justification_lotsgroup:
            merge_unpublished_award_criteria_order_justification_lotsgroup_bt733(release_json, unpublished_award_criteria_order_justification_lotsgroup)
        else:
            logger.info("No Unpublished Award Criteria Order Justification for LotsGroup found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Award Criteria Order Justification for LotsGroup: {str(e)}")

    # Parse and merge BT-195(BT-734)-Lot
    try:
        unpublished_award_criterion_name_lot = parse_unpublished_award_criterion_name_lot_bt734(xml_content)
        if unpublished_award_criterion_name_lot:
            merge_unpublished_award_criterion_name_lot_bt734(release_json, unpublished_award_criterion_name_lot)
        else:
            logger.info("No Unpublished Award Criterion Name for Lot found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Award Criterion Name for Lot: {str(e)}")

    # Parse and merge BT-195(BT-734)-LotsGroup
    try:
        unpublished_award_criterion_name_lotsgroup = parse_unpublished_award_criterion_name_lotsgroup_bt734(xml_content)
        if unpublished_award_criterion_name_lotsgroup:
            merge_unpublished_award_criterion_name_lotsgroup_bt734(release_json, unpublished_award_criterion_name_lotsgroup)
        else:
            logger.info("No Unpublished Award Criterion Name for LotsGroup found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Award Criterion Name for LotsGroup: {str(e)}")

    # Parse and merge BT-195(BT-759)-LotResult
    try:
        unpublished_received_submissions_count = parse_unpublished_received_submissions_count_lotresult_bt759(xml_content)
        if unpublished_received_submissions_count:
            merge_unpublished_received_submissions_count_lotresult_bt759(release_json, unpublished_received_submissions_count)
        else:
            logger.info("No Unpublished Received Submissions Count for LotResult found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Received Submissions Count for LotResult: {str(e)}")

    # Parse and merge BT-195(BT-760)-LotResult
    try:
        unpublished_received_submissions_type = parse_unpublished_received_submissions_type_lotresult_bt760(xml_content)
        if unpublished_received_submissions_type:
            merge_unpublished_received_submissions_type_lotresult_bt760(release_json, unpublished_received_submissions_type)
        else:
            logger.info("No Unpublished Received Submissions Type for LotResult found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Received Submissions Type for LotResult: {str(e)}")

    # Parse and merge BT-195(BT-773)-Tender
    try:
        unpublished_subcontracting = parse_unpublished_subcontracting_tender_bt773(xml_content)
        if unpublished_subcontracting:
            merge_unpublished_subcontracting_tender_bt773(release_json, unpublished_subcontracting)
        else:
            logger.info("No Unpublished Subcontracting for Tender found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Subcontracting for Tender: {str(e)}")

    # Parse and merge BT-195(BT-88)-Procedure
    try:
        unpublished_procedure_features = parse_unpublished_procedure_features_procedure_bt88(xml_content)
        if unpublished_procedure_features:
            merge_unpublished_procedure_features_procedure_bt88(release_json, unpublished_procedure_features)
        else:
            logger.info("No Unpublished Procedure Features found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Procedure Features: {str(e)}")

    # Process BT-196(BT-1252)-Procedure
    try:
        rationale = parse_unpublished_justification_description_procedure_bt1252(xml_content)
        if rationale:
            merge_unpublished_justification_description_procedure_bt1252(release_json, rationale)
        else:
            logger.info("No Unpublished Justification Description for Direct Award Procedure found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Direct Award Procedure: {str(e)}")

    # Process BT-196(BT-135)-Procedure
    try:
        rationale = parse_unpublished_justification_description_procedure_bt135(xml_content)
        if rationale:
            merge_unpublished_justification_description_procedure_bt135(release_json, rationale)
        else:
            logger.info("No Unpublished Justification Description for Direct Award Procedure Text found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Direct Award Procedure Text: {str(e)}")

    # Parse and merge BT-196(BT-105)-Procedure
    try:
        rationale = parse_unpublished_justification_description_procedure_bt105(xml_content)
        if rationale:
            merge_unpublished_justification_description_procedure_bt105(release_json, rationale)
        else:
            logger.info("No Unpublished Justification Description (BT-105) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description (BT-105): {str(e)}")

    # Parse and merge BT-196(BT-106)-Procedure
    try:
        rationale = parse_unpublished_justification_description_procedure_bt106(xml_content)
        if rationale:
            merge_unpublished_justification_description_procedure_bt106(release_json, rationale)
        else:
            logger.info("No Unpublished Justification Description for Accelerated Procedure found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Accelerated Procedure: {str(e)}")
    
    # Process BT-196(BT-1351)-Procedure
    try:
        rationale = parse_unpublished_justification_description_procedure_bt1351(xml_content)
        if rationale:
            merge_unpublished_justification_description_procedure_bt1351(release_json, rationale)
        else:
            logger.info("No Unpublished Justification Description for Accelerated Procedure Justification found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Accelerated Procedure Justification: {str(e)}")

    # Process BT-196(BT-136)-Procedure
    try:
        rationale = parse_unpublished_justification_description_procedure_bt136(xml_content)
        if rationale:
            merge_unpublished_justification_description_procedure_bt136(release_json, rationale)
        else:
            logger.info("No Unpublished Justification Description for Direct Award Justification found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Direct Award Justification: {str(e)}")

    # Process BT-196(BT-142)-LotResult
    try:
        rationale_data = parse_unpublished_justification_description_lotresult_bt142(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_lotresult_bt142(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Winner Choice found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Winner Choice: {str(e)}")

    # Process BT-196(BT-144)-LotResult
    try:
        rationale_data = parse_unpublished_justification_description_lotresult_bt144(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_lotresult_bt144(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for No Award Reason found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for No Award Reason: {str(e)}")

    # Process BT-196(BT-160)-Tender
    try:
        rationale_data = parse_unpublished_justification_description_tender_bt160(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_tender_bt160(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Concession Revenue from Buyers found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Concession Revenue from Buyers: {str(e)}")

    # Process BT-196(BT-162)-Tender
    try:
        rationale_data = parse_unpublished_justification_description_tender_bt162(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_tender_bt162(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Concession Revenue from Users found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Concession Revenue from Users: {str(e)}")

    # Process BT-196(BT-163)-Tender
    try:
        rationale_data = parse_unpublished_justification_description_tender_bt163(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_tender_bt163(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Concession Value Description found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Concession Value Description: {str(e)}")

    # Process BT-196(BT-171)-Tender
    try:
        rationale_data = parse_unpublished_justification_description_tender_bt171(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_tender_bt171(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Tender Ranking found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Tender Ranking: {str(e)}")

    # Process BT-196(BT-191)-Tender
    try:
        rationale_data = parse_unpublished_justification_description_tender_bt191(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_tender_bt191(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Country of Origin found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Country of Origin: {str(e)}")

    # Process BT-196(BT-193)-Tender
    try:
        rationale_data = parse_unpublished_justification_description_tender_bt193(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_tender_bt193(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Winning Tender Variants found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Winning Tender Variants: {str(e)}")

    # Process BT-196(BT-539)-Lot
    try:
        rationale_data = parse_unpublished_justification_description_lot_bt539(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_lot_bt539(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Awarding Criterion Type found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Awarding Criterion Type: {str(e)}")

    # Process BT-196(BT-539)-LotsGroup
    try:
        rationale_data = parse_unpublished_justification_description_lotsgroup_bt539(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_lotsgroup_bt539(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Awarding Criterion Type (LotsGroup) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Awarding Criterion Type (LotsGroup): {str(e)}")

    # Process BT-196(BT-540)-Lot
    try:
        rationale_data = parse_unpublished_justification_description_lot_bt540(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_lot_bt540(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Awarding Criterion Description (Lot) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Awarding Criterion Description (Lot): {str(e)}")

    # Process BT-196(BT-540)-LotsGroup
    try:
        rationale_data = parse_unpublished_justification_description_lotsgroup_bt540(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_lotsgroup_bt540(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Awarding Criterion Description (LotsGroup) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Awarding Criterion Description (LotsGroup): {str(e)}")
        
    # Process BT-196(BT-541)-Lot-Fixed
    try:
        rationale_data = parse_unpublished_justification_description_lot_fixed_bt541(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_lot_fixed_bt541(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Awarding Criterion Fixed Number (Lot) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Awarding Criterion Fixed Number (Lot): {str(e)}")

    # Process BT-196(BT-541)-Lot-Threshold
    try:
        rationale_data = parse_unpublished_justification_description_lot_threshold_bt541(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_lot_threshold_bt541(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Awarding Criterion Threshold Number (Lot) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Awarding Criterion Threshold Number (Lot): {str(e)}")
        
    # Process BT-196(BT-541)-Lot-Weight
    try:
        rationale_data = parse_unpublished_justification_description_lot_weight_bt541(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_lot_weight_bt541(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Awarding Criterion Weight Number (Lot) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Awarding Criterion Weight Number (Lot): {str(e)}")

    # Process BT-196(BT-541)-LotsGroup-Fixed
    try:
        rationale_data = parse_unpublished_justification_description_lotsgroup_fixed_bt541(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_lotsgroup_fixed_bt541(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Awarding Criterion Fixed Number (LotsGroup) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Awarding Criterion Fixed Number (LotsGroup): {str(e)}")
        
    # Process BT-196(BT-541)-LotsGroup-Threshold
    try:
        rationale_data = parse_unpublished_justification_description_lotsgroup_threshold_bt541(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_lotsgroup_threshold_bt541(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Awarding Criterion Threshold Number (LotsGroup) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Awarding Criterion Threshold Number (LotsGroup): {str(e)}")

    # Process BT-196(BT-541)-LotsGroup-Weight
    try:
        rationale_data = parse_unpublished_justification_description_lotsgroup_weight_bt541(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_lotsgroup_weight_bt541(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Awarding Criterion Weight Number (LotsGroup) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Awarding Criterion Weight Number (LotsGroup): {str(e)}")
            
    # Process BT-196(BT-5421)-Lot
    try:
        rationale_data = parse_unpublished_justification_description_lot_bt5421(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_lot_bt5421(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Awarding Criterion Weight (Lot) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Awarding Criterion Weight (Lot): {str(e)}")

    # Process BT-196(BT-5421)-LotsGroup
    try:
        rationale_data = parse_unpublished_justification_description_lotsgroup_bt5421(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_lotsgroup_bt5421(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Awarding Criterion Weight (LotsGroup) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Awarding Criterion Weight (LotsGroup): {str(e)}")

    # Process BT-196(BT-5422)-Lot
    try:
        rationale_data = parse_unpublished_justification_description_lot_bt5422(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_lot_bt5422(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Awarding Criterion Fixed Number (Lot) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Awarding Criterion Fixed Number (Lot): {str(e)}")

    # Process BT-196(BT-5422)-LotsGroup
    try:
        rationale_data = parse_unpublished_justification_description_lotsgroup_bt5422(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_lotsgroup_bt5422(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Awarding Criterion Fixed Number (LotsGroup) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Awarding Criterion Fixed Number (LotsGroup): {str(e)}")

    # Process BT-196(BT-5423)-Lot
    try:
        rationale_data = parse_unpublished_justification_description_lot_bt5423(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_lot_bt5423(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Awarding Criterion Threshold Number (Lot) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Awarding Criterion Threshold Number (Lot): {str(e)}")

    # Process BT-196(BT-5423)-LotsGroup
    try:
        rationale_data = parse_unpublished_justification_description_lotsgroup_bt5423(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_lotsgroup_bt5423(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Awarding Criterion Threshold Number (LotsGroup) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Awarding Criterion Threshold Number (LotsGroup): {str(e)}")  

    # Process BT-196(BT-543)-Lot
    try:
        rationale_data = parse_unpublished_justification_description_lot_bt543(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_lot_bt543(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Awarding Criterion Combination (Lot) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Awarding Criterion Combination (Lot): {str(e)}")

    # Process BT-196(BT-543)-LotsGroup
    try:
        rationale_data = parse_unpublished_justification_description_lotsgroup_bt543(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_lotsgroup_bt543(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Awarding Criterion Combination (LotsGroup) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Awarding Criterion Combination (LotsGroup): {str(e)}")

    # Process BT-196(BT-553)-Tender
    try:
        rationale_data = parse_unpublished_justification_description_tender_bt553(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_tender_bt553(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Subcontracting Value (Tender) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Subcontracting Value (Tender): {str(e)}")

    # Process BT-196(BT-554)-Tender
    try:
        rationale_data = parse_unpublished_justification_description_tender_bt554(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_tender_bt554(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Subcontracting Description (Tender) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Subcontracting Description (Tender): {str(e)}")

    # Process BT-196(BT-555)-Tender
    try:
        rationale_data = parse_unpublished_justification_description_tender_bt555(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_tender_bt555(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Subcontracting Percentage (Tender) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Subcontracting Percentage (Tender): {str(e)}")

    # Process BT-196(BT-635)-LotResult
    try:
        rationale_data = parse_unpublished_justification_description_lotresult_bt635(xml_content)
        if rationale_data:
            merge_unpublished_justification_description_lotresult_bt635(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Buyer Review Count (LotResult) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Buyer Review Count (LotResult): {str(e)}")

    # Process BT-196(BT-636)-LotResult
    try:
        rationale_data = parse_bt_196_lot_result(xml_content)
        if rationale_data:
            merge_bt_196_lot_result(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for LotResult found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for LotResult: {str(e)}")

    # Process BT-196(BT-660)-LotResult
    try:
        rationale_data = parse_bt_196_bt_660_lot_result(xml_content)
        if rationale_data:
            merge_bt_196_bt_660_lot_result(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Framework Agreement Values (LotResult) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Framework Agreement Values (LotResult): {str(e)}")

    # Process BT-196(BT-709)-LotResult
    try:
        rationale_data = parse_bt_196_bt_709_lot_result(xml_content)
        if rationale_data:
            merge_bt_196_bt_709_lot_result(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Framework Agreement Maximum Value (LotResult) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Framework Agreement Maximum Value (LotResult): {str(e)}")

    # Process BT-196(BT-710)-LotResult
    try:
        rationale_data = parse_bt_196_bt_710_lot_result(xml_content)
        if rationale_data:
            merge_bt_196_bt_710_lot_result(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Tender Value Low (LotResult) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Tender Value Low (LotResult): {str(e)}")

    # Process BT-196(BT-711)-LotResult
    try:
        rationale_data = parse_bt_196_bt_711_lot_result(xml_content)
        if rationale_data:
            merge_bt_196_bt_711_lot_result(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Tender Value High (LotResult) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Tender Value High (LotResult): {str(e)}")

    # Process BT-196(BT-712)-LotResult
    try:
        rationale_data = parse_bt_196_bt_712_lot_result(xml_content)
        if rationale_data:
            merge_bt_196_bt_712_lot_result(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Review Requests (LotResult) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Review Requests (LotResult): {str(e)}")

    # Process BT-196(BT-720)-Tender
    try:
        rationale_data = parse_bt_196_bt_720_tender(xml_content)
        if rationale_data:
            merge_bt_196_bt_720_tender(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Winning Tender Value (Tender) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Winning Tender Value (Tender): {str(e)}")

    # Process BT-196(BT-733)-Lot
    try:
        rationale_data = parse_bt_196_bt_733_lot(xml_content)
        if rationale_data:
            merge_bt_196_bt_733_lot(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Award Criteria Order (Lot) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Award Criteria Order (Lot): {str(e)}")

    # Process BT-196(BT-733)-LotsGroup
    try:
        rationale_data = parse_bt_196_bt_733_lots_group(xml_content)
        if rationale_data:
            merge_bt_196_bt_733_lots_group(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Award Criteria Order (LotsGroup) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Award Criteria Order (LotsGroup): {str(e)}")

    # Process BT-196(BT-734)-Lot
    try:
        rationale_data = parse_bt_196_bt_734_lot(xml_content)
        if rationale_data:
            merge_bt_196_bt_734_lot(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Award Criteria Name (Lot) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Award Criteria Name (Lot): {str(e)}")

    # Process BT-196(BT-734)-LotsGroup
    try:
        rationale_data = parse_bt_196_bt_734_lots_group(xml_content)
        if rationale_data:
            merge_bt_196_bt_734_lots_group(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Award Criteria Name (LotsGroup) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Award Criteria Name (LotsGroup): {str(e)}")

    # Process BT-196(BT-759)-LotResult
    try:
        rationale_data = parse_bt_196_bt_759_lot_result(xml_content)
        if rationale_data:
            merge_bt_196_bt_759_lot_result(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Received Submissions Count (LotResult) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Received Submissions Count (LotResult): {str(e)}")
        
    # Process BT-196(BT-760)-LotResult
    try:
        rationale_data = parse_bt_196_bt_760_lot_result(xml_content)
        if rationale_data:
            merge_bt_196_bt_760_lot_result(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Received Submissions Type (LotResult) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Received Submissions Type (LotResult): {str(e)}")
    
    # Process BT-196(BT-773)-Tender
    try:
        rationale_data = parse_bt_196_bt_773_tender(xml_content)
        if rationale_data:
            merge_bt_196_bt_773_tender(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Subcontracting (Tender) found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Subcontracting (Tender): {str(e)}")
        
    # Process BT-196(BT-88)-Procedure
    try:
        rationale_data = parse_bt_196_bt_88_procedure(xml_content)
        if rationale_data:
            merge_bt_196_bt_88_procedure(release_json, rationale_data)
        else:
            logger.info("No Unpublished Justification Description for Procedure Features found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Description for Procedure Features: {str(e)}")
        
    # Parse and merge BT-197(BT-106)-Procedure
    try:
        justification_code = parse_unpublished_justification_code_procedure_bt106(xml_content)
        if justification_code:
            merge_unpublished_justification_code_procedure_bt106(release_json, justification_code)
        else:
            logger.info("No Unpublished Justification Code for Accelerated Procedure found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Code for Accelerated Procedure: {str(e)}")

    # Process BT-197(BT-1252)-Procedure
    try:
        justification_code = parse_unpublished_justification_code_procedure_bt1252(xml_content)
        if justification_code:
            merge_unpublished_justification_code_procedure_bt1252(release_json, justification_code)
        else:
            logger.info("No Unpublished Justification Code for Direct Award Justification found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Code for Direct Award Justification: {str(e)}")

    # Process BT-197(BT-135)-Procedure
    try:
        justification_code = parse_unpublished_justification_code_procedure_bt135(xml_content)
        if justification_code:
            merge_unpublished_justification_code_procedure_bt135(release_json, justification_code)
        else:
            logger.info("No Unpublished Justification Code for Direct Award Justification Text found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Code for Direct Award Justification Text: {str(e)}")

    # Process BT-197(BT-1351)-Procedure
    try:
        justification_code = parse_unpublished_justification_code_procedure_bt1351(xml_content)
        if justification_code:
            merge_unpublished_justification_code_procedure_bt1351(release_json, justification_code)
        else:
            logger.info("No Unpublished Justification Code for Accelerated Procedure Justification found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Code for Accelerated Procedure Justification: {str(e)}")

    # Process BT-197(BT-136)-Procedure
    try:
        justification_code = parse_bt_197_bt_136_procedure(xml_content)
        if justification_code:
            merge_bt_197_bt_136_procedure(release_json, justification_code)
        else:
            logger.info("No Unpublished Justification Code for Direct Award Justification found")
    except Exception as e:
        logger.error(f"Error processing Unpublished Justification Code for Direct Award Justification: {str(e)}")

    # Parse and merge BT-197(BT-142)-LotResult
    try:
        bt_197_bt_142_data = parse_bt_197_bt_142_lot_result(xml_content)
        if bt_197_bt_142_data:
            merge_bt_197_bt_142_lot_result(release_json, bt_197_bt_142_data)
            logger.info("Merged BT-197(BT-142)-LotResult data")
        else:
            logger.info("No BT-197(BT-142)-LotResult data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-142)-LotResult data: {str(e)}")

    # Parse and merge BT-197(BT-144)-LotResult
    try:
        bt_197_bt_144_data = parse_bt_197_bt_144_lot_result(xml_content)
        if bt_197_bt_144_data:
            merge_bt_197_bt_144_lot_result(release_json, bt_197_bt_144_data)
        else:
            logger.info("No BT-197(BT-144)-LotResult data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-144)-LotResult data: {str(e)}")

    # Parse and merge BT-197(BT-160)-Tender
    try:
        bt_197_bt_160_data = parse_bt_197_bt_160_tender(xml_content)
        if bt_197_bt_160_data:
            merge_bt_197_bt_160_tender(release_json, bt_197_bt_160_data)
        else:
            logger.info("No BT-197(BT-160)-Tender data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-160)-Tender data: {str(e)}")

    # Parse and merge BT-197(BT-162)-Tender
    try:
        bt_197_bt_162_data = parse_bt_197_bt_162_tender(xml_content)
        if bt_197_bt_162_data:
            merge_bt_197_bt_162_tender(release_json, bt_197_bt_162_data)
        else:
            logger.info("No BT-197(BT-162)-Tender data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-162)-Tender data: {str(e)}")

    # Parse and merge BT-197(BT-163)-Tender
    try:
        bt_197_bt_163_data = parse_bt_197_bt_163_tender(xml_content)
        if bt_197_bt_163_data:
            merge_bt_197_bt_163_tender(release_json, bt_197_bt_163_data)
        else:
            logger.info("No BT-197(BT-163)-Tender data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-163)-Tender data: {str(e)}")

    # Parse and merge BT-197(BT-171)-Tender
    try:
        bt_197_bt_171_data = parse_bt_197_bt_171_tender(xml_content)
        if bt_197_bt_171_data:
            merge_bt_197_bt_171_tender(release_json, bt_197_bt_171_data)
        else:
            logger.info("No BT-197(BT-171)-Tender data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-171)-Tender data: {str(e)}")

    # Parse and merge BT-197(BT-191)-Tender
    try:
        bt_197_bt_191_data = parse_bt_197_bt_191_tender(xml_content)
        if bt_197_bt_191_data:
            merge_bt_197_bt_191_tender(release_json, bt_197_bt_191_data)
        else:
            logger.info("No BT-197(BT-191)-Tender data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-191)-Tender data: {str(e)}")

    # Parse and merge BT-197(BT-193)-Tender
    try:
        bt_197_bt_193_data = parse_bt_197_bt_193_tender(xml_content)
        if bt_197_bt_193_data:
            merge_bt_197_bt_193_tender(release_json, bt_197_bt_193_data)
        else:
            logger.info("No BT-197(BT-193)-Tender data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-193)-Tender data: {str(e)}")

    # Parse and merge BT-197(BT-539)-Lot
    try:
        bt_197_bt_539_data = parse_bt_197_bt_539_lot(xml_content)
        if bt_197_bt_539_data:
            merge_bt_197_bt_539_lot(release_json, bt_197_bt_539_data)
        else:
            logger.info("No BT-197(BT-539)-Lot data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-539)-Lot data: {str(e)}")

    # Parse and merge BT-197(BT-539)-LotsGroup
    try:
        bt_197_bt_539_lotsgroup_data = parse_bt_197_bt_539_lotsgroup(xml_content)
        if bt_197_bt_539_lotsgroup_data:
            merge_bt_197_bt_539_lotsgroup(release_json, bt_197_bt_539_lotsgroup_data)
        else:
            logger.info("No BT-197(BT-539)-LotsGroup data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-539)-LotsGroup data: {str(e)}")

    # Parse and merge BT-197(BT-540)-Lot
    try:
        bt_197_bt_540_data = parse_bt_197_bt_540_lot(xml_content)
        if bt_197_bt_540_data:
            merge_bt_197_bt_540_lot(release_json, bt_197_bt_540_data)
        else:
            logger.info("No BT-197(BT-540)-Lot data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-540)-Lot data: {str(e)}")

    # Parse and merge BT-197(BT-540)-LotsGroup
    try:
        bt_197_bt_540_data = parse_bt_197_bt_540_lots_group(xml_content)
        if bt_197_bt_540_data:
            merge_bt_197_bt_540_lots_group(release_json, bt_197_bt_540_data)
        else:
            logger.info("No BT-197(BT-540)-LotsGroup data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-540)-LotsGroup data: {str(e)}")

    # Parse and merge BT-197(BT-541)-Lot-Fixed
    try:
        bt_197_bt_541_data = parse_bt_197_bt_541_lot_fixed(xml_content)
        if bt_197_bt_541_data:
            merge_bt_197_bt_541_lot_fixed(release_json, bt_197_bt_541_data)
        else:
            logger.info("No BT-197(BT-541)-Lot-Fixed data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-541)-Lot-Fixed data: {str(e)}")

    # Parse and merge BT 197 BT 541 Lot Threshold
    try:
        bt_197_bt_541_data = parse_bt_197_bt_541_lot_threshold(xml_content)
        if bt_197_bt_541_data:
            merge_bt_197_bt_541_lot_threshold(release_json, bt_197_bt_541_data)
        else:
            logger.info("No BT-197(BT-541)-Lot-Threshold data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-541)-Lot-Threshold data: {str(e)}")

    # Parse and merge bt 197 bt 541 lot weight
    try:
        bt_197_bt_541_data = parse_bt_197_bt_541_lot_weight(xml_content)
        if bt_197_bt_541_data:
            merge_bt_197_bt_541_lot_weight(release_json, bt_197_bt_541_data)
        else:
            logger.info("No BT-197(BT-541)-Lot-Weight data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-541)-Lot-Weight data: {str(e)}")

    # Parse and merge BT-197(BT-541)-LotsGroup-Fixed
    try:
        bt_197_bt_541_data = parse_bt_197_bt_541_lotsgroup_fixed(xml_content)
        if bt_197_bt_541_data:
            merge_bt_197_bt_541_lotsgroup_fixed(release_json, bt_197_bt_541_data)
        else:
            logger.info("No BT-197(BT-541)-LotsGroup-Fixed data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-541)-LotsGroup-Fixed data: {str(e)}")

    # Parse and merge BT-197(BT-541)-LotsGroup-Threshold
    try:
        bt_197_bt_541_data = parse_bt_197_bt_541_lotsgroup_threshold(xml_content)
        if bt_197_bt_541_data:
            merge_bt_197_bt_541_lotsgroup_threshold(release_json, bt_197_bt_541_data)
        else:
            logger.info("No BT-197(BT-541)-LotsGroup-Threshold data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-541)-LotsGroup-Threshold data: {str(e)}")

    # Parse and merge BT-197(BT-541)-LotsGroup-Weight
    try:
        bt_197_bt_541_data = parse_bt_197_bt_541_lotsgroup_weight(xml_content)
        if bt_197_bt_541_data:
            merge_bt_197_bt_541_lotsgroup_weight(release_json, bt_197_bt_541_data)
        else:
            logger.info("No BT-197(BT-541)-LotsGroup-Weight data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-541)-LotsGroup-Weight data: {str(e)}")

    # Parse and merge BT-197(BT-5421)-Lot
    try:
        bt_197_bt_5421_data = parse_bt_197_bt_5421_lot(xml_content)
        if bt_197_bt_5421_data:
            merge_bt_197_bt_5421_lot(release_json, bt_197_bt_5421_data)
        else:
            logger.info("No BT-197(BT-5421)-Lot data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-5421)-Lot data: {str(e)}")

    # Parse and merge BT-197(BT-5421)-LotsGroup
    try:
        bt_197_bt_5421_data = parse_bt_197_bt_5421_lotsgroup(xml_content)
        if bt_197_bt_5421_data:
            merge_bt_197_bt_5421_lotsgroup(release_json, bt_197_bt_5421_data)
        else:
            logger.info("No BT-197(BT-5421)-LotsGroup data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-5421)-LotsGroup data: {str(e)}")

    # Parse and merge BT-197(BT-5422)-Lot
    try:
        bt_197_bt_5422_data = parse_bt_197_bt_5422_lot(xml_content)
        if bt_197_bt_5422_data:
            merge_bt_197_bt_5422_lot(release_json, bt_197_bt_5422_data)
        else:
            logger.info("No BT-197(BT-5422)-Lot data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-5422)-Lot data: {str(e)}")

    # Parse and merge BT-197(BT-5422)-LotsGroup
    try:
        bt_197_bt_5422_data = parse_bt_197_bt_5422_lotsgroup(xml_content)
        if bt_197_bt_5422_data:
            merge_bt_197_bt_5422_lotsgroup(release_json, bt_197_bt_5422_data)
        else:
            logger.info("No BT-197(BT-5422)-LotsGroup data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-5422)-LotsGroup data: {str(e)}")

    # Parse and merge BT-197(BT-5423)-Lot
    try:
        bt_197_bt_5423_data = parse_bt_197_bt_5423_lot(xml_content)
        if bt_197_bt_5423_data:
            merge_bt_197_bt_5423_lot(release_json, bt_197_bt_5423_data)
        else:
            logger.info("No BT-197(BT-5423)-Lot data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-5423)-Lot data: {str(e)}")

    # Parse and merge BT-197(BT-5423)-LotsGroup
    try:
        bt_197_bt_5423_data = parse_bt_197_bt_5423_lotsgroup(xml_content)
        if bt_197_bt_5423_data:
            merge_bt_197_bt_5423_lotsgroup(release_json, bt_197_bt_5423_data)
        else:
            logger.info("No BT-197(BT-5423)-LotsGroup data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-5423)-LotsGroup data: {str(e)}")

    # Parse and merge BT-197(BT-543)-Lot
    try:
        bt_197_bt_543_data = parse_bt_197_bt_543_lot(xml_content)
        if bt_197_bt_543_data:
            merge_bt_197_bt_543_lot(release_json, bt_197_bt_543_data)
        else:
            logger.info("No BT-197(BT-543)-Lot data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-543)-Lot data: {str(e)}")

    # Parse and merge BT-197(BT-543)-LotsGroup
    try:
        bt_197_bt_543_data = parse_bt_197_bt_543_lotsgroup(xml_content)
        if bt_197_bt_543_data:
            merge_bt_197_bt_543_lotsgroup(release_json, bt_197_bt_543_data)
        else:
            logger.info("No BT-197(BT-543)-LotsGroup data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-543)-LotsGroup data: {str(e)}")

    # Parse and merge BT-197(BT-553)-Tender
    try:
        bt_197_bt_553_data = parse_bt_197_bt_553_tender(xml_content)
        if bt_197_bt_553_data:
            merge_bt_197_bt_553_tender(release_json, bt_197_bt_553_data)
        else:
            logger.info("No BT-197(BT-553)-Tender data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-553)-Tender data: {str(e)}")

    # Parse and merge BT-197(BT-554)-Tender
    try:
        bt_197_bt_554_data = parse_bt_197_bt_554_tender(xml_content)
        if bt_197_bt_554_data:
            merge_bt_197_bt_554_tender(release_json, bt_197_bt_554_data)
        else:
            logger.info("No BT-197(BT-554)-Tender data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-554)-Tender data: {str(e)}")

    # Parse and merge BT-197(BT-555)-Tender
    try:
        bt_197_bt_555_data = parse_bt_197_bt_555_tender(xml_content)
        if bt_197_bt_555_data:
            merge_bt_197_bt_555_tender(release_json, bt_197_bt_555_data)
        else:
            logger.info("No BT-197(BT-555)-Tender data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-555)-Tender data: {str(e)}")

    # Parse and merge BT-197(BT-635)-LotResult
    try:
        bt_197_bt_635_data = parse_bt_197_bt_635_lotresult(xml_content)
        if bt_197_bt_635_data:
            merge_bt_197_bt_635_lotresult(release_json, bt_197_bt_635_data)
        else:
            logger.info("No BT-197(BT-635)-LotResult data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-635)-LotResult data: {str(e)}")

    # Parse and merge BT-197(BT-636)-LotResult
    try:
        bt_197_bt_636_data = parse_bt_197_bt_636_lotresult(xml_content)
        if bt_197_bt_636_data:
            merge_bt_197_bt_636_lotresult(release_json, bt_197_bt_636_data)
        else:
            logger.info("No BT-197(BT-636)-LotResult data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-636)-LotResult data: {str(e)}")

    # Parse and merge BT-197(BT-660)-LotResult
    try:
        bt_197_bt_660_data = parse_bt_197_bt_660_lotresult(xml_content)
        if bt_197_bt_660_data:
            merge_bt_197_bt_660_lotresult(release_json, bt_197_bt_660_data)
        else:
            logger.info("No BT-197(BT-660)-LotResult data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-660)-LotResult data: {str(e)}")

    # Parse and merge BT-197(BT-709)-LotResult
    try:
        bt_197_bt_709_data = parse_bt_197_bt_709_lotresult(xml_content)
        if bt_197_bt_709_data:
            merge_bt_197_bt_709_lotresult(release_json, bt_197_bt_709_data)
        else:
            logger.info("No BT-197(BT-709)-LotResult data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-709)-LotResult data: {str(e)}")

    # Parse and merge BT-197(BT-710)-LotResult
    try:
        bt_197_bt_710_data = parse_bt_197_bt_710_lotresult(xml_content)
        if bt_197_bt_710_data:
            merge_bt_197_bt_710_lotresult(release_json, bt_197_bt_710_data)
        else:
            logger.info("No BT-197(BT-710)-LotResult data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-710)-LotResult data: {str(e)}")

    # Parse and merge BT-197(BT-711)-LotResult
    try:
        bt_197_bt_711_data = parse_bt_197_bt_711_lotresult(xml_content)
        if bt_197_bt_711_data:
            merge_bt_197_bt_711_lotresult(release_json, bt_197_bt_711_data)
        else:
            logger.info("No BT-197(BT-711)-LotResult data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-711)-LotResult data: {str(e)}")

    # Parse and merge BT-197(BT-712)-LotResult
    try:
        bt_197_bt_712_data = parse_bt_197_bt_712_lotresult(xml_content)
        if bt_197_bt_712_data:
            merge_bt_197_bt_712_lotresult(release_json, bt_197_bt_712_data)
        else:
            logger.info("No BT-197(BT-712)-LotResult data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-712)-LotResult data: {str(e)}")

    # Parse and merge BT-197(BT-720)-Tender
    try:
        bt_197_bt_720_data = parse_bt_197_bt_720_tender(xml_content)
        if bt_197_bt_720_data:
            merge_bt_197_bt_720_tender(release_json, bt_197_bt_720_data)
        else:
            logger.info("No BT-197(BT-720)-Tender data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-720)-Tender data: {str(e)}")

    # Parse and merge BT-197(BT-733)-Lot
    try:
        bt_197_bt_733_data = parse_bt_197_bt_733_lot(xml_content)
        if bt_197_bt_733_data:
            merge_bt_197_bt_733_lot(release_json, bt_197_bt_733_data)
        else:
            logger.info("No BT-197(BT-733)-Lot data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-733)-Lot data: {str(e)}")

    # Parse and merge BT-197(BT-733)-LotsGroup
    try:
        bt_197_bt_733_lotsgroup_data = parse_bt_197_bt_733_lotsgroup(xml_content)
        if bt_197_bt_733_lotsgroup_data:
            merge_bt_197_bt_733_lotsgroup(release_json, bt_197_bt_733_lotsgroup_data)
        else:
            logger.info("No BT-197(BT-733)-LotsGroup data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-733)-LotsGroup data: {str(e)}")

    # Parse and merge BT-197(BT-734)-Lot
    try:
        bt_197_bt_734_lot_data = parse_bt_197_bt_734_lot(xml_content)
        if bt_197_bt_734_lot_data:
            merge_bt_197_bt_734_lot(release_json, bt_197_bt_734_lot_data)
        else:
            logger.info("No BT-197(BT-734)-Lot data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-734)-Lot data: {str(e)}")

    # Parse and merge BT-197(BT-734)-LotsGroup
    try:
        bt_197_bt_734_lotsgroup_data = parse_bt_197_bt_734_lotsgroup(xml_content)
        if bt_197_bt_734_lotsgroup_data:
            merge_bt_197_bt_734_lotsgroup(release_json, bt_197_bt_734_lotsgroup_data)
        else:
            logger.info("No BT-197(BT-734)-LotsGroup data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-734)-LotsGroup data: {str(e)}")

    # Parse and merge BT-197(BT-759)-LotResult
    try:
        bt_197_bt_759_lotresult_data = parse_bt_197_bt_759_lotresult(xml_content)
        if bt_197_bt_759_lotresult_data:
            merge_bt_197_bt_759_lotresult(release_json, bt_197_bt_759_lotresult_data)
        else:
            logger.info("No BT-197(BT-759)-LotResult data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-759)-LotResult data: {str(e)}")

    # Parse and merge BT-197(BT-760)-LotResult
    try:
        bt_197_bt_760_lotresult_data = parse_bt_197_bt_760_lotresult(xml_content)
        if bt_197_bt_760_lotresult_data:
            merge_bt_197_bt_760_lotresult(release_json, bt_197_bt_760_lotresult_data)
        else:
            logger.info("No BT-197(BT-760)-LotResult data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-760)-LotResult data: {str(e)}")

    # Parse and merge BT-197(BT-773)-Tender
    try:
        bt_197_bt_773_tender_data = parse_bt_197_bt_773_tender(xml_content)
        if bt_197_bt_773_tender_data:
            merge_bt_197_bt_773_tender(release_json, bt_197_bt_773_tender_data)
        else:
            logger.info("No BT-197(BT-773)-Tender data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-773)-Tender data: {str(e)}")

    # Parse and merge BT-197(BT-88)-Procedure
    try:
        bt_197_bt_88_procedure_data = parse_bt_197_bt_88_procedure(xml_content)
        if bt_197_bt_88_procedure_data:
            merge_bt_197_bt_88_procedure(release_json, bt_197_bt_88_procedure_data)
        else:
            logger.info("No BT-197(BT-88)-Procedure data found")
    except Exception as e:
        logger.error(f"Error processing BT-197(BT-88)-Procedure data: {str(e)}")

    # Parse and merge BT-200-Contract
    try:
        contract_modification_data = parse_contract_modification_reason(xml_content)
        if contract_modification_data:
            merge_contract_modification_reason(release_json, contract_modification_data)
        else:
            logger.info("No Contract Modification Reason data found")
    except Exception as e:
        logger.error(f"Error processing Contract Modification Reason data: {str(e)}")

    # Parse and merge BT-201-Contract
    try:
        contract_modification_description_data = parse_contract_modification_description(xml_content)
        if contract_modification_description_data:
            merge_contract_modification_description(release_json, contract_modification_description_data)
        else:
            logger.info("No Contract Modification Description data found")
    except Exception as e:
        logger.error(f"Error processing Contract Modification Description data: {str(e)}")

    # Parse and merge BT-202-Contract
    try:
        contract_modification_summary_data = parse_contract_modification_summary(xml_content)
        if contract_modification_summary_data:
            merge_contract_modification_summary(release_json, contract_modification_summary_data)
        else:
            logger.info("No Contract Modification Summary data found")
    except Exception as e:
        logger.error(f"Error processing Contract Modification Summary data: {str(e)}")

    # Parse and merge BT-21-Lot
    try:
        lot_title_data = parse_lot_title(xml_content)
        if lot_title_data:
            merge_lot_title(release_json, lot_title_data)
        else:
            logger.info("No Lot Title data found")
    except Exception as e:
        logger.error(f"Error processing Lot Title data: {str(e)}")

    # Parse and merge BT-21-LotsGroup
    try:
        lots_group_title_data = parse_lots_group_title(xml_content)
        if lots_group_title_data:
            merge_lots_group_title(release_json, lots_group_title_data)
        else:
            logger.info("No Lots Group Title data found")
    except Exception as e:
        logger.error(f"Error processing Lots Group Title data: {str(e)}")

    # Parse and merge BT-21-Part
    try:
        part_title_data = parse_part_title(xml_content)
        if part_title_data:
            merge_part_title(release_json, part_title_data)
        else:
            logger.info("No Part Title data found")
    except Exception as e:
        logger.error(f"Error processing Part Title data: {str(e)}")

    # Parse and merge BT-21-Procedure
    try:
        procedure_title_data = parse_procedure_title(xml_content)
        if procedure_title_data:
            merge_procedure_title(release_json, procedure_title_data)
        else:
            logger.info("No Procedure Title data found")
    except Exception as e:
        logger.error(f"Error processing Procedure Title data: {str(e)}")

    # Parse and merge BT-22-Lot
    try:
        lot_internal_identifier_data = parse_lot_internal_identifier(xml_content)
        if lot_internal_identifier_data:
            merge_lot_internal_identifier(release_json, lot_internal_identifier_data)
        else:
            logger.info("No Lot Internal Identifier data found")
    except Exception as e:
        logger.error(f"Error processing Lot Internal Identifier data: {str(e)}")

    # Parse and merge BT-23-Lot
    try:
        main_nature_data = parse_main_nature(xml_content)
        if main_nature_data:
            merge_main_nature(release_json, main_nature_data)
        else:
            logger.info("No Main Nature data found")
    except Exception as e:
        logger.error(f"Error processing Main Nature data: {str(e)}")

    # Parse and merge BT-23-Part
    try:
        main_nature_part_data = parse_main_nature_part(xml_content)
        if main_nature_part_data:
            merge_main_nature_part(release_json, main_nature_part_data)
        else:
            logger.info("No Main Nature (Part) data found")
    except Exception as e:
        logger.error(f"Error processing Main Nature (Part) data: {str(e)}")

    # Parse and merge BT-23-Procedure
    try:
        main_nature_procedure_data = parse_main_nature_procedure(xml_content)
        if main_nature_procedure_data:
            merge_main_nature_procedure(release_json, main_nature_procedure_data)
        else:
            logger.info("No Main Nature (Procedure) data found")
    except Exception as e:
        logger.error(f"Error processing Main Nature (Procedure) data: {str(e)}")

    # Parse and merge BT-24-Lot
    try:
        lot_description_data = parse_lot_description(xml_content)
        if lot_description_data:
            merge_lot_description(release_json, lot_description_data)
        else:
            logger.info("No Lot Description data found")
    except Exception as e:
        logger.error(f"Error processing Lot Description data: {str(e)}")

    # Parse and merge BT-24-LotsGroup
    try:
        lots_group_description_data = parse_lots_group_description(xml_content)
        if lots_group_description_data:
            merge_lots_group_description(release_json, lots_group_description_data)
        else:
            logger.info("No LotsGroup Description data found")
    except Exception as e:
        logger.error(f"Error processing LotsGroup Description data: {str(e)}")

    # Parse and merge BT-24-Part
    try:
        part_description_data = parse_part_description(xml_content)
        if part_description_data:
            merge_part_description(release_json, part_description_data)
        else:
            logger.info("No Part Description data found")
    except Exception as e:
        logger.error(f"Error processing Part Description data: {str(e)}")

    # Parse and merge BT-24-Procedure
    try:
        procedure_description_data = parse_procedure_description(xml_content)
        if procedure_description_data:
            merge_procedure_description(release_json, procedure_description_data)
        else:
            logger.info("No Procedure Description data found")
    except Exception as e:
        logger.error(f"Error processing Procedure Description data: {str(e)}")

    # Parse and merge BT-25-Lot
    try:
        lot_quantity_data = parse_lot_quantity(xml_content)
        if lot_quantity_data:
            merge_lot_quantity(release_json, lot_quantity_data)
        else:
            logger.info("No Lot Quantity data found")
    except Exception as e:
        logger.error(f"Error processing Lot Quantity data: {str(e)}")

    # Parse the classifications (BT-26 lot)
    try:
        classification_type_data = parse_classification_type(xml_content)
        if classification_type_data["tender"]["items"]:
            merge_classification_type(release_json, classification_type_data)
            logger.info("Merged Classification Type data")
        else:
            logger.info("No Classification Type data found")
    except Exception as e:
        logger.error(f"Error processing Classification Type data: {str(e)}")

    # Parse and merge Classification Type for BT-26 Part
    try:
        classification_type_data = parse_classification_type_part(xml_content)
        if classification_type_data["tender"]["items"]:
            merge_classification_type_part(release_json, classification_type_data)
            logger.info("Merged Classification Type data for Part")
        else:
            logger.info("No Classification Type data found for Part")
    except Exception as e:
        logger.error(f"Error processing Classification Type data for Part: {str(e)}")

    # Parse and merge Classification Type for BT-26 Procedure
    try:
        classification_type_data = parse_classification_type_procedure(xml_content)
        if classification_type_data["tender"]["items"]:
            merge_classification_type_procedure(release_json, classification_type_data)
            logger.info("Merged Classification Type data for Procedure")
        else:
            logger.info("No Classification Type data found for Procedure")
    except Exception as e:
        logger.error(f"Error processing Classification Type data for Procedure: {str(e)}")

    # Parse and merge Main Classification Type for BT_26m_lot Lot
    try:
        main_classification_type_data = parse_main_classification_type_lot(xml_content)
        if main_classification_type_data["tender"]["items"]:
            merge_main_classification_type_lot(release_json, main_classification_type_data)
            logger.info("Merged Main Classification Type data for Lot")
        else:
            logger.info("No Main Classification Type data found for Lot")
    except Exception as e:
        logger.error(f"Error processing Main Classification Type data for Lot: {str(e)}")

    # Parse and merge Main Classification Type for BT_26m_part
    try:
        main_classification_type_data = parse_main_classification_type_part(xml_content)
        if main_classification_type_data["tender"]["items"]:
            merge_main_classification_type_part(release_json, main_classification_type_data)
            logger.info("Merged Main Classification Type data for Part")
        else:
            logger.info("No Main Classification Type data found for Part")
    except Exception as e:
        logger.error(f"Error processing Main Classification Type data for Part: {str(e)}")

    # Parse and merge Main Classification Type for BT_26m_procedure
    try:
        main_classification_type_data = parse_main_classification_type_procedure(xml_content)
        if main_classification_type_data["tender"]["items"]:
            merge_main_classification_type_procedure(release_json, main_classification_type_data)
            logger.info("Merged Main Classification Type data for Procedure")
        else:
            logger.info("No Main Classification Type data found for Procedure")
    except Exception as e:
        logger.error(f"Error processing Main Classification Type data for Procedure: {str(e)}")

    # Parse and merge Main Classification Code for Lot BT_262_lot
    try:
        main_classification_code_data = parse_main_classification_code_lot(xml_content)
        if main_classification_code_data["tender"]["items"]:
            merge_main_classification_code_lot(release_json, main_classification_code_data)
            logger.info("Merged Main Classification Code data for Lot")
        else:
            logger.info("No Main Classification Code data found for Lot")
    except Exception as e:
        logger.error(f"Error processing Main Classification Code data for Lot: {str(e)}")

    # Parse and merge Main Classification Code for Part BT_262_part
    try:
        main_classification_code_data = parse_main_classification_code_part(xml_content)
        if main_classification_code_data["tender"]["items"]:
            merge_main_classification_code_part(release_json, main_classification_code_data)
            logger.info("Merged Main Classification Code data for Part")
        else:
            logger.info("No Main Classification Code data found for Part")
    except Exception as e:
        logger.error(f"Error processing Main Classification Code data for Part: {str(e)}")

    # Parse and merge Main Classification Code for Procedure BT_262_procedure
    try:
        main_classification_code_data = parse_main_classification_code_procedure(xml_content)
        if main_classification_code_data["tender"]["items"]:
            merge_main_classification_code_procedure(release_json, main_classification_code_data)
            logger.info("Merged Main Classification Code data for Procedure")
        else:
            logger.info("No Main Classification Code data found for Procedure")
    except Exception as e:
        logger.error(f"Error processing Main Classification Code data for Procedure: {str(e)}")

    # Parse and merge Additional Classification Code for Lot BT_263_lot
    try:
        additional_classification_code_data = parse_additional_classification_code_lot(xml_content)
        if additional_classification_code_data["tender"]["items"]:
            merge_additional_classification_code_lot(release_json, additional_classification_code_data)
            logger.info("Merged Additional Classification Code data for Lot")
        else:
            logger.info("No Additional Classification Code data found for Lot")
    except Exception as e:
        logger.error(f"Error processing Additional Classification Code data for Lot: {str(e)}")

    # Parse and merge Additional Classification Code for Part BT_263_part
    try:
        additional_classification_code_part_data = parse_additional_classification_code_part(xml_content)
        if additional_classification_code_part_data["tender"]["items"]:
            merge_additional_classification_code_part(release_json, additional_classification_code_part_data)
            logger.info("Merged Additional Classification Code data for Part")
        else:
            logger.info("No Additional Classification Code data found for Part")
    except Exception as e:
        logger.error(f"Error processing Additional Classification Code data for Part: {str(e)}")

    # Parse and merge Additional Classification Code for Procedure BT_263_procedure
    try:
        additional_classification_code_procedure_data = parse_additional_classification_code_procedure(xml_content)
        if additional_classification_code_procedure_data["tender"]["items"]:
            merge_additional_classification_code_procedure(release_json, additional_classification_code_procedure_data)
            logger.info("Merged Additional Classification Code data for Procedure")
        else:
            logger.info("No Additional Classification Code data found for Procedure")
    except Exception as e:
        logger.error(f"Error processing Additional Classification Code data for Procedure: {str(e)}")

    # Parse and merge BT-27-Lot Estimated Value
    try:
        bt_27_lot_data = parse_bt_27_lot(xml_content)
        if bt_27_lot_data["tender"]["lots"]:
            merge_bt_27_lot(release_json, bt_27_lot_data)
            logger.info("Merged BT-27-Lot Estimated Value data")
        else:
            logger.info("No BT-27-Lot Estimated Value data found")
    except Exception as e:
        logger.error(f"Error processing BT-27-Lot Estimated Value data: {str(e)}")

    # Parse and merge BT-27-LotsGroup Estimated Value
    try:
        bt_27_lots_group_data = parse_bt_27_lots_group(xml_content)
        if bt_27_lots_group_data["tender"]["lotGroups"]:
            merge_bt_27_lots_group(release_json, bt_27_lots_group_data)
            logger.info("Merged BT-27-LotsGroup Estimated Value data")
        else:
            logger.info("No BT-27-LotsGroup Estimated Value data found")
    except Exception as e:
        logger.error(f"Error processing BT-27-LotsGroup Estimated Value data: {str(e)}")

    # Parse and merge BT-27-Part Estimated Value
    try:
        bt_27_part_data = parse_bt_27_part(xml_content)
        if bt_27_part_data["tender"].get("value"):
            merge_bt_27_part(release_json, bt_27_part_data)
            logger.info("Merged BT-27-Part Estimated Value data")
        else:
            logger.info("No BT-27-Part Estimated Value data found")
    except Exception as e:
        logger.error(f"Error processing BT-27-Part Estimated Value data: {str(e)}")

    # Parse and merge BT-27-Procedure Estimated Value
    try:
        bt_27_procedure_data = parse_bt_27_procedure(xml_content)
        if bt_27_procedure_data["tender"].get("value"):
            merge_bt_27_procedure(release_json, bt_27_procedure_data)
            logger.info("Merged BT-27-Procedure Estimated Value data")
        else:
            logger.info("No BT-27-Procedure Estimated Value data found")
    except Exception as e:
        logger.error(f"Error processing BT-27-Procedure Estimated Value data: {str(e)}")

    # Parse and merge BT-271-Lot Framework Maximum Value
    try:
        bt_271_lot_data = parse_bt_271_lot(xml_content)
        if bt_271_lot_data["tender"]["lots"]:
            merge_bt_271_lot(release_json, bt_271_lot_data)
            logger.info("Merged BT-271-Lot Framework Maximum Value data")
        else:
            logger.info("No BT-271-Lot Framework Maximum Value data found")
    except Exception as e:
        logger.error(f"Error processing BT-271-Lot Framework Maximum Value data: {str(e)}")

    # Parse and merge BT-271-LotsGroup Framework Maximum Value
    try:
        bt_271_lots_group_data = parse_bt_271_lots_group(xml_content)
        if bt_271_lots_group_data["tender"]["lotGroups"]:
            merge_bt_271_lots_group(release_json, bt_271_lots_group_data)
            logger.info("Merged BT-271-LotsGroup Framework Maximum Value data")
        else:
            logger.info("No BT-271-LotsGroup Framework Maximum Value data found")
    except Exception as e:
        logger.error(f"Error processing BT-271-LotsGroup Framework Maximum Value data: {str(e)}")

    # Parse and merge BT-271-Procedure Framework Maximum Value
    try:
        bt_271_procedure_data = parse_bt_271_procedure(xml_content)
        if bt_271_procedure_data["tender"].get("techniques"):
            merge_bt_271_procedure(release_json, bt_271_procedure_data)
            logger.info("Merged BT-271-Procedure Framework Maximum Value data")
        else:
            logger.info("No BT-271-Procedure Framework Maximum Value data found")
    except Exception as e:
        logger.error(f"Error processing BT-271-Procedure Framework Maximum Value data: {str(e)}")

    # Parse and merge BT-300-Lot
    try:
        lot_additional_info = parse_lot_additional_info(xml_content)
        if lot_additional_info:
            merge_lot_additional_info(release_json, lot_additional_info)
        else:
            logger.info("No lot additional information found")
    except Exception as e:
        logger.error(f"Error processing lot additional information: {str(e)}")

    # Parse and merge BT-300-LotsGroup
    try:
        lotsgroup_additional_info = parse_lotsgroup_additional_info(xml_content)
        if lotsgroup_additional_info:
            merge_lotsgroup_additional_info(release_json, lotsgroup_additional_info)
        else:
            logger.info("No lots group additional information found")
    except Exception as e:
        logger.error(f"Error processing lots group additional information: {str(e)}")

    # Parse and merge BT-300-Part
    try:
        part_additional_info = parse_part_additional_info(xml_content)
        if part_additional_info:
            merge_part_additional_info(release_json, part_additional_info)
        else:
            logger.info("No part additional information found")
    except Exception as e:
        logger.error(f"Error processing part additional information: {str(e)}")

    # Parse and merge BT-300-Procedure
    try:
        procedure_additional_info = parse_procedure_additional_info(xml_content)
        if procedure_additional_info:
            merge_procedure_additional_info(release_json, procedure_additional_info)
        else:
            logger.info("No procedure additional information found")
    except Exception as e:
        logger.error(f"Error processing procedure additional information: {str(e)}")

    # Parse and merge BT-31-Procedure
    try:
        max_lots_data = parse_max_lots_allowed(xml_content)
        if max_lots_data:
            merge_max_lots_allowed(release_json, max_lots_data)
        else:
            logger.info("No Maximum Lots Allowed data found")
    except Exception as e:
        logger.error(f"Error processing Maximum Lots Allowed data: {str(e)}")

    # Parse and merge BT-3201-Tender
    try:
        tender_identifier_data = parse_tender_identifier(xml_content)
        if tender_identifier_data:
            merge_tender_identifier(release_json, tender_identifier_data)
        else:
            logger.info("No Tender Identifier data found")
    except Exception as e:
        logger.error(f"Error processing Tender Identifier data: {str(e)}")

    # Parse and merge BT-3202-Contract
    try:
        contract_tender_id_data = parse_contract_tender_id(xml_content)
        if contract_tender_id_data:
            merge_contract_tender_id(release_json, contract_tender_id_data)
        else:
            logger.info("No Contract Tender ID data found")
    except Exception as e:
        logger.error(f"Error processing Contract Tender ID data: {str(e)}")

    # Parse and merge BT-33 Maximum Lots Awarded
    try:
        max_lots_awarded_data = parse_max_lots_awarded(xml_content)
        if max_lots_awarded_data:
            merge_max_lots_awarded(release_json, max_lots_awarded_data)
        else:
            logger.info("No Maximum Lots Awarded data found")
    except Exception as e:
        logger.error(f"Error processing Maximum Lots Awarded data: {str(e)}")

    # Parse and merge BT-330 Group Identifier
    try:
        group_identifier_data = parse_group_identifier(xml_content)
        if group_identifier_data:
            merge_group_identifier(release_json, group_identifier_data)
        else:
            logger.info("No Group Identifier data found")
    except Exception as e:
        logger.error(f"Error processing Group Identifier data: {str(e)}")

    # Parse and merge BT-36-Lot
    try:
        lot_duration_data = parse_lot_duration(xml_content)
        if lot_duration_data:
            merge_lot_duration(release_json, lot_duration_data)
        else:
            logger.info("No lot duration data found")
    except Exception as e:
        logger.error(f"Error processing lot duration data: {str(e)}")

    # Parse and merge BT-36-Part
    try:
        part_duration_data = parse_part_duration(xml_content)
        if part_duration_data:
            merge_part_duration(release_json, part_duration_data)
        else:
            logger.info("No part duration data found")
    except Exception as e:
        logger.error(f"Error processing part duration data: {str(e)}")

    # Parse and merge BT-40-Lot
    try:
        lot_selection_criteria_data = parse_lot_selection_criteria_second_stage(xml_content)
        if lot_selection_criteria_data:
            merge_lot_selection_criteria_second_stage(release_json, lot_selection_criteria_data)
        else:
            logger.info("No lot selection criteria second stage data found")
    except Exception as e:
        logger.error(f"Error processing lot selection criteria second stage data: {str(e)}")

    # Parse and merge BT-41-Lot
    try:
        lot_following_contract_data = parse_lot_following_contract(xml_content)
        if lot_following_contract_data:
            merge_lot_following_contract(release_json, lot_following_contract_data)
        else:
            logger.info("No lot following contract data found")
    except Exception as e:
        logger.error(f"Error processing lot following contract data: {str(e)}")

    # Parse and merge BT-42-Lot
    try:
        lot_jury_decision_binding_data = parse_lot_jury_decision_binding(xml_content)
        if lot_jury_decision_binding_data:
            merge_lot_jury_decision_binding(release_json, lot_jury_decision_binding_data)
        else:
            logger.info("No lot jury decision binding data found")
    except Exception as e:
        logger.error(f"Error processing lot jury decision binding data: {str(e)}")

    # Parse and merge BT-44-Lot
    try:
        prize_rank_data = parse_prize_rank(xml_content)
        if prize_rank_data:
            merge_prize_rank(release_json, prize_rank_data)
        else:
            logger.info("No Prize Rank data found")
    except Exception as e:
        logger.error(f"Error processing Prize Rank data: {str(e)}")

    # Parse and merge BT-45-Lot
    try:
        lot_rewards_other_data = parse_lot_rewards_other(xml_content)
        if lot_rewards_other_data:
            merge_lot_rewards_other(release_json, lot_rewards_other_data)
        else:
            logger.info("No Lot Rewards Other data found")
    except Exception as e:
        logger.error(f"Error processing Lot Rewards Other data: {str(e)}")

    # Parse and merge BT-46-Lot (Jury Member Name)
    try:
        jury_member_data = parse_jury_member_name(xml_content)
        if jury_member_data:
            merge_jury_member_name(release_json, jury_member_data)
        else:
            logger.info("No Jury Member Name data found")
    except Exception as e:
        logger.error(f"Error processing Jury Member Name data: {str(e)}")

    # Parse and merge BT-47-Lot (Participant Name)
    try:
        participant_data = parse_participant_name(xml_content)
        if participant_data:
            merge_participant_name(release_json, participant_data)
        else:
            logger.info("No Participant Name data found")
    except Exception as e:
        logger.error(f"Error processing Participant Name data: {str(e)}")

    # Parse and merge BT-50-Lot (Minimum Candidates)
    try:
        minimum_candidates_data = parse_minimum_candidates(xml_content)
        if minimum_candidates_data:
            merge_minimum_candidates(release_json, minimum_candidates_data)
        else:
            logger.info("No Minimum Candidates data found")
    except Exception as e:
        logger.error(f"Error processing Minimum Candidates data: {str(e)}")

    # Parse and merge BT_500 Ultimate Beneficial Owner (UBO) Name data
    try:
        ubo_name_data = parse_ubo_name(xml_content)
        if ubo_name_data:
            merge_ubo_name(release_json, ubo_name_data)
        else:
            logger.info("No UBO Name data found")
    except Exception as e:
        logger.error(f"Error processing UBO Name data: {str(e)}")

    # Parse and merge BT-501 Organization Identifier data
    try:
        organization_identifier_data = parse_organization_identifier(xml_content)
        if organization_identifier_data:
            merge_organization_identifier(release_json, organization_identifier_data)
        else:
            logger.info("No Organization Identifier data found")
    except Exception as e:
        logger.error(f"Error processing Organization Identifier data: {str(e)}")

    # Parse and merge BT-5010-Lot EU Funds Financing Identifier
    try:
        eu_funds_financing_identifier_data = parse_eu_funds_financing_identifier(xml_content)
        if eu_funds_financing_identifier_data:
            merge_eu_funds_financing_identifier(release_json, eu_funds_financing_identifier_data)
        else:
            logger.info("No EU Funds Financing Identifier data found")
    except Exception as e:
        logger.error(f"Error processing EU Funds Financing Identifier data: {str(e)}")

    # Parse and merge BT-5011-Contract EU Funds Financing Identifier
    try:
        contract_eu_funds_financing_identifier_data = parse_contract_eu_funds_financing_identifier(xml_content)
        if contract_eu_funds_financing_identifier_data:
            merge_contract_eu_funds_financing_identifier(release_json, contract_eu_funds_financing_identifier_data)
        else:
            logger.info("No Contract EU Funds Financing Identifier data found")
    except Exception as e:
        logger.error(f"Error processing Contract EU Funds Financing Identifier data: {str(e)}")

    # Parse and merge BT-502-Organization-Company
    try:
        organization_contact_point_data = parse_organization_contact_point(xml_content)
        if organization_contact_point_data:
            merge_organization_contact_point(release_json, organization_contact_point_data)
        else:
            logger.info("No Organization Contact Point data found")
    except Exception as e:
        logger.error(f"Error processing Organization Contact Point data: {str(e)}")
    
    # Parse and merge BT-502-Organization-TouchPoint
    try:
        touchpoint_contact_point_data = parse_touchpoint_contact_point(xml_content)
        if touchpoint_contact_point_data:
            merge_touchpoint_contact_point(release_json, touchpoint_contact_point_data)
        else:
            logger.info("No TouchPoint Contact Point data found")
    except Exception as e:
        logger.error(f"Error processing TouchPoint Contact Point data: {str(e)}")

    # Parse and merge BT-503-Organization-Company
    try:
        organization_contact_telephone_data = parse_organization_contact_telephone(xml_content)
        if organization_contact_telephone_data:
            merge_organization_contact_telephone(release_json, organization_contact_telephone_data)
        else:
            logger.info("No Organization Contact Telephone data found")
    except Exception as e:
        logger.error(f"Error processing Organization Contact Telephone data: {str(e)}")

    # Parse and merge BT-503-Organization-TouchPoint
    try:
        touchpoint_contact_telephone_data = parse_touchpoint_contact_telephone(xml_content)
        if touchpoint_contact_telephone_data:
            merge_touchpoint_contact_telephone(release_json, touchpoint_contact_telephone_data)
        else:
            logger.info("No TouchPoint Contact Telephone data found")
    except Exception as e:
        logger.error(f"Error processing TouchPoint Contact Telephone data: {str(e)}")

    # Parse and merge BT-503-UBO
    try:
        ubo_telephone_data = parse_ubo_telephone(xml_content)
        if ubo_telephone_data:
            merge_ubo_telephone(release_json, ubo_telephone_data)
        else:
            logger.info("No UBO Telephone data found")
    except Exception as e:
        logger.error(f"Error processing UBO Telephone data: {str(e)}")

    # Parse and merge BT-505-Organization-Company
    try:
        organization_website_data = parse_organization_website(xml_content)
        if organization_website_data:
            merge_organization_website(release_json, organization_website_data)
        else:
            logger.info("No Organization Website data found")
    except Exception as e:
        logger.error(f"Error processing Organization Website data: {str(e)}")

    # Parse and merge BT-505-Organization-TouchPoint
    try:
        touchpoint_website_data = parse_touchpoint_website(xml_content)
        if touchpoint_website_data:
            merge_touchpoint_website(release_json, touchpoint_website_data)
        else:
            logger.info("No TouchPoint Website data found")
    except Exception as e:
        logger.error(f"Error processing TouchPoint Website data: {str(e)}")

    # Parse and merge BT-506-Organization-Company
    try:
        organization_contact_email_data = parse_organization_contact_email(xml_content)
        if organization_contact_email_data:
            merge_organization_contact_email(release_json, organization_contact_email_data)
        else:
            logger.info("No Organization Contact Email data found")
    except Exception as e:
        logger.error(f"Error processing Organization Contact Email data: {str(e)}")

    # Parse and merge BT-506-Organization-TouchPoint
    try:
        touchpoint_contact_email_data = parse_touchpoint_contact_email(xml_content)
        if touchpoint_contact_email_data:
            merge_touchpoint_contact_email(release_json, touchpoint_contact_email_data)
        else:
            logger.info("No TouchPoint Contact Email data found")
    except Exception as e:
        logger.error(f"Error processing TouchPoint Contact Email data: {str(e)}")

    # Parse and merge BT-506-UBO
    try:
        ubo_email_data = parse_ubo_email(xml_content)
        if ubo_email_data:
            merge_ubo_email(release_json, ubo_email_data)
        else:
            logger.info("No UBO Email data found")
    except Exception as e:
        logger.error(f"Error processing UBO Email data: {str(e)}")
    
    # Parse and merge BT-507-Organization-Company
    try:
        organization_country_subdivision_data = parse_organization_country_subdivision(xml_content)
        if organization_country_subdivision_data:
            merge_organization_country_subdivision(release_json, organization_country_subdivision_data)
        else:
            logger.info("No organization country subdivision data found")
    except Exception as e:
        logger.error(f"Error processing organization country subdivision data: {str(e)}")

    # Parse and merge BT-507-Organization-TouchPoint
    try:
        touchpoint_country_subdivision_data = parse_touchpoint_country_subdivision(xml_content)
        if touchpoint_country_subdivision_data:
            merge_touchpoint_country_subdivision(release_json, touchpoint_country_subdivision_data)
        else:
            logger.info("No touchpoint country subdivision data found")
    except Exception as e:
        logger.error(f"Error processing touchpoint country subdivision data: {str(e)}")

    # Parse and merge BT-507-UBO
    try:
        ubo_country_subdivision_data = parse_ubo_country_subdivision(xml_content)
        if ubo_country_subdivision_data:
            merge_ubo_country_subdivision(release_json, ubo_country_subdivision_data)
        else:
            logger.info("No UBO country subdivision data found")
    except Exception as e:
        logger.error(f"Error processing UBO country subdivision data: {str(e)}")

    # Parse and merge BT-5071-Lot
    try:
        subdivision_data = parse_place_performance_country_subdivision(xml_content)
        if subdivision_data:
            merge_place_performance_country_subdivision(release_json, subdivision_data)
        else:
            logger.info("No Place Performance Country Subdivision data found")
    except Exception as e:
        logger.error(f"Error processing Place Performance Country Subdivision data: {str(e)}")

    # Parse and merge BT-5071-Part
    try:
        part_place_performance_data = parse_part_place_performance_country_subdivision(xml_content)
        if part_place_performance_data:
            merge_part_place_performance_country_subdivision(release_json, part_place_performance_data)
        else:
            logger.info("No Part Place Performance Country Subdivision data found")
    except Exception as e:
        logger.error(f"Error processing Part Place Performance Country Subdivision data: {str(e)}")

    # Parse and merge BT-5071-Procedure
    try:
        procedure_place_performance_data = parse_procedure_place_performance_country_subdivision(xml_content)
        if procedure_place_performance_data:
            merge_procedure_place_performance_country_subdivision(release_json, procedure_place_performance_data)
        else:
            logger.info("No Procedure Place Performance Country Subdivision data found")
    except Exception as e:
        logger.error(f"Error processing Procedure Place Performance Country Subdivision data: {str(e)}")
    
    # Parse and merge BT-508-Procedure-Buyer
    try:
        buyer_profile_data = parse_buyer_profile_url(xml_content)
        if buyer_profile_data:
            merge_buyer_profile_url(release_json, buyer_profile_data)
        else:
            logger.info("No Buyer Profile URL data found")
    except Exception as e:
        logger.error(f"Error processing Buyer Profile URL data: {str(e)}")

    # Parse and merge BT-509-Organization-Company
    try:
        edelivery_gateway_data = parse_organization_edelivery_gateway(xml_content)
        if edelivery_gateway_data:
            merge_organization_edelivery_gateway(release_json, edelivery_gateway_data)
        else:
            logger.info("No Organisation eDelivery Gateway data found")
    except Exception as e:
        logger.error(f"Error processing Organisation eDelivery Gateway data: {str(e)}")

    # Parse and merge BT-509-Organization-TouchPoint
    try:
        touchpoint_edelivery_gateway_data = parse_touchpoint_edelivery_gateway(xml_content)
        if touchpoint_edelivery_gateway_data:
            merge_touchpoint_edelivery_gateway(release_json, touchpoint_edelivery_gateway_data)
        else:
            logger.info("No TouchPoint eDelivery Gateway data found")
    except Exception as e:
        logger.error(f"Error processing TouchPoint eDelivery Gateway data: {str(e)}")

    # Parse and merge BT-51-Lot
    try:
        lot_maximum_candidates_data = parse_lot_maximum_candidates(xml_content)
        if lot_maximum_candidates_data:
            merge_lot_maximum_candidates(release_json, lot_maximum_candidates_data)
        else:
            logger.info("No Lot Maximum Candidates Number data found")
    except Exception as e:
        logger.error(f"Error processing Lot Maximum Candidates Number data: {str(e)}")

    # Parse and merge BT-510(a)-Organization-Company
    try:
        organization_street_data = parse_organization_street(xml_content)
        if organization_street_data:
            merge_organization_street(release_json, organization_street_data)
        else:
            logger.info("No Organization Street data found")
    except Exception as e:
        logger.error(f"Error processing Organization Street data: {str(e)}")

    # Parse and merge BT-510(a)-Organization-TouchPoint
    try:
        touchpoint_street_data = parse_touchpoint_street(xml_content)
        if touchpoint_street_data:
            merge_touchpoint_street(release_json, touchpoint_street_data)
        else:
            logger.info("No TouchPoint Street data found")
    except Exception as e:
        logger.error(f"Error processing TouchPoint Street data: {str(e)}")

    # Parse and merge BT-510(a)-UBO
    try:
        ubo_street_data = parse_ubo_street(xml_content)
        if ubo_street_data:
            merge_ubo_street(release_json, ubo_street_data)
        else:
            logger.info("No UBO Street data found")
    except Exception as e:
        logger.error(f"Error processing UBO Street data: {str(e)}")

    # Parse and merge BT-510(b)-Organization-Company
    try:
        organization_streetline1_data = parse_organization_streetline1(xml_content)
        if organization_streetline1_data:
            merge_organization_streetline1(release_json, organization_streetline1_data)
        else:
            logger.info("No Organization Streetline 1 data found")
    except Exception as e:
        logger.error(f"Error processing Organization Streetline 1 data: {str(e)}")

    # Parse and merge BT-510(b)-Organization-TouchPoint
    try:
        touchpoint_streetline1_data = parse_touchpoint_streetline1(xml_content)
        if touchpoint_streetline1_data:
            merge_touchpoint_streetline1(release_json, touchpoint_streetline1_data)
        else:
            logger.info("No TouchPoint Streetline 1 data found")
    except Exception as e:
        logger.error(f"Error processing TouchPoint Streetline 1 data: {str(e)}")

    # Parse and merge BT-510(b)-UBO
    try:
        ubo_streetline1_data = parse_ubo_streetline1(xml_content)
        if ubo_streetline1_data:
            merge_ubo_streetline1(release_json, ubo_streetline1_data)
        else:
            logger.info("No UBO Streetline 1 data found")
    except Exception as e:
        logger.error(f"Error processing UBO Streetline 1 data: {str(e)}")

    # Parse and merge BT-510(c)-Organization-Company (Streetline 2)
    try:
        organization_streetline2_data = parse_organization_streetline2(xml_content)
        if organization_streetline2_data:
            merge_organization_streetline2(release_json, organization_streetline2_data)
            logger.info("BT-510(c)-Organization-Company: Successfully merged Organization Streetline 2 data")
        else:
            logger.info("BT-510(c)-Organization-Company: No Organization Streetline 2 data found")
    except Exception as e:
        logger.error(f"BT-510(c)-Organization-Company: Error processing Organization Streetline 2 data: {str(e)}")

    # Parse and merge BT-510(c)-Organization-TouchPoint
    try:
        touchpoint_streetline2_data = parse_touchpoint_streetline2(xml_content)
        if touchpoint_streetline2_data:
            merge_touchpoint_streetline2(release_json, touchpoint_streetline2_data)
        else:
            logger.info("No TouchPoint Streetline 2 data found")
    except Exception as e:
        logger.error(f"Error processing TouchPoint Streetline 2 data: {str(e)}")

    # Parse and merge BT-510(c)-UBO
    try:
        ubo_streetline2_data = parse_ubo_streetline2(xml_content)
        if ubo_streetline2_data:
            merge_ubo_streetline2(release_json, ubo_streetline2_data)
        else:
            logger.info("No UBO Streetline 2 data found")
    except Exception as e:
        logger.error(f"Error processing UBO Streetline 2 data: {str(e)}")
        
    # Parse and merge BT-5101(a)-Lot
    try:
        lot_place_performance_street_data = parse_lot_place_performance_street(xml_content)
        if lot_place_performance_street_data:
            merge_lot_place_performance_street(release_json, lot_place_performance_street_data)
        else:
            logger.info("No Lot Place Performance Street data found")
    except Exception as e:
        logger.error(f"Error processing Lot Place Performance Street data: {str(e)}")

    # Parse and merge BT-5101(a)-Part
    try:
        part_place_performance_street_data = parse_part_place_performance_street(xml_content)
        if part_place_performance_street_data:
            merge_part_place_performance_street(release_json, part_place_performance_street_data)
        else:
            logger.info("No Part Place Performance Street data found")
    except Exception as e:
        logger.error(f"Error processing Part Place Performance Street data: {str(e)}")

    # Parse and merge BT-5101(a)-Procedure
    try:
        procedure_place_performance_street_data = parse_procedure_place_performance_street(xml_content)
        if procedure_place_performance_street_data:
            merge_procedure_place_performance_street(release_json, procedure_place_performance_street_data)
        else:
            logger.info("No Procedure Place Performance Street data found")
    except Exception as e:
        logger.error(f"Error processing Procedure Place Performance Street data: {str(e)}")

    # Parse and merge BT-5101(b)-Lot
    try:
        lot_place_performance_streetline1_data = parse_lot_place_performance_streetline1(xml_content)
        if lot_place_performance_streetline1_data:
            merge_lot_place_performance_streetline1(release_json, lot_place_performance_streetline1_data)
        else:
            logger.info("No Lot Place Performance Streetline 1 data found")
    except Exception as e:
        logger.error(f"Error processing Lot Place Performance Streetline 1 data: {str(e)}")

    # Parse and merge BT-5101(b)-Part
    try:
        part_place_performance_streetline1_data = parse_part_place_performance_streetline1(xml_content)
        if part_place_performance_streetline1_data:
            merge_part_place_performance_streetline1(release_json, part_place_performance_streetline1_data)
        else:
            logger.info("No Part Place Performance Streetline 1 data found")
    except Exception as e:
        logger.error(f"Error processing Part Place Performance Streetline 1 data: {str(e)}")

    # Parse and merge BT-5101(b)-Procedure
    try:
        procedure_place_performance_streetline1_data = parse_procedure_place_performance_streetline1(xml_content)
        if procedure_place_performance_streetline1_data:
            merge_procedure_place_performance_streetline1(release_json, procedure_place_performance_streetline1_data)
        else:
            logger.info("No Procedure Place Performance Streetline 1 data found")
    except Exception as e:
        logger.error(f"Error processing Procedure Place Performance Streetline 1 data: {str(e)}")

    # Parse and merge BT-5101(c)-Lot
    try:
        lot_place_performance_streetline2_data = parse_lot_place_performance_streetline2(xml_content)
        if lot_place_performance_streetline2_data:
            merge_lot_place_performance_streetline2(release_json, lot_place_performance_streetline2_data)
        else:
            logger.info("No Lot Place Performance Streetline 2 data found")
    except Exception as e:
        logger.error(f"Error processing Lot Place Performance Streetline 2 data: {str(e)}")

    # Parse and merge BT-5101(c)-Part
    try:
        part_place_performance_streetline2_data = parse_part_place_performance_streetline2(xml_content)
        if part_place_performance_streetline2_data:
            merge_part_place_performance_streetline2(release_json, part_place_performance_streetline2_data)
        else:
            logger.info("No Part Place Performance Streetline 2 data found")
    except Exception as e:
        logger.error(f"Error processing Part Place Performance Streetline 2 data: {str(e)}")

    # Parse and merge BT-5101(c)-Procedure
    try:
        procedure_place_performance_streetline2_data = parse_procedure_place_performance_streetline2(xml_content)
        if procedure_place_performance_streetline2_data:
            merge_procedure_place_performance_streetline2(release_json, procedure_place_performance_streetline2_data)
        else:
            logger.info("No Procedure Place Performance Streetline 2 data found")
    except Exception as e:
        logger.error(f"Error processing Procedure Place Performance Streetline 2 data: {str(e)}")

    # Parse and merge BT-512-Organization-Company
    try:
        organization_postcode_data = parse_organization_postcode(xml_content)
        if organization_postcode_data:
            merge_organization_postcode(release_json, organization_postcode_data)
        else:
            logger.info("No Organization Postcode data found")
    except Exception as e:
        logger.error(f"Error processing Organization Postcode data: {str(e)}")

    # Parse and merge BT-512-Organization-TouchPoint
    try:
        touchpoint_postcode_data = parse_touchpoint_postcode(xml_content)
        if touchpoint_postcode_data:
            merge_touchpoint_postcode(release_json, touchpoint_postcode_data)
        else:
            logger.info("No TouchPoint Postcode data found")
    except Exception as e:
        logger.error(f"Error processing TouchPoint Postcode data: {str(e)}")

    # Parse and merge BT-512-UBO
    try:
        ubo_postcode_data = parse_ubo_postcode(xml_content)
        if ubo_postcode_data:
            merge_ubo_postcode(release_json, ubo_postcode_data)
        else:
            logger.info("No UBO Postcode data found")
    except Exception as e:
        logger.error(f"Error processing UBO Postcode data: {str(e)}")

    # Parse and merge BT-5121-Lot
    try:
        post_code_data = parse_place_performance_post_code(xml_content)
        if post_code_data:
            merge_place_performance_post_code(release_json, post_code_data)
        else:
            logger.info("No Place Performance Post Code data found")
    except Exception as e:
        logger.error(f"Error processing Place Performance Post Code data: {str(e)}")

    # Parse and merge BT-5121-Part
    try:
        post_code_data_part = parse_place_performance_post_code_part(xml_content)
        if post_code_data_part:
            merge_place_performance_post_code_part(release_json, post_code_data_part)
        else:
            logger.info("No Place Performance Post Code (Part) data found")
    except Exception as e:
        logger.error(f"Error processing Place Performance Post Code (Part) data: {str(e)}")

    # Parse and merge BT-5121-Procedure
    try:
        post_code_data_procedure = parse_place_performance_post_code_procedure(xml_content)
        if post_code_data_procedure:
            merge_place_performance_post_code_procedure(release_json, post_code_data_procedure)
        else:
            logger.info("No Place Performance Post Code (Procedure) data found")
    except Exception as e:
        logger.error(f"Error processing Place Performance Post Code (Procedure) data: {str(e)}")

    # Parse and merge BT-513-Organization-Company
    try:
        city_data = parse_organization_city(xml_content)
        if city_data:
            merge_organization_city(release_json, city_data)
        else:
            logger.info("No Organization City data found")
    except Exception as e:
        logger.error(f"Error processing Organization City data: {str(e)}")

    # Parse and merge BT-513-Organization-TouchPoint
    try:
        touchpoint_city_data = parse_touchpoint_city(xml_content)
        if touchpoint_city_data:
            merge_touchpoint_city(release_json, touchpoint_city_data)
        else:
            logger.info("No TouchPoint City data found")
    except Exception as e:
        logger.error(f"Error processing TouchPoint City data: {str(e)}")

    # Parse and merge BT-513-UBO
    try:
        ubo_city_data = parse_ubo_city(xml_content)
        if ubo_city_data:
            merge_ubo_city(release_json, ubo_city_data)
        else:
            logger.info("No UBO City data found")
    except Exception as e:
        logger.error(f"Error processing UBO City data: {str(e)}")

    # Parse the place performance city (BT-5131)
    try:
        place_performance_city_data = parse_place_performance_city(xml_content)
        if place_performance_city_data:
            merge_place_performance_city(release_json, place_performance_city_data)
        else:
            logger.info("No Place Performance City data found")
    except Exception as e:
        logger.error(f"Error processing Place Performance City data: {str(e)}")

    # Parse the place performance city (BT-5131 part)
    try:
        place_performance_city_part_data = parse_place_performance_city_part(xml_content)
        if place_performance_city_part_data:
            merge_place_performance_city_part(release_json, place_performance_city_part_data)
        else:
            logger.info("No Place Performance City Part data found")
    except Exception as e:
        logger.error(f"Error processing Place Performance City Part data: {str(e)}")

    # Parse the place performance city (BT-5131 Procedure)
    try:
        place_performance_city_procedure_data = parse_place_performance_city_procedure(xml_content)
        if place_performance_city_procedure_data:
            merge_place_performance_city_procedure(release_json, place_performance_city_procedure_data)
        else:
            logger.info("No Place Performance City Procedure data found")
    except Exception as e:
        logger.error(f"Error processing Place Performance City Procedure data: {str(e)}")

    # Parse and merge BT-514-Organization-Company
    try:
        organization_country_data = parse_organization_country(xml_content)
        if organization_country_data:
            merge_organization_country(release_json, organization_country_data)
        else:
            logger.info("No Organization Country data found")
    except Exception as e:
        logger.error(f"Error processing Organization Country data: {str(e)}")

    # Parse and merge BT-514-Organization-TouchPoint
    try:
        touchpoint_country_data = parse_touchpoint_country(xml_content)
        if touchpoint_country_data:
            merge_touchpoint_country(release_json, touchpoint_country_data)
        else:
            logger.info("No TouchPoint Country data found")
    except Exception as e:
        logger.error(f"Error processing TouchPoint Country data: {str(e)}")

    # Parse and merge BT-514-UBO
    try:
        ubo_country_data = parse_ubo_country(xml_content)
        if ubo_country_data:
            merge_ubo_country(release_json, ubo_country_data)
        else:
            logger.info("No UBO Country data found")
    except Exception as e:
        logger.error(f"Error processing UBO Country data: {str(e)}")

    # Parse and merge BT-5141-Lot
    try:
        lot_country_data = parse_lot_country(xml_content)
        if lot_country_data:
            merge_lot_country(release_json, lot_country_data)
        else:
            logger.info("No Lot Country data found")
    except Exception as e:
        logger.error(f"Error processing Lot Country data: {str(e)}")

    # Parse and merge BT-5141-Part
    try:
        part_country_data = parse_part_country(xml_content)
        if part_country_data:
            merge_part_country(release_json, part_country_data)
        else:
            logger.info("No Part Country data found")
    except Exception as e:
        logger.error(f"Error processing Part Country data: {str(e)}")

    # Parse and merge BT-5141-Procedure
    try:
        procedure_country_data = parse_procedure_country(xml_content)
        if procedure_country_data:
            merge_procedure_country(release_json, procedure_country_data)
        else:
            logger.info("No Procedure Country data found")
    except Exception as e:
        logger.error(f"Error processing Procedure Country data: {str(e)}")

    # Parse and merge BT-52-Lot
    try:
        successive_reduction_data = parse_successive_reduction_indicator(xml_content)
        if successive_reduction_data:
            merge_successive_reduction_indicator(release_json, successive_reduction_data)
        else:
            logger.info("No Successive Reduction Indicator data found")
    except Exception as e:
        logger.error(f"Error processing Successive Reduction Indicator data: {str(e)}")

    # Parse and merge BT-531-Lot
    try:
        lot_additional_nature_data = parse_lot_additional_nature(xml_content)
        if lot_additional_nature_data:
            merge_lot_additional_nature(release_json, lot_additional_nature_data)
        else:
            logger.info("No Lot Additional Nature data found")
    except Exception as e:
        logger.error(f"Error processing Lot Additional Nature data: {str(e)}")

    # Parse and merge BT-531-Part
    try:
        part_additional_nature_data = parse_part_additional_nature(xml_content)
        if part_additional_nature_data:
            merge_part_additional_nature(release_json, part_additional_nature_data)
        else:
            logger.info("No Part Additional Nature data found")
    except Exception as e:
        logger.error(f"Error processing Part Additional Nature data: {str(e)}")

    # Parse and merge BT-531-Procedure
    try:
        procedure_additional_nature_data = parse_procedure_additional_nature(xml_content)
        if procedure_additional_nature_data:
            merge_procedure_additional_nature(release_json, procedure_additional_nature_data)
        else:
            logger.info("No Procedure Additional Nature data found")
    except Exception as e:
        logger.error(f"Error processing Procedure Additional Nature data: {str(e)}")

    # Parse and merge BT-536-Lot
    try:
        logger.info("Starting BT-536-Lot processing")
        lot_start_date_data = parse_lot_start_date(xml_content)
        logger.info(f"Parsed lot start date data: {lot_start_date_data}")
        if lot_start_date_data:
            logger.info("Calling merge_lot_start_date")
            merge_lot_start_date(release_json, lot_start_date_data)
        else:
            logger.warning("No Lot Start Date data found")
        logger.info(f"Release JSON after BT-536-Lot processing: {release_json}")
    except Exception as e:
        logger.error(f"Error processing Lot Start Date data: {str(e)}")
        logger.exception("Exception details:")

    # Parse and merge BT-536-Part
    try:
        part_contract_start_date_data = parse_part_contract_start_date(xml_content)
        if part_contract_start_date_data:
            merge_part_contract_start_date(release_json, part_contract_start_date_data)
        else:
            logger.info("No Part Contract Start Date data found")
    except Exception as e:
        logger.error(f"Error processing Part Contract Start Date data: {str(e)}")

    # Parse and merge BT-537-Lot
    try:
        lot_duration_end_date_data = parse_lot_duration_end_date(xml_content)
        if lot_duration_end_date_data:
            merge_lot_duration_end_date(release_json, lot_duration_end_date_data)
        else:
            logger.info("No Lot Duration End Date data found")
    except Exception as e:
        logger.error(f"Error processing Lot Duration End Date data: {str(e)}")

    # Parse and merge BT-537-Part
    try:
        part_duration_end_date_data = parse_part_duration_end_date(xml_content)
        if part_duration_end_date_data:
            merge_part_duration_end_date(release_json, part_duration_end_date_data)
        else:
            logger.info("No Part Duration End Date data found")
    except Exception as e:
        logger.error(f"Error processing Part Duration End Date data: {str(e)}")

    # Parse and merge BT-538-Lot
    try:
        lot_duration_other_data = parse_lot_duration_other(xml_content)
        if lot_duration_other_data:
            merge_lot_duration_other(release_json, lot_duration_other_data)
        else:
            logger.info("No Lot Duration Other data found")
    except Exception as e:
        logger.error(f"Error processing Lot Duration Other data: {str(e)}")

    # Parse and merge BT-538-Part
    try:
        part_duration_other_data = parse_part_duration_other(xml_content)
        if part_duration_other_data:
            merge_part_duration_other(release_json, part_duration_other_data)
        else:
            logger.info("No Part Duration Other data found")
    except Exception as e:
        logger.error(f"Error processing Part Duration Other data: {str(e)}")

    # Parse and merge BT-539-Lot (Award Criterion Type)
    try:
        award_criterion_type_data = parse_award_criterion_type(xml_content)
        if award_criterion_type_data:
            merge_award_criterion_type(release_json, award_criterion_type_data)
        else:
            logger.info("No Award Criterion Type data found")
    except Exception as e:
        logger.error(f"Error processing Award Criterion Type data: {str(e)}")

    # Parse and merge BT-539-LotsGroup (Award Criterion Type for Lot Groups)
    try:
        award_criterion_type_lots_group_data = parse_award_criterion_type_lots_group(xml_content)
        if award_criterion_type_lots_group_data:
            merge_award_criterion_type_lots_group(release_json, award_criterion_type_lots_group_data)
        else:
            logger.info("No Award Criterion Type data for lot groups found")
    except Exception as e:
        logger.error(f"Error processing Award Criterion Type data for lot groups: {str(e)}")

    # Parse and merge BT-540-Lot (Award Criterion Description)
    try:
        award_criterion_description_data = parse_award_criterion_description(xml_content)
        if award_criterion_description_data:
            merge_award_criterion_description(release_json, award_criterion_description_data)
        else:
            logger.info("No Award Criterion Description data found")
    except Exception as e:
        logger.error(f"Error processing Award Criterion Description data: {str(e)}")

    # Parse and merge BT-540-LotsGroup (Award Criterion Description for Lot Groups)
    try:
        award_criterion_description_lots_group_data = parse_award_criterion_description_lots_group(xml_content)
        if award_criterion_description_lots_group_data:
            merge_award_criterion_description_lots_group(release_json, award_criterion_description_lots_group_data)
        else:
            logger.info("No Award Criterion Description data for lot groups found")
    except Exception as e:
        logger.error(f"Error processing Award Criterion Description data for lot groups: {str(e)}")

    # Parse and merge BT-54-Lot (Options Description)
    try:
        options_description_data = parse_options_description(xml_content)
        if options_description_data:
            merge_options_description(release_json, options_description_data)
        else:
            logger.info("No Options Description data found")
    except Exception as e:
        logger.error(f"Error processing Options Description data: {str(e)}")

    # Parse and merge BT-541-Lot-FixedNumber (Award Criterion Fixed Number)
    try:
        award_criterion_fixed_number_data = parse_award_criterion_fixed_number(xml_content)
        if award_criterion_fixed_number_data:
            merge_award_criterion_fixed_number(release_json, award_criterion_fixed_number_data)
        else:
            logger.info("No Award Criterion Fixed Number data found")
    except Exception as e:
        logger.error(f"Error processing Award Criterion Fixed Number data: {str(e)}")

    # Parse and merge BT-5421-Lot
    try:
        lot_award_criterion_number_weight_data = parse_award_criterion_number_weight_lot(xml_content)
        if lot_award_criterion_number_weight_data:
            merge_award_criterion_number_weight_lot(release_json, lot_award_criterion_number_weight_data)
        else:
            logger.info("No Lot Award Criterion Number Weight data found")
    except Exception as e:
        logger.error(f"Error processing Lot Award Criterion Number Weight data: {str(e)}")

    # Parse and merge BT-5421-LotsGroup
    try:
        lots_group_award_criterion_number_weight_data = parse_award_criterion_number_weight_lots_group(xml_content)
        if lots_group_award_criterion_number_weight_data:
            merge_award_criterion_number_weight_lots_group(release_json, lots_group_award_criterion_number_weight_data)
        else:
            logger.info("No Lots Group Award Criterion Number Weight data found")
    except Exception as e:
        logger.error(f"Error processing Lots Group Award Criterion Number Weight data: {str(e)}")

    # Parse and merge BT-5422-Lot
    try:
        award_criterion_number_fixed_data = parse_award_criterion_number_fixed(xml_content)
        if award_criterion_number_fixed_data:
            merge_award_criterion_number_fixed(release_json, award_criterion_number_fixed_data)
        else:
            logger.info("No Award Criterion Number Fixed data found")
    except Exception as e:
        logger.error(f"Error processing Award Criterion Number Fixed data: {str(e)}")

    # Parse and merge BT-5422-LotsGroup
    try:
        award_criterion_number_fixed_lotsgroup_data = parse_award_criterion_number_fixed_lotsgroup(xml_content)
        if award_criterion_number_fixed_lotsgroup_data:
            merge_award_criterion_number_fixed_lotsgroup(release_json, award_criterion_number_fixed_lotsgroup_data)
        else:
            logger.info("No Award Criterion Number Fixed LotsGroup data found")
    except Exception as e:
        logger.error(f"Error processing Award Criterion Number Fixed LotsGroup data: {str(e)}")

    # Parse and merge BT-5423-Lot
    try:
        award_criterion_data = parse_award_criterion_number_threshold(xml_content)
        if award_criterion_data:
            merge_award_criterion_number_threshold(release_json, award_criterion_data)
        else:
            logger.info("No Award Criterion Number Threshold data found")
    except Exception as e:
        logger.error(f"Error processing Award Criterion Number Threshold data: {str(e)}")

    # Parse and merge BT-5423-LotsGroup
    try:
        award_criterion_lotsgroup_data = parse_award_criterion_number_threshold_lotsgroup(xml_content)
        if award_criterion_lotsgroup_data:
            merge_award_criterion_number_threshold_lotsgroup(release_json, award_criterion_lotsgroup_data)
        else:
            logger.info("No Award Criterion Number Threshold LotsGroup data found")
    except Exception as e:
        logger.error(f"Error processing Award Criterion Number Threshold LotsGroup data: {str(e)}")

    # Parse and merge BT-543-Lot
    try:
        award_criteria_data = parse_award_criteria_complicated(xml_content)
        if award_criteria_data:
            merge_award_criteria_complicated(release_json, award_criteria_data)
        else:
            logger.info("No award criteria complicated data found")
    except Exception as e:
        logger.error(f"Error processing award criteria complicated data: {str(e)}")

    # Parse and merge BT-543-LotsGroup (Award Criteria Complicated for Lot Groups)
    try:
        award_criteria_lotsgroup_data = parse_award_criteria_complicated_lotsgroup(xml_content)
        if award_criteria_lotsgroup_data:
            merge_award_criteria_complicated_lotsgroup(release_json, award_criteria_lotsgroup_data)
        else:
            logger.info("No Award Criteria Complicated data for lot groups found")
    except Exception as e:
        logger.error(f"Error processing Award Criteria Complicated data for lot groups: {str(e)}")

    # Parse and merge BT-553-Tender (Subcontracting Value)
    try:
        subcontracting_value_data = parse_subcontracting_value(xml_content)
        if subcontracting_value_data:
            merge_subcontracting_value(release_json, subcontracting_value_data)
        else:
            logger.info("No Subcontracting Value data found")
    except Exception as e:
        logger.error(f"Error processing Subcontracting Value data: {str(e)}")

    # Parse and merge BT-554-Tender (Subcontracting Description)
    try:
        subcontracting_description_data = parse_subcontracting_description(xml_content)
        if subcontracting_description_data:
            merge_subcontracting_description(release_json, subcontracting_description_data)
        else:
            logger.info("No Subcontracting Description data found")
    except Exception as e:
        logger.error(f"Error processing Subcontracting Description data: {str(e)}")

    # Parse and merge BT-555-Tender (Subcontracting Percentage)
    try:
        subcontracting_percentage_data = parse_subcontracting_percentage(xml_content)
        if subcontracting_percentage_data:
            merge_subcontracting_percentage(release_json, subcontracting_percentage_data)
            logger.info("BT-555-Tender: Successfully merged Subcontracting Percentage data")
        else:
            logger.info("BT-555-Tender: No Subcontracting Percentage data found")
    except Exception as e:
        logger.error(f"BT-555-Tender: Error processing Subcontracting Percentage data: {str(e)}")

    # Parse and merge BT-57-Lot (Renewal Description)
    try:
        renewal_description_data = parse_renewal_description(xml_content)
        if renewal_description_data:
            merge_renewal_description(release_json, renewal_description_data)
            logger.info("BT-57-Lot: Successfully merged Renewal Description data")
        else:
            logger.info("BT-57-Lot: No Renewal Description data found")
    except Exception as e:
        logger.error(f"BT-57-Lot: Error processing Renewal Description data: {str(e)}")

    # Parse and merge BT-58-Lot (Renewal Maximum)
    try:
        renewal_maximum_data = parse_renewal_maximum(xml_content)
        if renewal_maximum_data:
            merge_renewal_maximum(release_json, renewal_maximum_data)
            logger.info("BT-58-Lot: Successfully merged Renewal Maximum data")
        else:
            logger.info("BT-58-Lot: No Renewal Maximum data found")
    except Exception as e:
        logger.error(f"BT-58-Lot: Error processing Renewal Maximum data: {str(e)}")

    # Parse and merge BT-60-Lot (EU Funds)
    try:
        eu_funds_data = parse_eu_funds(xml_content)
        if eu_funds_data:
            merge_eu_funds(release_json, eu_funds_data)
            logger.info("BT-60-Lot: Successfully merged EU Funds data")
        else:
            logger.info("BT-60-Lot: No EU Funds data found")
    except Exception as e:
        logger.error(f"BT-60-Lot: Error processing EU Funds data: {str(e)}")

    # Parse and merge BT-610-Procedure-Buyer (Activity Entity)
    try:
        activity_entity_data = parse_activity_entity(xml_content)
        if activity_entity_data:
            merge_activity_entity(release_json, activity_entity_data)
            logger.info("BT-610-Procedure-Buyer: Successfully merged Activity Entity data")
        else:
            logger.info("BT-610-Procedure-Buyer: No Activity Entity data found")
    except Exception as e:
        logger.error(f"BT-610-Procedure-Buyer: Error processing Activity Entity data: {str(e)}")

    # Parse and merge BT-6110-Contract (Contract EU Funds Details)
    try:
        contract_eu_funds_details = parse_contract_eu_funds_details(xml_content)
        if contract_eu_funds_details:
            merge_contract_eu_funds_details(release_json, contract_eu_funds_details)
            logger.info("BT-6110-Contract: Successfully merged Contract EU Funds Details")
        else:
            logger.info("BT-6110-Contract: No Contract EU Funds Details found")
    except Exception as e:
        logger.error(f"BT-6110-Contract: Error processing Contract EU Funds Details: {str(e)}")

    # Parse and merge BT-6140-Lot (EU Funds Details)
    try:
        lot_eu_funds_details = parse_lot_eu_funds_details(xml_content)
        if lot_eu_funds_details:
            merge_lot_eu_funds_details(release_json, lot_eu_funds_details)
            logger.info("BT-6140-Lot: Successfully merged Lot EU Funds Details")
        else:
            logger.info("BT-6140-Lot: No Lot EU Funds Details found")
    except Exception as e:
        logger.error(f"BT-6140-Lot: Error processing Lot EU Funds Details: {str(e)}")

    # Parse and merge BT-615-Lot (Documents Restricted URL)
    try:
        documents_restricted_url_data = parse_documents_restricted_url(xml_content)
        if documents_restricted_url_data:
            merge_documents_restricted_url(release_json, documents_restricted_url_data)
            logger.info("BT-615-Lot: Successfully merged Documents Restricted URL data")
        else:
            logger.info("BT-615-Lot: No Documents Restricted URL data found")
    except Exception as e:
        logger.error(f"BT-615-Lot: Error processing Documents Restricted URL data: {str(e)}")

    # Parse and merge BT-615-Part (Documents Restricted URL for Parts)
    try:
        documents_restricted_url_part_data = parse_documents_restricted_url_part(xml_content)
        if documents_restricted_url_part_data:
            merge_documents_restricted_url_part(release_json, documents_restricted_url_part_data)
            logger.info("BT-615-Part: Successfully merged Documents Restricted URL data for Parts")
        else:
            logger.info("BT-615-Part: No Documents Restricted URL data for Parts found")
    except Exception as e:
        logger.error(f"BT-615-Part: Error processing Documents Restricted URL data for Parts: {str(e)}")

    # Parse and merge BT-625-Lot (Unit)
    try:
        unit_data = parse_unit(xml_content)
        if unit_data:
            merge_unit(release_json, unit_data)
            logger.info("BT-625-Lot: Successfully merged Unit data")
        else:
            logger.info("BT-625-Lot: No Unit data found")
    except Exception as e:
        logger.error(f"BT-625-Lot: Error processing Unit data: {str(e)}")

    # Parse and merge BT-63-Lot (Variants)
    try:
        variants_data = parse_variants(xml_content)
        if variants_data:
            merge_variants(release_json, variants_data)
            logger.info("BT-63-Lot: Successfully merged Variants data")
        else:
            logger.info("BT-63-Lot: No Variants data found")
    except Exception as e:
        logger.error(f"BT-63-Lot: Error processing Variants data: {str(e)}")

    # Parse and merge BT-630-Lot Deadline Receipt Expressions
    try:
        deadline_receipt_expressions_data = parse_deadline_receipt_expressions(xml_content)
        if deadline_receipt_expressions_data:
            merge_deadline_receipt_expressions(release_json, deadline_receipt_expressions_data)
            logger.info("BT-630-Lot: Successfully merged Deadline Receipt Expressions data")
        else:
            logger.info("BT-630-Lot: No Deadline Receipt Expressions data found")
    except Exception as e:
        logger.error(f"BT-630-Lot: Error processing Deadline Receipt Expressions data: {str(e)}")

    # Parse and merge BT-631-Lot (Dispatch Invitation Interest)
    try:
        dispatch_invitation_data = parse_dispatch_invitation_interest(xml_content)
        if dispatch_invitation_data:
            merge_dispatch_invitation_interest(release_json, dispatch_invitation_data)
            logger.info("BT-631-Lot: Successfully merged dispatch invitation interest data")
        else:
            logger.info("BT-631-Lot: No dispatch invitation interest data found")
    except Exception as e:
        logger.error(f"BT-631-Lot: Error processing dispatch invitation interest data: {str(e)}")

    # Parse and merge BT-632-Lot (Tool Name)
    try:
        tool_name_data = parse_tool_name(xml_content)
        if tool_name_data:
            merge_tool_name(release_json, tool_name_data)
            logger.info("BT-632-Lot: Successfully merged tool name data")
        else:
            logger.info("BT-632-Lot: No tool name data found")
    except Exception as e:
        logger.error(f"BT-632-Lot: Error processing tool name data: {str(e)}")

    # Parse and merge BT-632-Part (Tool Name)
    try:
        tool_name_part_data = parse_tool_name_part(xml_content)
        if tool_name_part_data:
            merge_tool_name_part(release_json, tool_name_part_data)
            logger.info("BT-632-Part: Successfully merged tool name data for part")
        else:
            logger.info("BT-632-Part: No tool name data found for part")
    except Exception as e:
        logger.error(f"BT-632-Part: Error processing tool name data for part: {str(e)}")

    # Parse and merge BT-633-Organization (Organisation Natural Person)
    try:
        organization_natural_person_data = parse_organization_natural_person(xml_content)
        if organization_natural_person_data:
            merge_organization_natural_person(release_json, organization_natural_person_data)
            logger.info("BT-633-Organization: Successfully merged Organization Natural Person data")
        else:
            logger.info("BT-633-Organization: No Organization Natural Person data found")
    except Exception as e:
        logger.error(f"BT-633-Organization: Error processing Organization Natural Person data: {str(e)}")

    # Parse and merge BT-635-LotResult (Buyer Review Requests Count)
    try:
        buyer_review_requests_count_data = parse_buyer_review_requests_count(xml_content)
        if buyer_review_requests_count_data:
            merge_buyer_review_requests_count(release_json, buyer_review_requests_count_data)
            logger.info("BT-635-LotResult: Successfully merged Buyer Review Requests Count data")
        else:
            logger.info("BT-635-LotResult: No Buyer Review Requests Count data found")
    except Exception as e:
        logger.error(f"BT-635-LotResult: Error processing Buyer Review Requests Count data: {str(e)}")

    # Parse and merge BT-636-LotResult (Buyer Review Requests Irregularity Type)
    try:
        irregularity_type_data = parse_irregularity_type(xml_content)
        if irregularity_type_data:
            merge_irregularity_type(release_json, irregularity_type_data)
            logger.info("BT-636-LotResult: Successfully merged Buyer Review Requests Irregularity Type data")
        else:
            logger.info("BT-636-LotResult: No Buyer Review Requests Irregularity Type data found")
    except Exception as e:
        logger.error(f"BT-636-LotResult: Error processing Buyer Review Requests Irregularity Type data: {str(e)}")

    # Parse and merge BT-64-Lot (Subcontracting Obligation Minimum)
    try:
        subcontracting_obligation_minimum_data = parse_subcontracting_obligation_minimum(xml_content)
        if subcontracting_obligation_minimum_data:
            merge_subcontracting_obligation_minimum(release_json, subcontracting_obligation_minimum_data)
            logger.info("BT-64-Lot: Successfully merged Subcontracting Obligation Minimum data")
        else:
            logger.info("BT-64-Lot: No Subcontracting Obligation Minimum data found")
    except Exception as e:
        logger.error(f"BT-64-Lot: Error processing Subcontracting Obligation Minimum data: {str(e)}")

    # Parse and merge BT-644-Lot (Prize Value)
    try:
        lot_prize_value_data = parse_lot_prize_value(xml_content)
        if lot_prize_value_data:
            merge_lot_prize_value(release_json, lot_prize_value_data)
            logger.info("BT-644-Lot: Successfully merged Prize Value data")
        else:
            logger.info("BT-644-Lot: No Prize Value data found")
    except Exception as e:
        logger.error(f"BT-644-Lot: Error processing Prize Value data: {str(e)}")

    # Parse and merge BT-65-Lot Subcontracting Obligation
    try:
        subcontracting_obligation_data = parse_subcontracting_obligation(xml_content)
        if subcontracting_obligation_data:
            merge_subcontracting_obligation(release_json, subcontracting_obligation_data)
            logger.info("BT-65-Lot: Successfully merged Subcontracting Obligation data")
        else:
            logger.info("BT-65-Lot: No Subcontracting Obligation data found")
    except Exception as e:
        logger.error(f"BT-65-Lot: Error processing Subcontracting Obligation data: {str(e)}")

    # Parse and merge BT-651-Lot Subcontracting Tender Indication
    try:
        subcontracting_tender_indication_data = parse_subcontracting_tender_indication(xml_content)
        if subcontracting_tender_indication_data:
            merge_subcontracting_tender_indication(release_json, subcontracting_tender_indication_data)
            logger.info("BT-651-Lot: Successfully merged Subcontracting Tender Indication data")
        else:
            logger.info("BT-651-Lot: No Subcontracting Tender Indication data found")
    except Exception as e:
        logger.error(f"BT-651-Lot: Error processing Subcontracting Tender Indication data: {str(e)}")

    # Parse and merge BT-660-LotResult
    try:
        framework_reestimated_value_data = parse_framework_reestimated_value(xml_content)
        if framework_reestimated_value_data:
            merge_framework_reestimated_value(release_json, framework_reestimated_value_data)
        else:
            logger.info("BT-660-LotResult: No Framework Re-estimated Value data found")
    except Exception as e:
        logger.error(f"BT-660-LotResult: Error processing Framework Re-estimated Value data: {str(e)}")

    # Parse and merge BT-67 Exclusion Grounds
    try:
        exclusion_grounds_data = parse_exclusion_grounds(xml_content)
        if exclusion_grounds_data:
            merge_exclusion_grounds(release_json, exclusion_grounds_data)
        else:
            logger.info("BT-67: No exclusion grounds data found")
    except Exception as e:
        logger.error(f"BT-67: Error processing exclusion grounds data: {str(e)}")

    # Parse and merge BT-70-Lot (Performance Terms)
    try:
        lot_performance_terms_data = parse_lot_performance_terms(xml_content)
        if lot_performance_terms_data:
            merge_lot_performance_terms(release_json, lot_performance_terms_data)
        else:
            logger.info("BT-70: No Lot Performance Terms data found")
    except Exception as e:
        logger.error(f"BT-70: Error processing Lot Performance Terms data: {str(e)}")

    # Parse and merge BT-702(a)-notice (Notice Official Language)
    try:
        notice_language_data = parse_notice_language(xml_content)
        if notice_language_data:
            merge_notice_language(release_json, notice_language_data)
        else:
            logger.info("BT-702(a): No Notice Language data found")
    except Exception as e:
        logger.error(f"BT-702(a): Error processing Notice Language data: {str(e)}")

    # Parse and merge BT-706-UBO (Winner Owner Nationality)
    try:
        ubo_nationalities_data = parse_ubo_nationalities(xml_content)
        if ubo_nationalities_data:
            merge_ubo_nationalities(release_json, ubo_nationalities_data)
        else:
            logger.info("BT-706: No UBO Nationality data found")
    except Exception as e:
        logger.error(f"BT-706: Error processing UBO Nationality data: {str(e)}")

    # Parse and merge BT-707-Lot (Documents Restricted Justification)
    try:
        lot_documents_data = parse_lot_documents_restricted_justification(xml_content)
        if lot_documents_data:
            merge_lot_documents_restricted_justification(release_json, lot_documents_data)
        else:
            logger.info("BT-707: No lot documents restricted justification data found")
    except Exception as e:
        logger.error(f"BT-707: Error processing lot documents restricted justification data: {str(e)}")

    # Parse and merge BT-707-Part (Documents Restricted Justification)
    try:
        part_documents_data = parse_part_documents_restricted_justification(xml_content)
        if part_documents_data:
            merge_part_documents_restricted_justification(release_json, part_documents_data)
        else:
            logger.info("BT-707-Part: No part documents restricted justification data found")
    except Exception as e:
        logger.error(f"BT-707-Part: Error processing part documents restricted justification data: {str(e)}")

    # Parse and merge BT-708-Lot (Documents Official Language)
    try:
        lot_documents_language_data = parse_lot_documents_official_language(xml_content)
        if lot_documents_language_data:
            merge_lot_documents_official_language(release_json, lot_documents_language_data)
        else:
            logger.info("No lot documents official language data found")
    except Exception as e:
        logger.error(f"Error processing lot documents official language data: {str(e)}")

    # Parse and merge BT-708-Part (Documents Official Language)
    try:
        part_documents_language_data = parse_part_documents_official_language(xml_content)
        if part_documents_language_data:
            merge_part_documents_official_language(release_json, part_documents_language_data)
        else:
            logger.info("No part documents official language data found")
    except Exception as e:
        logger.error(f"Error processing part documents official language data: {str(e)}")

    # Parse and merge BT-709-LotResult (Framework Maximum Value)
    try:
        framework_max_value_data = parse_framework_maximum_value(xml_content)
        if framework_max_value_data:
            merge_framework_maximum_value(release_json, framework_max_value_data)
        else:
            logger.info("BT-709: No framework maximum value data found")
    except Exception as e:
        logger.error(f"BT-709: Error processing framework maximum value data: {str(e)}")

    # Parse and merge BT-71-Lot (Reserved Participation)
    try:
        reserved_participation_data = parse_reserved_participation(xml_content)
        if reserved_participation_data:
            merge_reserved_participation(release_json, reserved_participation_data)
            logger.info("BT-71-Lot: Successfully merged reserved participation data")
        else:
            logger.info("BT-71-Lot: No reserved participation data found")
    except Exception as e:
        logger.error(f"BT-71-Lot: Error processing reserved participation data: {str(e)}")

    # Parse and merge BT-71-Part (Reserved Participation)
    try:
        reserved_participation_data = parse_reserved_participation_part(xml_content)
        if reserved_participation_data:
            merge_reserved_participation_part(release_json, reserved_participation_data)
            logger.info("BT-71-Part: Successfully merged reserved participation data")
        else:
            logger.info("BT-71-Part: No reserved participation data found")
    except Exception as e:
        logger.error(f"BT-71-Part: Error processing reserved participation data: {str(e)}")

    # Parse and merge BT-710-LotResult (Tender Value Lowest)
    try:
        tender_value_lowest_data = parse_tender_value_lowest(xml_content)
        if tender_value_lowest_data:
            merge_tender_value_lowest(release_json, tender_value_lowest_data)
            logger.info("BT-710-LotResult: Successfully merged Tender Value Lowest data")
        else:
            logger.info("BT-710-LotResult: No Tender Value Lowest data found")
    except Exception as e:
        logger.error(f"BT-710-LotResult: Error processing Tender Value Lowest data: {str(e)}")

    # Parse and merge BT-711-LotResult (Tender Value Highest)
    try:
        tender_value_highest_data = parse_tender_value_highest(xml_content)
        if tender_value_highest_data:
            merge_tender_value_highest(release_json, tender_value_highest_data)
            logger.info("BT-711-LotResult: Successfully merged Tender Value Highest data")
        else:
            logger.info("BT-711-LotResult: No Tender Value Highest data found")
    except Exception as e:
        logger.error(f"BT-711-LotResult: Error processing Tender Value Highest data: {str(e)}")

    # Parse and merge BT-712-LotResult
    try:
        lot_result_complaints_data = parse_lot_result_complaints(xml_content)
        if lot_result_complaints_data:
            merge_lot_result_complaints(release_json, lot_result_complaints_data)
        else:
            logger.info("No Lot Result Complaints data found")
    except Exception as e:
        logger.error(f"Error processing Lot Result Complaints data: {str(e)}")

    # Parse and merge BT-717-Lot (Clean Vehicles Directive)
    try:
        clean_vehicles_directive_data = parse_clean_vehicles_directive(xml_content)
        if clean_vehicles_directive_data:
            merge_clean_vehicles_directive(release_json, clean_vehicles_directive_data)
            logger.info("BT-717-Lot: Successfully merged Clean Vehicles Directive data")
        else:
            logger.info("BT-717-Lot: No Clean Vehicles Directive data found")
    except Exception as e:
        logger.error(f"BT-717-Lot: Error processing Clean Vehicles Directive data: {str(e)}")

    # Parse and merge BT-719-notice
    try:
        change_date_data = parse_procurement_documents_change_date(xml_content)
        if change_date_data:
            merge_procurement_documents_change_date(release_json, change_date_data)
        else:
            logger.info("No procurement documents change date data found")
    except Exception as e:
        logger.error(f"Error processing procurement documents change date data: {str(e)}")

    # Parse and merge BT-720-Tender
    try:
        tender_value_data = parse_tender_value(xml_content)
        if tender_value_data:
            merge_tender_value(release_json, tender_value_data)
        else:
            logger.info("No tender value data found")
    except Exception as e:
        logger.error(f"Error processing tender value data: {str(e)}")

    # Parse and merge BT-721-Contract
    try:
        contract_title_data = parse_contract_title(xml_content)
        if contract_title_data:
            merge_contract_title(release_json, contract_title_data)
        else:
            logger.info("BT-721: No contract title data found")
    except Exception as e:
        logger.error(f"BT-721: Error processing contract title data: {str(e)}")

    # Parse and merge BT-722-Contract
    try:
        contract_eu_funds_data = parse_contract_eu_funds(xml_content)
        if contract_eu_funds_data:
            merge_contract_eu_funds(release_json, contract_eu_funds_data)
        else:
            logger.info("No contract EU funds data found")
    except Exception as e:
        logger.error(f"Error processing contract EU funds data: {str(e)}")

    # Parse and merge BT-7220-Lot
    try:
        lot_eu_funds_data = parse_lot_eu_funds(xml_content)
        if lot_eu_funds_data:
            merge_lot_eu_funds(release_json, lot_eu_funds_data)
        else:
            logger.info("BT-7220: No lot EU funds data found")
    except Exception as e:
        logger.error(f"BT-7220: Error processing lot EU funds data: {str(e)}")

    # Parse and merge BT-723-LotResult
    try:
        vehicle_category_data = parse_vehicle_category(xml_content)
        if vehicle_category_data:
            merge_vehicle_category(release_json, vehicle_category_data)
        else:
            logger.info("BT-723: No vehicle category data found")
    except Exception as e:
        logger.error(f"BT-723: Error processing vehicle category data: {str(e)}")

    # Parse and merge BT-726-Lot
    try:
        lot_sme_suitability_data = parse_lot_sme_suitability(xml_content)
        if lot_sme_suitability_data:
            merge_lot_sme_suitability(release_json, lot_sme_suitability_data)
        else:
            logger.info("BT-726: No lot SME suitability data found")
    except Exception as e:
        logger.error(f"BT-726: Error processing lot SME suitability data: {str(e)}")
        
    # Parse and merge BT-726-LotsGroup
    try:
        lots_group_sme_suitability_data = parse_lots_group_sme_suitability(xml_content)
        if lots_group_sme_suitability_data:
            merge_lots_group_sme_suitability(release_json, lots_group_sme_suitability_data)
        else:
            logger.info("T-726-LotsGroup: No lot group SME suitability data found")
    except Exception as e:
        logger.error(f"T-726-LotsGroup: Error processing lot group SME suitability data: {str(e)}")

    # Parse and merge BT-726-Part
    try:
        part_sme_suitability_data = parse_part_sme_suitability(xml_content)
        if part_sme_suitability_data:
            merge_part_sme_suitability(release_json, part_sme_suitability_data)
        else:
            logger.info("BT-726-Part: No procurement part SME suitability data found")
    except Exception as e:
        logger.error(f"BT-726-Part: Error processing procurement part SME suitability data: {str(e)}")

    # Parse and merge BT-727-Lot
    try:
        lot_place_performance_data = parse_lot_place_performance(xml_content)
        if lot_place_performance_data:
            merge_lot_place_performance(release_json, lot_place_performance_data)
        else:
            logger.info("BT-727-Lot: No lot place of performance data found")
    except Exception as e:
        logger.error(f"BT-727-Lot: Error processing lot place of performance data: {str(e)}")

    # Parse and merge BT-727-Part
    try:
        part_place_performance_data = parse_part_place_performance(xml_content)
        if part_place_performance_data:
            merge_part_place_performance(release_json, part_place_performance_data)
        else:
            logger.info("BT-727-Part: No procurement part place of performance data found")
    except Exception as e:
        logger.error(f"BT-727-Part: Error processing procurement part place of performance data: {str(e)}")

    # Parse and merge BT-727-Procedure
    try:
        procedure_place_performance_data = parse_procedure_place_performance(xml_content)
        if procedure_place_performance_data:
            merge_procedure_place_performance(release_json, procedure_place_performance_data)
        else:
            logger.info("BT-727-Procedure: No procurement procedure place of performance data found")
    except Exception as e:
        logger.error(f"BT-727-Procedure: Error processing procurement procedure place of performance data: {str(e)}")

    # Parse and merge BT-728-Lot
    try:
        lot_place_performance_additional_data = parse_lot_place_performance_additional(xml_content)
        if lot_place_performance_additional_data:
            merge_lot_place_performance_additional(release_json, lot_place_performance_additional_data)
        else:
            logger.info("BT-728-Lot: No additional lot place of performance data found")
    except Exception as e:
        logger.error(f"BT-728-Lot: Error processing additional lot place of performance data: {str(e)}")

    # Parse and merge BT-728-Part
    try:
        part_place_performance_additional_data = parse_part_place_performance_additional(xml_content)
        if part_place_performance_additional_data:
            merge_part_place_performance_additional(release_json, part_place_performance_additional_data)
        else:
            logger.info("BT-728-Part: No additional procurement part place of performance data found")
    except Exception as e:
        logger.error(f"BT-728-Part: Error processing additional procurement part place of performance data: {str(e)}")

    # Parse and merge BT-728-Procedure
    try:
        procedure_place_performance_additional_data = parse_procedure_place_performance_additional(xml_content)
        if procedure_place_performance_additional_data:
            merge_procedure_place_performance_additional(release_json, procedure_place_performance_additional_data)
        else:
            logger.info("BT-728-Procedure: No additional procurement procedure place of performance data found")
    except Exception as e:
        logger.error(f"BT-728-Procedure: Error processing additional procurement procedure place of performance data: {str(e)}")

    # Parse and merge BT-729-Lot
    try:
        lot_subcontracting_obligation_maximum_data = parse_lot_subcontracting_obligation_maximum(xml_content)
        if lot_subcontracting_obligation_maximum_data:
            merge_lot_subcontracting_obligation_maximum(release_json, lot_subcontracting_obligation_maximum_data)
        else:
            logger.info("BT-729-Lot: No lot subcontracting obligation maximum percentage data found")
    except Exception as e:
        logger.error(f"BT-729-Lot: Error processing lot subcontracting obligation maximum percentage data: {str(e)}")

    # Parse and merge BT-732-Lot
    try:
        lot_security_clearance_description_data = parse_lot_security_clearance_description(xml_content)
        if lot_security_clearance_description_data:
            merge_lot_security_clearance_description(release_json, lot_security_clearance_description_data)
        else:
            logger.info("BT-732-Lot: No lot security clearance description data found")
    except Exception as e:
        logger.error(f"BT-732-Lot: Error processing lot security clearance description data: {str(e)}")

    # Parse and merge BT-733-Lot
    try:
        lot_award_criteria_order_justification_data = parse_lot_award_criteria_order_justification(xml_content)
        if lot_award_criteria_order_justification_data:
            merge_lot_award_criteria_order_justification(release_json, lot_award_criteria_order_justification_data)
        else:
            logger.info("BT-733-Lot: No lot award criteria order justification data found")
    except Exception as e:
        logger.error(f"BT-733-Lot: Error processing lot award criteria order justification data: {str(e)}")

    # Parse and merge BT-733-LotsGroup
    try:
        lots_group_award_criteria_order_justification_data = parse_lots_group_award_criteria_order_justification(xml_content)
        if lots_group_award_criteria_order_justification_data:
            merge_lots_group_award_criteria_order_justification(release_json, lots_group_award_criteria_order_justification_data)
        else:
            logger.info("BT-733-LotsGroup: No lot group award criteria order justification data found")
    except Exception as e:
        logger.error(f"BT-733-LotsGroup: Error processing lot group award criteria order justification data: {str(e)}")

    # Parse and merge BT-734-Lot Award Criterion Name
    try:
        award_criterion_data = parse_award_criterion_name(xml_content)
        if award_criterion_data:
            merge_award_criterion_name(release_json, award_criterion_data)
            logger.info("BT-734-Lot: Successfully merged Award Criterion Name data")
        else:
            logger.info("BT-734-Lot: No Award Criterion Name data found")
    except Exception as e:
        logger.error(f"BT-734-Lot: Error processing Award Criterion Name data: {str(e)}")

    # Parse and merge BT-734-LotsGroup Award Criterion Name
    try:
        award_criterion_lotsgroup_data = parse_award_criterion_name_lotsgroup(xml_content)
        if award_criterion_lotsgroup_data:
            merge_award_criterion_name_lotsgroup(release_json, award_criterion_lotsgroup_data)
            logger.info("BT-734-LotsGroup: Successfully merged Award Criterion Name data for lots groups")
        else:
            logger.info("BT-734-LotsGroup: No Award Criterion Name data found for lots groups")
    except Exception as e:
        logger.error(f"BT-734-LotsGroup: Error processing Award Criterion Name data for lots groups: {str(e)}")

    # Parse and merge BT-735-Lot CVD Contract Type
    try:
        cvd_contract_type_data = parse_cvd_contract_type(xml_content)
        if cvd_contract_type_data:
            merge_cvd_contract_type(release_json, cvd_contract_type_data)
            logger.info("BT-735-Lot: Successfully merged CVD Contract Type data for lots")
        else:
            logger.info("BT-735-Lot: No CVD Contract Type data found for lots")
    except Exception as e:
        logger.error(f"BT-735-Lot: Error processing CVD Contract Type data for lots: {str(e)}")

    # Parse and merge BT-735-LotResult CVD Contract Type
    try:
        cvd_contract_type_lotresult_data = parse_cvd_contract_type_lotresult(xml_content)
        if cvd_contract_type_lotresult_data:
            merge_cvd_contract_type_lotresult(release_json, cvd_contract_type_lotresult_data)
            logger.info("BT-735-LotResult: Successfully merged CVD Contract Type data for LotResults")
        else:
            logger.info("BT-735-LotResult: No CVD Contract Type data found for LotResults")
    except Exception as e:
        logger.error(f"BT-735-LotResult: Error processing CVD Contract Type data for LotResults: {str(e)}")

    # Parse and merge BT-736-Lot Reserved Execution
    try:
        reserved_execution_data = parse_reserved_execution(xml_content)
        if reserved_execution_data:
            merge_reserved_execution(release_json, reserved_execution_data)
            logger.info("BT-736-Lot: Successfully merged Reserved Execution data")
        else:
            logger.info("BT-736-Lot: No Reserved Execution data found")
    except Exception as e:
        logger.error(f"BT-736-Lot: Error processing Reserved Execution data: {str(e)}")

    # Parse and merge BT-736-Part Reserved Execution
    try:
        reserved_execution_part_data = parse_reserved_execution_part(xml_content)
        if reserved_execution_part_data:
            merge_reserved_execution_part(release_json, reserved_execution_part_data)
            logger.info("BT-736-Part: Successfully merged Reserved Execution data for part")
        else:
            logger.info("BT-736-Part: No Reserved Execution data found for part or value is not 'yes'")
    except Exception as e:
        logger.error(f"BT-736-Part: Error processing Reserved Execution data for part: {str(e)}")

    # Parse and merge BT-737-Lot Documents Unofficial Language
    try:
        unofficial_language_data = parse_documents_unofficial_language(xml_content)
        if unofficial_language_data:
            merge_documents_unofficial_language(release_json, unofficial_language_data)
            logger.info("BT-737-Lot: Successfully merged Documents Unofficial Language data")
        else:
            logger.info("BT-737-Lot: No Documents Unofficial Language data found")
    except Exception as e:
        logger.error(f"BT-737-Lot: Error processing Documents Unofficial Language data: {str(e)}")

    # Parse and merge BT-737-Part Documents Unofficial Language
    try:
        unofficial_language_data_part = parse_documents_unofficial_language_part(xml_content)
        if unofficial_language_data_part:
            merge_documents_unofficial_language_part(release_json, unofficial_language_data_part)
            logger.info("BT-737-Part: Successfully merged Documents Unofficial Language data")
        else:
            logger.info("BT-737-Part: No Documents Unofficial Language data found")
    except Exception as e:
        logger.error(f"BT-737-Part: Error processing Documents Unofficial Language data: {str(e)}")

    # Parse and merge BT-738-notice Notice Preferred Publication Date
    try:
        preferred_publication_date_data = parse_notice_preferred_publication_date(xml_content)
        if preferred_publication_date_data:
            merge_notice_preferred_publication_date(release_json, preferred_publication_date_data)
            logger.info("BT-738-notice: Successfully merged Notice Preferred Publication Date data")
        else:
            logger.info("BT-738-notice: No Notice Preferred Publication Date data found")
    except Exception as e:
        logger.error(f"BT-738-notice: Error processing Notice Preferred Publication Date data: {str(e)}")

    # Parse and merge BT-739-Organization-Company Organisation Contact Fax
    try:
        organization_fax_data = parse_organization_contact_fax(xml_content)
        if organization_fax_data:
            merge_organization_contact_fax(release_json, organization_fax_data)
            logger.info("BT-739-Organization-Company: Successfully merged Organisation Contact Fax data")
        else:
            logger.info("BT-739-Organization-Company: No Organisation Contact Fax data found")
    except Exception as e:
        logger.error(f"BT-739-Organization-Company: Error processing Organisation Contact Fax data: {str(e)}")

    # Parse and merge BT-739-Organization-TouchPoint Contact Fax
    try:
        touchpoint_fax_data = parse_touchpoint_contact_fax(xml_content)
        if touchpoint_fax_data:
            merge_touchpoint_contact_fax(release_json, touchpoint_fax_data)
            logger.info("BT-739-Organization-TouchPoint: Successfully merged TouchPoint Contact Fax data")
        else:
            logger.info("BT-739-Organization-TouchPoint: No TouchPoint Contact Fax data found")
    except Exception as e:
        logger.error(f"BT-739-Organization-TouchPoint: Error processing TouchPoint Contact Fax data: {str(e)}")

    # Parse and merge BT-739-UBO UBO Contact Fax
    try:
        ubo_fax_data = parse_ubo_fax(xml_content)
        if ubo_fax_data:
            merge_ubo_fax(release_json, ubo_fax_data)
            logger.info("BT-739-UBO: Successfully merged UBO Contact Fax data")
        else:
            logger.info("BT-739-UBO: No UBO Contact Fax data found")
    except Exception as e:
        logger.error(f"BT-739-UBO: Error processing UBO Contact Fax data: {str(e)}")

    # Parse and merge BT-740-Procedure-Buyer Buyer Contracting Entity
    try:
        buyer_contracting_entity_data = parse_buyer_contracting_entity(xml_content)
        if buyer_contracting_entity_data:
            merge_buyer_contracting_entity(release_json, buyer_contracting_entity_data)
            logger.info("BT-740-Procedure-Buyer: Successfully merged Buyer Contracting Entity data")
        else:
            logger.info("BT-740-Procedure-Buyer: No Buyer Contracting Entity data found")
    except Exception as e:
        logger.error(f"BT-740-Procedure-Buyer: Error processing Buyer Contracting Entity data: {str(e)}")

    # Parse and merge BT-743-Lot Electronic Invoicing
    try:
        electronic_invoicing_data = parse_electronic_invoicing(xml_content)
        if electronic_invoicing_data:
            merge_electronic_invoicing(release_json, electronic_invoicing_data)
            logger.info("BT-743-Lot: Successfully merged Electronic Invoicing data")
        else:
            logger.info("BT-743-Lot: No Electronic Invoicing data found")
    except Exception as e:
        logger.error(f"BT-743-Lot: Error processing Electronic Invoicing data: {str(e)}")

    # Parse and merge BT-744-Lot Submission Electronic Signature
    try:
        submission_electronic_signature_data = parse_submission_electronic_signature(xml_content)
        if submission_electronic_signature_data:
            merge_submission_electronic_signature(release_json, submission_electronic_signature_data)
            logger.info("BT-744-Lot: Successfully merged Submission Electronic Signature data")
        else:
            logger.info("BT-744-Lot: No Submission Electronic Signature data found")
    except Exception as e:
        logger.error(f"BT-744-Lot: Error processing Submission Electronic Signature data: {str(e)}")

    # Parse and merge BT-745-Lot Submission Nonelectronic Description
    try:
        submission_nonelectronic_description_data = parse_submission_nonelectronic_description(xml_content)
        if submission_nonelectronic_description_data:
            merge_submission_nonelectronic_description(release_json, submission_nonelectronic_description_data)
            logger.info("BT-745-Lot: Successfully merged Submission Nonelectronic Description data")
        else:
            logger.info("BT-745-Lot: No Submission Nonelectronic Description data found")
    except Exception as e:
        logger.error(f"BT-745-Lot: Error processing Submission Nonelectronic Description data: {str(e)}")

   # Parse and merge BT-746-Organization Winner Listed
    try:
        winner_listed_data = parse_winner_listed(xml_content)
        if winner_listed_data:
            merge_winner_listed(release_json, winner_listed_data)
            logger.info("BT-746-Organization: Successfully merged Winner Listed data")
        else:
            logger.info("BT-746-Organization: No Winner Listed data found")
    except Exception as e:
        logger.error(f"BT-746-Organization: Error processing Winner Listed data: {str(e)}")

    # Parse and merge BT-747-Lot Selection Criteria Type
    try:
        selection_criteria_type_data = parse_selection_criteria_type(xml_content)
        if selection_criteria_type_data:
            merge_selection_criteria_type(release_json, selection_criteria_type_data)
            logger.info("BT-747-Lot: Successfully merged Selection Criteria Type data")
        else:
            logger.info("BT-747-Lot: No Selection Criteria Type data found")
    except Exception as e:
        logger.error(f"BT-747-Lot: Error processing Selection Criteria Type data: {str(e)}")

    # Parse and merge BT-749-Lot Selection Criteria Name
    try:
        selection_criteria_name_data = parse_selection_criteria_name(xml_content)
        if selection_criteria_name_data:
            merge_selection_criteria_name(release_json, selection_criteria_name_data)
            logger.info("BT-749-Lot: Successfully merged Selection Criteria Name data")
        else:
            logger.info("BT-749-Lot: No Selection Criteria Name data found")
    except Exception as e:
        logger.error(f"BT-749-Lot: Error processing Selection Criteria Name data: {str(e)}")
    
    # Parse and merge BT-75-Lot Guarantee Required Description
    try:
        guarantee_description_data = parse_guarantee_required_description(xml_content)
        if guarantee_description_data:
            merge_guarantee_required_description(release_json, guarantee_description_data)
            logger.info("BT-75-Lot: Successfully merged Guarantee Required Description data")
        else:
            logger.info("BT-75-Lot: No Guarantee Required Description data found")
    except Exception as e:
        logger.error(f"BT-75-Lot: Error processing Guarantee Required Description data: {str(e)}")

    # Parse and merge BT-749 and BT-750 Selection Criteria
    try:
        selection_criteria_data = parse_selection_criteria(xml_content)
        if selection_criteria_data:
            merge_selection_criteria(release_json, selection_criteria_data)
            logger.info("BT-749 and BT-750: Successfully merged Selection Criteria data")
        else:
            logger.info("BT-749 and BT-750: No Selection Criteria data found")
    except Exception as e:
        logger.error(f"BT-749 and BT-750: Error processing Selection Criteria data: {str(e)}")
    
    # Parse and merge BT-752-Lot-ThresholdNumber Selection Criteria Second Stage Invite Threshold Number
    try:
        threshold_number_data = parse_selection_criteria_threshold_number(xml_content)
        if threshold_number_data:
            merge_selection_criteria_threshold_number(release_json, threshold_number_data)
            logger.info("BT-752-Lot-ThresholdNumber: Successfully merged Selection Criteria Threshold Number data")
        else:
            logger.info("BT-752-Lot-ThresholdNumber: No Selection Criteria Threshold Number data found")
    except Exception as e:
        logger.error(f"BT-752-Lot-ThresholdNumber: Error processing Selection Criteria Threshold Number data: {str(e)}")

    # Parse and merge BT-752-Lot-WeightNumber Selection Criteria Second Stage Invite Weight Number
    try:
        weight_number_data = parse_selection_criteria_weight_number(xml_content)
        if weight_number_data:
            merge_selection_criteria_weight_number(release_json, weight_number_data)
            logger.info("BT-752-Lot-WeightNumber: Successfully merged Selection Criteria Weight Number data")
        else:
            logger.info("BT-752-Lot-WeightNumber: No Selection Criteria Weight Number data found")
    except Exception as e:
        logger.error(f"BT-752-Lot-WeightNumber: Error processing Selection Criteria Weight Number data: {str(e)}")

    # Parse and merge BT-7531-Lot Selection Criteria Second Stage Invite Number Weight
    try:
        number_weight_data = parse_selection_criteria_number_weight(xml_content)
        if number_weight_data:
            merge_selection_criteria_number_weight(release_json, number_weight_data)
            logger.info("BT-7531-Lot: Successfully merged Selection Criteria Number Weight data")
        else:
            logger.info("BT-7531-Lot: No Selection Criteria Number Weight data found")
    except Exception as e:
        logger.error(f"BT-7531-Lot: Error processing Selection Criteria Number Weight data: {str(e)}")


    # Parse and merge BT-7532-Lot Selection Criteria Second Stage Invite Number Threshold
    try:
        number_threshold_data = parse_selection_criteria_number_threshold(xml_content)
        if number_threshold_data:
            merge_selection_criteria_number_threshold(release_json, number_threshold_data)
            logger.info("BT-7532-Lot: Successfully merged Selection Criteria Number Threshold data")
        else:
            logger.info("BT-7532-Lot: No Selection Criteria Number Threshold data found")
    except Exception as e:
        logger.error(f"BT-7532-Lot: Error processing Selection Criteria Number Threshold data: {str(e)}")

    # Parse and merge BT-754-Lot Accessibility Criteria
    try:
        accessibility_criteria_data = parse_accessibility_criteria(xml_content)
        if accessibility_criteria_data:
            merge_accessibility_criteria(release_json, accessibility_criteria_data)
            logger.info("BT-754-Lot: Successfully merged Accessibility Criteria data")
        else:
            logger.info("BT-754-Lot: No Accessibility Criteria data found")
    except Exception as e:
        logger.error(f"BT-754-Lot: Error processing Accessibility Criteria data: {str(e)}")

    # Parse and merge BT-755-Lot Accessibility Justification
    try:
        accessibility_justification_data = parse_accessibility_justification(xml_content)
        if accessibility_justification_data:
            merge_accessibility_justification(release_json, accessibility_justification_data)
            logger.info("BT-755-Lot: Successfully merged Accessibility Justification data")
        else:
            logger.info("BT-755-Lot: No Accessibility Justification data found")
    except Exception as e:
        logger.error(f"BT-755-Lot: Error processing Accessibility Justification data: {str(e)}")

    # Parse and merge BT-756-Procedure PIN Competition Termination
    try:
        pin_termination_data = parse_pin_competition_termination(xml_content)
        if pin_termination_data:
            merge_pin_competition_termination(release_json, pin_termination_data)
            logger.info("BT-756-Procedure: Successfully merged PIN Competition Termination data")
        else:
            logger.info("BT-756-Procedure: No PIN Competition Termination data found or not applicable")
    except Exception as e:
        logger.error(f"BT-756-Procedure: Error processing PIN Competition Termination data: {str(e)}")

    # Parse and merge BT-759-LotResult Received Submissions Count
    try:
        received_submissions_data = parse_received_submissions_count(xml_content)
        if received_submissions_data:
            merge_received_submissions_count(release_json, received_submissions_data)
            logger.info("BT-759-LotResult: Successfully merged Received Submissions Count data")
        else:
            logger.info("BT-759-LotResult: No Received Submissions Count data found")
    except Exception as e:
        logger.error(f"BT-759-LotResult: Error processing Received Submissions Count data: {str(e)}")

    # Parse and merge BT-76-Lot Tenderer Legal Form Description
    try:
        tenderer_legal_form_data = parse_tenderer_legal_form(xml_content)
        if tenderer_legal_form_data:
            merge_tenderer_legal_form(release_json, tenderer_legal_form_data)
            logger.info("BT-76-Lot: Successfully merged Tenderer Legal Form Description data")
        else:
            logger.info("BT-76-Lot: No Tenderer Legal Form Description data found")
    except Exception as e:
        logger.error(f"BT-76-Lot: Error processing Tenderer Legal Form Description data: {str(e)}")

    # Parse and merge BT-760-LotResult Received Submissions Type
    try:
        received_submissions_type_data = parse_received_submissions_type(xml_content)
        if received_submissions_type_data:
            merge_received_submissions_type(release_json, received_submissions_type_data)
            logger.info("BT-760-LotResult: Successfully merged Received Submissions Type data")
        else:
            logger.info("BT-760-LotResult: No Received Submissions Type data found")
    except Exception as e:
        logger.error(f"BT-760-LotResult: Error processing Received Submissions Type data: {str(e)}")

    # Parse and merge BT-762-notice Change Reason Description
    try:
        change_reason_data = parse_change_reason_description(xml_content)
        if change_reason_data:
            merge_change_reason_description(release_json, change_reason_data)
            logger.info("BT-762-notice: Successfully merged Change Reason Description data")
        else:
            logger.info("BT-762-notice: No Change Reason Description data found")
    except Exception as e:
        logger.error(f"BT-762-notice: Error processing Change Reason Description data: {str(e)}")

    # Parse and merge BT-763-Procedure Lots All Required
    try:
        lots_all_required_data = parse_lots_all_required(xml_content)
        if lots_all_required_data:
            merge_lots_all_required(release_json, lots_all_required_data)
            logger.info("BT-763-Procedure: Successfully merged Lots All Required data")
        else:
            logger.info("BT-763-Procedure: No Lots All Required data found or not applicable")
    except Exception as e:
        logger.error(f"BT-763-Procedure: Error processing Lots All Required data: {str(e)}")

    # Parse and merge BT-764-Lot Submission Electronic Catalogue
    try:
        submission_electronic_catalogue_data = parse_submission_electronic_catalogue(xml_content)
        if submission_electronic_catalogue_data:
            merge_submission_electronic_catalogue(release_json, submission_electronic_catalogue_data)
            logger.info("BT-764-Lot: Successfully merged Submission Electronic Catalogue data")
        else:
            logger.info("BT-764-Lot: No Submission Electronic Catalogue data found")
    except Exception as e:
        logger.error(f"BT-764-Lot: Error processing Submission Electronic Catalogue data: {str(e)}")

    # Parse and merge BT-765-Lot Framework Agreement
    try:
        framework_agreement_data = parse_framework_agreement(xml_content)
        if framework_agreement_data:
            merge_framework_agreement(release_json, framework_agreement_data)
            logger.info("BT-765-Lot: Successfully merged Framework Agreement data")
        else:
            logger.info("BT-765-Lot: No Framework Agreement data found")
    except Exception as e:
        logger.error(f"BT-765-Lot: Error processing Framework Agreement data: {str(e)}")

    # Parse and merge BT-765-Part Framework Agreement
    try:
        part_framework_agreement_data = parse_part_framework_agreement(xml_content)
        if part_framework_agreement_data:
            merge_part_framework_agreement(release_json, part_framework_agreement_data)
            logger.info("BT-765-Part: Successfully merged Part Framework Agreement data")
        else:
            logger.info("BT-765-Part: No Part Framework Agreement data found or not applicable")
    except Exception as e:
        logger.error(f"BT-765-Part: Error processing Part Framework Agreement data: {str(e)}")

    # Parse and merge BT-766-Lot Dynamic Purchasing System
    try:
        dynamic_purchasing_system_data = parse_dynamic_purchasing_system(xml_content)
        if dynamic_purchasing_system_data:
            merge_dynamic_purchasing_system(release_json, dynamic_purchasing_system_data)
            logger.info("BT-766-Lot: Successfully merged Dynamic Purchasing System data")
        else:
            logger.info("BT-766-Lot: No Dynamic Purchasing System data found or not applicable")
    except Exception as e:
        logger.error(f"BT-766-Lot: Error processing Dynamic Purchasing System data: {str(e)}")

    # Parse and merge BT-766-Part Dynamic Purchasing System
    try:
        part_dynamic_purchasing_system_data = parse_part_dynamic_purchasing_system(xml_content)
        if part_dynamic_purchasing_system_data:
            merge_part_dynamic_purchasing_system(release_json, part_dynamic_purchasing_system_data)
            logger.info("BT-766-Part: Successfully merged Part Dynamic Purchasing System data")
        else:
            logger.info("BT-766-Part: No Part Dynamic Purchasing System data found or not applicable")
    except Exception as e:
        logger.error(f"BT-766-Part: Error processing Part Dynamic Purchasing System data: {str(e)}")

    # Parse and merge BT-767-Lot Electronic Auction
    try:
        electronic_auction_data = parse_electronic_auction(xml_content)
        if electronic_auction_data:
            merge_electronic_auction(release_json, electronic_auction_data)
            logger.info("BT-767-Lot: Successfully merged Electronic Auction data")
        else:
            logger.info("BT-767-Lot: No Electronic Auction data found")
    except Exception as e:
        logger.error(f"BT-767-Lot: Error processing Electronic Auction data: {str(e)}")

    # Parse and merge BT-769-Lot Multiple Tenders
    try:
        multiple_tenders_data = parse_multiple_tenders(xml_content)
        if multiple_tenders_data:
            merge_multiple_tenders(release_json, multiple_tenders_data)
            logger.info("BT-769-Lot: Successfully merged Multiple Tenders data")
        else:
            logger.info("BT-769-Lot: No Multiple Tenders data found")
    except Exception as e:
        logger.error(f"BT-769-Lot: Error processing Multiple Tenders data: {str(e)}")

    # Parse and merge BT-77-Lot Financial Terms
    try:
        financial_terms_data = parse_financial_terms(xml_content)
        if financial_terms_data:
            merge_financial_terms(release_json, financial_terms_data)
            logger.info("BT-77-Lot: Successfully merged Financial Terms data")
        else:
            logger.info("BT-77-Lot: No Financial Terms data found")
    except Exception as e:
        logger.error(f"BT-77-Lot: Error processing Financial Terms data: {str(e)}")

    # Parse and merge BT-771-Lot Late Tenderer Information
    try:
        late_tenderer_info = parse_late_tenderer_info(xml_content)
        if late_tenderer_info:
            merge_late_tenderer_info(release_json, late_tenderer_info)
            logger.info("BT-771-Lot: Successfully merged Late Tenderer Information")
        else:
            logger.info("BT-771-Lot: No Late Tenderer Information found")
    except Exception as e:
        logger.error(f"BT-771-Lot: Error processing Late Tenderer Information: {str(e)}")

    # Parse and merge BT-772-Lot Late Tenderer Information Description
    try:
        late_tenderer_info_description = parse_late_tenderer_info_description(xml_content)
        if late_tenderer_info_description:
            merge_late_tenderer_info_description(release_json, late_tenderer_info_description)
            logger.info("BT-772-Lot: Successfully merged Late Tenderer Information Description")
        else:
            logger.info("BT-772-Lot: No Late Tenderer Information Description found")
    except Exception as e:
        logger.error(f"BT-772-Lot: Error processing Late Tenderer Information Description: {str(e)}")

    # Parse and merge BT-773-Tender Subcontracting
    try:
        subcontracting_data = parse_subcontracting(xml_content)
        if subcontracting_data:
            merge_subcontracting(release_json, subcontracting_data)
            logger.info("BT-773-Tender: Successfully merged Subcontracting data")
        else:
            logger.info("BT-773-Tender: No Subcontracting data found")
    except Exception as e:
        logger.error(f"BT-773-Tender: Error processing Subcontracting data: {str(e)}")
    
    # Parse and merge BT-774-Lot Green Procurement
    try:
        green_procurement_data = parse_green_procurement(xml_content)
        if green_procurement_data:
            merge_green_procurement(release_json, green_procurement_data)
            logger.info("BT-774-Lot: Successfully merged Green Procurement data")
        else:
            logger.info("BT-774-Lot: No Green Procurement data found")
    except Exception as e:
        logger.error(f"BT-774-Lot: Error processing Green Procurement data: {str(e)}")

    # Parse and merge BT-775-Lot Social Procurement
    try:
        social_procurement_data = parse_social_procurement(xml_content)
        if social_procurement_data:
            merge_social_procurement(release_json, social_procurement_data)
            logger.info("BT-775-Lot: Successfully merged Social Procurement data")
        else:
            logger.info("BT-775-Lot: No Social Procurement data found")
    except Exception as e:
        logger.error(f"BT-775-Lot: Error processing Social Procurement data: {str(e)}")

    # Parse and merge BT-776-Lot Procurement of Innovation
    try:
        procurement_innovation_data = parse_procurement_innovation(xml_content)
        if procurement_innovation_data:
            merge_procurement_innovation(release_json, procurement_innovation_data)
            logger.info("BT-776-Lot: Successfully merged Procurement of Innovation data")
        else:
            logger.info("BT-776-Lot: No Procurement of Innovation data found")
    except Exception as e:
        logger.error(f"BT-776-Lot: Error processing Procurement of Innovation data: {str(e)}")

    # Parse and merge BT-777-Lot Strategic Procurement Description
    try:
        strategic_procurement_data = parse_strategic_procurement_description(xml_content)
        if strategic_procurement_data:
            merge_strategic_procurement_description(release_json, strategic_procurement_data)
            logger.info("BT-777-Lot: Successfully merged Strategic Procurement Description data")
        else:
            logger.info("BT-777-Lot: No Strategic Procurement Description data found")
    except Exception as e:
        logger.error(f"BT-777-Lot: Error processing Strategic Procurement Description data: {str(e)}")

    # Parse and merge BT-78-Lot Security Clearance Deadline
    try:
        security_clearance_data = parse_security_clearance_deadline(xml_content)
        if security_clearance_data:
            merge_security_clearance_deadline(release_json, security_clearance_data)
            logger.info("BT-78-Lot: Successfully merged Security Clearance Deadline data")
        else:
            logger.info("BT-78-Lot: No Security Clearance Deadline data found")
    except Exception as e:
        logger.error(f"BT-78-Lot: Error processing Security Clearance Deadline data: {str(e)}")

    # Parse and merge BT-79-Lot Performing Staff Qualification
    try:
        staff_qualification_data = parse_performing_staff_qualification(xml_content)
        if staff_qualification_data:
            merge_performing_staff_qualification(release_json, staff_qualification_data)
            logger.info("BT-79-Lot: Successfully merged Performing Staff Qualification data")
        else:
            logger.info("BT-79-Lot: No Performing Staff Qualification data found")
    except Exception as e:
        logger.error(f"BT-79-Lot: Error processing Performing Staff Qualification data: {str(e)}")
    
    # Parse and merge BT-801-Lot Non Disclosure Agreement
    try:
        nda_data = parse_non_disclosure_agreement(xml_content)
        if nda_data:
            merge_non_disclosure_agreement(release_json, nda_data)
            logger.info("BT-801-Lot: Successfully merged Non Disclosure Agreement data")
        else:
            logger.info("BT-801-Lot: No Non Disclosure Agreement data found")
    except Exception as e:
        logger.error(f"BT-801-Lot: Error processing Non Disclosure Agreement data: {str(e)}")

    # Parse and merge BT-802-Lot Non Disclosure Agreement Description
    try:
        nda_description_data = parse_non_disclosure_agreement_description(xml_content)
        if nda_description_data:
            merge_non_disclosure_agreement_description(release_json, nda_description_data)
            logger.info("BT-802-Lot: Successfully merged Non Disclosure Agreement Description data")
        else:
            logger.info("BT-802-Lot: No Non Disclosure Agreement Description data found")
    except Exception as e:
        logger.error(f"BT-802-Lot: Error processing Non Disclosure Agreement Description data: {str(e)}")

    # Parse and merge BT-805-Lot Green Procurement Criteria
    try:
        gpp_data = parse_green_procurement_criteria(xml_content)
        if gpp_data:
            merge_green_procurement_criteria(release_json, gpp_data)
            logger.info("BT-805-Lot: Successfully merged Green Procurement Criteria data")
        else:
            logger.info("BT-805-Lot: No Green Procurement Criteria data found")
    except Exception as e:
        logger.error(f"BT-805-Lot: Error processing Green Procurement Criteria data: {str(e)}")

    # Parse and merge BT-88-Procedure Procedure Features
    try:
        procedure_features_data = parse_procedure_features(xml_content)
        if procedure_features_data:
            merge_procedure_features(release_json, procedure_features_data)
            logger.info("BT-88-Procedure: Successfully merged Procedure Features data")
        else:
            logger.info("BT-88-Procedure: No Procedure Features data found")
    except Exception as e:
        logger.error(f"BT-88-Procedure: Error processing Procedure Features data: {str(e)}")

    # Parse and merge BT-92-Lot Electronic Ordering
    try:
        electronic_ordering_data = parse_electronic_ordering(xml_content)
        if electronic_ordering_data:
            merge_electronic_ordering(release_json, electronic_ordering_data)
            logger.info("BT-92-Lot: Successfully merged Electronic Ordering data")
        else:
            logger.info("BT-92-Lot: No Electronic Ordering data found")
    except Exception as e:
        logger.error(f"BT-92-Lot: Error processing Electronic Ordering data: {str(e)}")

    # Parse and merge BT-93-Lot Electronic Payment
    try:
        electronic_payment_data = parse_electronic_payment(xml_content)
        if electronic_payment_data:
            merge_electronic_payment(release_json, electronic_payment_data)
            logger.info("BT-93-Lot: Successfully merged Electronic Payment data")
        else:
            logger.info("BT-93-Lot: No Electronic Payment data found")
    except Exception as e:
        logger.error(f"BT-93-Lot: Error processing Electronic Payment data: {str(e)}")

    # Parse and merge BT-94-Lot Recurrence
    try:
        recurrence_data = parse_recurrence(xml_content)
        if recurrence_data:
            merge_recurrence(release_json, recurrence_data)
            logger.info("BT-94-Lot: Successfully merged Recurrence data")
        else:
            logger.info("BT-94-Lot: No Recurrence data found")
    except Exception as e:
        logger.error(f"BT-94-Lot: Error processing Recurrence data: {str(e)}")

    # Parse and merge BT-95-Lot Recurrence Description
    try:
        recurrence_description_data = parse_recurrence_description(xml_content)
        if recurrence_description_data:
            merge_recurrence_description(release_json, recurrence_description_data)
            logger.info("BT-95-Lot: Successfully merged Recurrence Description data")
        else:
            logger.info("BT-95-Lot: No Recurrence Description data found")
    except Exception as e:
        logger.error(f"BT-95-Lot: Error processing Recurrence Description data: {str(e)}")

    # Parse and merge BT-97-Lot Submission Language
    try:
        submission_language_data = parse_submission_language(xml_content)
        if submission_language_data:
            merge_submission_language(release_json, submission_language_data)
            logger.info("BT-97-Lot: Successfully merged Submission Language data")
        else:
            logger.info("BT-97-Lot: No Submission Language data found")
    except Exception as e:
        logger.error(f"BT-97-Lot: Error processing Submission Language data: {str(e)}")

    # Parse and merge BT-98-Lot Tender Validity Deadline
    try:
        tender_validity_deadline_data = parse_tender_validity_deadline(xml_content)
        if tender_validity_deadline_data:
            merge_tender_validity_deadline(release_json, tender_validity_deadline_data)
            logger.info("BT-98-Lot: Successfully merged Tender Validity Deadline data")
        else:
            logger.info("BT-98-Lot: No Tender Validity Deadline data found")
    except Exception as e:
        logger.error(f"BT-98-Lot: Error processing Tender Validity Deadline data: {str(e)}")

    # Parse and merge BT-99-Lot Review Deadline Description
    try:
        review_deadline_description_data = parse_review_deadline_description(xml_content)
        if review_deadline_description_data:
            merge_review_deadline_description(release_json, review_deadline_description_data)
            logger.info("BT-99-Lot: Successfully merged Review Deadline Description data")
        else:
            logger.info("BT-99-Lot: No Review Deadline Description data found")
    except Exception as e:
        logger.error(f"BT-99-Lot: Error processing Review Deadline Description data: {str(e)}")

    
################################################################OPP
##########################################################################


    # Parse and merge OPP-020 ExtendedDurationIndicator
    try:
        extended_duration_data = map_extended_duration_indicator(xml_content)
        if extended_duration_data["tender"]["lots"]:
            merge_extended_duration_indicator(release_json, extended_duration_data)
            logger.info("Merged ExtendedDurationIndicator data")
        else:
            logger.info("No ExtendedDurationIndicator data found")
    except Exception as e:
        logger.error(f"Error processing ExtendedDurationIndicator data: {str(e)}")    

    # Parse and merge OPP-021_Contract Essential Assets
    try:
        essential_assets_data = map_essential_assets(xml_content)
        if essential_assets_data["tender"]["lots"]:
            merge_essential_assets(release_json, essential_assets_data)
            logger.info("Merged Essential Assets data")
        else:
            logger.info("No Essential Assets data found")
    except Exception as e:
        logger.error(f"Error processing Essential Assets data: {str(e)}")

    # Parse and merge OPP_022_Contract Asset Significance
    try:
        asset_significance_data = map_asset_significance(xml_content)
        if asset_significance_data["tender"]["lots"]:
            merge_asset_significance(release_json, asset_significance_data)
            logger.info("Merged Asset Significance data")
        else:
            logger.info("No Asset Significance data found")
    except Exception as e:
        logger.error(f"Error processing Asset Significance data: {str(e)}")

    # Parse and merge OPP_023_Contract Asset Predominance
    try:
        asset_predominance_data = map_asset_predominance(xml_content)
        if asset_predominance_data["tender"]["lots"]:
            merge_asset_predominance(release_json, asset_predominance_data)
            logger.info("Merged Asset Predominance data")
        else:
            logger.info("No Asset Predominance data found")
    except Exception as e:
        logger.error(f"Error processing Asset Predominance data: {str(e)}")

    # Parse and merge OPP-031-Tender Contract Conditions
    logger.info("Processing OPP-031-Tender: Contract Conditions")
    contract_conditions_data = parse_contract_conditions(xml_content)
    if contract_conditions_data:
        merge_contract_conditions(release_json, contract_conditions_data)
    else:
        logger.warning("No Contract Conditions data found")

    # Parse and merge OPP-032-Tender Revenues Allocation
    logger.info("Processing OPP-032-Tender: Revenues Allocation")
    revenues_allocation_data = parse_revenues_allocation(xml_content)
    if revenues_allocation_data:
        merge_revenues_allocation(release_json, revenues_allocation_data)
    else:
        logger.warning("No Revenues Allocation data found")

    # Parse and merge OPP-034-Tender Penalties and Rewards
    logger.info("Processing OPP-034-Tender: Penalties and Rewards")
    penalties_and_rewards_data = parse_penalties_and_rewards(xml_content)
    if penalties_and_rewards_data:
        merge_penalties_and_rewards(release_json, penalties_and_rewards_data)
    else:
        logger.warning("No Penalties and Rewards data found")

    # Parse and merge OPP-040-Procedure Main Nature - Sub Type
    logger.info("Processing OPP-040-Procedure: Main Nature - Sub Type")
    main_nature_sub_type_data = parse_main_nature_sub_type(xml_content)
    if main_nature_sub_type_data:
        merge_main_nature_sub_type(release_json, main_nature_sub_type_data)
    else:
        logger.warning("No Main Nature - Sub Type data found")

    # Parse and merge OPP-050-Organization Buyers Group Lead Indicator
    logger.info("Processing OPP-050-Organization: Buyers Group Lead Indicator")
    buyers_group_lead_data = parse_buyers_group_lead_indicator(xml_content)
    if buyers_group_lead_data:
        merge_buyers_group_lead_indicator(release_json, buyers_group_lead_data)
    else:
        logger.warning("No Buyers Group Lead Indicator data found")

    # Parse and merge OPP-051-Organization Awarding CPB Buyer Indicator
    logger.info("Processing OPP-051-Organization: Awarding CPB Buyer Indicator")
    awarding_cpb_buyer_data = parse_awarding_cpb_buyer_indicator(xml_content)
    if awarding_cpb_buyer_data:
        merge_awarding_cpb_buyer_indicator(release_json, awarding_cpb_buyer_data)
    else:
        logger.warning("No Awarding CPB Buyer Indicator data found")

    # Parse and merge OPP-052-Organization Acquiring CPB Buyer Indicator
    logger.info("Processing OPP-052-Organization: Acquiring CPB Buyer Indicator")
    acquiring_cpb_buyer_data = parse_acquiring_cpb_buyer_indicator(xml_content)
    if acquiring_cpb_buyer_data:
        merge_acquiring_cpb_buyer_indicator(release_json, acquiring_cpb_buyer_data)
    else:
        logger.warning("No Acquiring CPB Buyer Indicator data found")

    # Parse and merge OPP-080-Tender Kilometers Public Transport
    logger.info("Processing OPP-080-Tender: Kilometers Public Transport")
    kilometers_data = parse_kilometers_public_transport(xml_content)
    if kilometers_data:
        merge_kilometers_public_transport(release_json, kilometers_data)
    else:
        logger.warning("No Kilometers Public Transport data found")

    # Processing OPP-090-Procedure: Previous Notice Identifier
    logger.info("Processing OPP-090-Procedure: Previous Notice Identifier")
    previous_notice_data = parse_previous_notice_identifier(xml_content)
    if previous_notice_data:
        merge_previous_notice_identifier(release_json, previous_notice_data)
    else:
        logger.warning("No Previous Notice Identifier data found")

    # Parse and merge OPT-030-Procedure-SProvider Provided Service Type
    logger.info("Processing OPT-030-Procedure-SProvider: Provided Service Type")
    service_type_data = parse_provided_service_type(xml_content)
    if service_type_data:
        merge_provided_service_type(release_json, service_type_data)
    else:
        logger.warning("No Provided Service Type data found")

    # Parse and merge Quality Target Code (OPP-071-Lot)
    logger.info("Processing OPP-071-Lot: Quality Target Code")
    quality_target_data = parse_quality_target_code(xml_content)
    if quality_target_data:
        merge_quality_target_code(release_json, quality_target_data)
    else:
        logger.warning("No Quality Target Code data found")

    # Parse and merge Quality Target Description (OPP-072-Lot)
    logger.info("Processing OPP-072-Lot: Quality Target Description")
    quality_target_description_data = parse_quality_target_description(xml_content)
    if quality_target_description_data:
        merge_quality_target_description(release_json, quality_target_description_data)
    else:
        logger.warning("No Quality Target Description data found")

    # Parse and merge Framework Notice Identifier (OPP-100-Contract)
    logger.info("Processing OPP-100-Contract: Framework Notice Identifier")
    framework_notice_data = parse_framework_notice_identifier(xml_content)
    if framework_notice_data:
        merge_framework_notice_identifier(release_json, framework_notice_data)
    else:
        logger.warning("No Framework Notice Identifier data found")

    # Parse and merge Fiscal Legislation data (OPP-110 and OPP-111)
    logger.info("Processing OPP-110 and OPP-111: Fiscal Legislation")
    fiscal_legislation_data = parse_fiscal_legislation(xml_content)
    if fiscal_legislation_data:
        merge_fiscal_legislation(release_json, fiscal_legislation_data)
    else:
        logger.warning("No Fiscal Legislation data found")

    # Parse and merge Environmental Legislation data (OPP-112 and OPP-120)
    logger.info("Processing OPP-112 and OPP-120: Environmental Legislation")
    environmental_legislation_data = parse_environmental_legislation(xml_content)
    if environmental_legislation_data:
        merge_environmental_legislation(release_json, environmental_legislation_data)
    else:
        logger.warning("No Environmental Legislation data found")

    # Parse and merge Employment Legislation data (OPP-113 and OPP-130)
    logger.info("Processing OPP-113 and OPP-130: Employment Legislation")
    employment_legislation_data = parse_employment_legislation(xml_content)
    if employment_legislation_data:
        merge_employment_legislation(release_json, employment_legislation_data)
    else:
        logger.warning("No Employment Legislation data found")

    # Parse and merge Procurement Documents data (OPP-140)
    logger.info("Processing OPP-140: Procurement Documents")
    procurement_docs_data = parse_procurement_documents(xml_content)
    if procurement_docs_data:
        merge_procurement_documents(release_json, procurement_docs_data)
    else:
        logger.warning("No Procurement Documents data found")

################################################################OPT
##########################################################################


    # Parse and merge OPT-155-LotResult Vehicle Type
    try:
        vehicle_type_data = parse_vehicle_type(xml_content)
        if vehicle_type_data:
            merge_vehicle_type(release_json, vehicle_type_data)
            logger.info("OPT-155-LotResult: Successfully merged Vehicle Type data")
        else:
            logger.info("OPT-155-LotResult: No Vehicle Type data found")
    except Exception as e:
        logger.error(f"OPT-155-LotResult: Error processing Vehicle Type data: {str(e)}")

    # Parse and merge OPT-156-LotResult Vehicle Numeric
    try:
        vehicle_numeric_data = parse_vehicle_numeric(xml_content)
        if vehicle_numeric_data:
            merge_vehicle_numeric(release_json, vehicle_numeric_data)
            logger.info("OPT-156-LotResult: Successfully merged Vehicle Numeric data")
        else:
            logger.info("OPT-156-LotResult: No Vehicle Numeric data found")
    except Exception as e:
        logger.error(f"OPT-156-LotResult: Error processing Vehicle Numeric data: {str(e)}")

    # Parse and merge OPT-160-UBO First Name
    logger.info("Processing OPT-160-UBO: First Name")
    ubo_first_name_data = parse_ubo_first_name(xml_content)
    if ubo_first_name_data:
        merge_ubo_first_name(release_json, ubo_first_name_data)
    else:
        logger.warning("No UBO First Name data found")

    # Parse and merge OPT-170-Tenderer Tendering Party Leader
    logger.info("Processing OPT-170-Tenderer: Tendering Party Leader")
    tenderer_leader_data = parse_tendering_party_leader(xml_content)
    if tenderer_leader_data:
        merge_tendering_party_leader(release_json, tenderer_leader_data)
    else:
        logger.warning("No Tendering Party Leader data found")

    # Parse and merge OPT-200-Organization-Company Organization Technical Identifier
    logger.info("Processing OPT-200-Organization-Company: Organization Technical Identifier")
    org_technical_id_data = parse_organization_technical_identifier(xml_content)
    if org_technical_id_data:
        merge_organization_technical_identifier(release_json, org_technical_id_data)
    else:
        logger.warning("No Organization Technical Identifier data found")

    # Parse and merge OPT-201-Organization-TouchPoint TouchPoint Technical Identifier
    logger.info("Processing OPT-201-Organization-TouchPoint: TouchPoint Technical Identifier")
    touchpoint_data = parse_touchpoint_technical_identifier(xml_content)
    if touchpoint_data:
        merge_touchpoint_technical_identifier(release_json, touchpoint_data)
    else:
        logger.warning("No TouchPoint Technical Identifier data found")
    
    logger.info("Processing OPT-202-UBO: Beneficial Owner Technical Identifier")
    beneficial_owner_id_data = parse_beneficial_owner_identifier(xml_content)
    if beneficial_owner_id_data:
      #  logger.info(f"Beneficial owner data found: {beneficial_owner_id_data}")
        merge_beneficial_owner_identifier(release_json, beneficial_owner_id_data)
     #   logger.info("After merging beneficial owner data:")
     #   logger.info(json.dumps(release_json, indent=2))
    else:
        logger.warning("No Beneficial Owner Technical Identifier data found")

    # Parse and merge OPT-300 Contract Signatory
    signatory_data = parse_contract_signatory(xml_content)
    if signatory_data:
        merge_contract_signatory(release_json, signatory_data)
    else:
        logger.warning("No Contract Signatory data found")

    # Parse and merge OPT-300 sprovider
    sprovider_data = parse_procedure_sprovider(xml_content)
    if sprovider_data:
        merge_procedure_sprovider(release_json, sprovider_data)
    else:
        logger.warning("No Procedure Service Provider data found")

    # Parse and merge OPT-301-Lot-AddInfo Additional Info Provider Technical Identifier Reference
    logger.info("Processing OPT-301-Lot-AddInfo: Additional Info Provider Technical Identifier Reference")
    additional_info_provider_data = parse_additional_info_provider_identifier(xml_content)
    if additional_info_provider_data:
        merge_additional_info_provider_identifier(release_json, additional_info_provider_data)
    else:
        logger.warning("No Additional Info Provider Technical Identifier Reference data found")

    # Parse and merge OPT-301-Lot-DocProvider Document Provider Technical Identifier Reference
    logger.info("Processing OPT-301-Lot-DocProvider: Document Provider Technical Identifier Reference")
    document_provider_data = parse_document_provider_identifier(xml_content)
    if document_provider_data:
        merge_document_provider_identifier(release_json, document_provider_data)
    else:
        logger.warning("No Document Provider Technical Identifier Reference data found")

    # Parse and merge OPT-301-Lot-EmployLegis Employment Legislation Organization Technical Identifier Reference
    logger.info("Processing OPT-301-Lot-EmployLegis: Employment Legislation Organization Technical Identifier Reference")
    employment_legislation_data = parse_employment_legislation_document_reference(xml_content)
    if employment_legislation_data:
        merge_employment_legislation_document_reference(release_json, employment_legislation_data)
    else:
        logger.warning("No Employment Legislation Organization Technical Identifier Reference data found")

    # Parse and merge OPT-301-Lot-EnvironLegis Environmental Legislation Organization Technical Identifier Reference
    logger.info("Processing OPT-301-Lot-EnvironLegis: Environmental Legislation Organization Technical Identifier Reference")
    environmental_legislation_data = parse_environmental_legislation_document_reference(xml_content)
    if environmental_legislation_data:
        merge_environmental_legislation_document_reference(release_json, environmental_legislation_data)
    else:
        logger.warning("No Environmental Legislation Organization Technical Identifier Reference data found")

    # Parse and merge OPT-301-Lot-ReviewOrg Review Organization Technical Identifier Reference
    logger.info("Processing OPT-301-Lot-ReviewOrg: Review Organization Technical Identifier Reference")
    review_org_data = parse_review_org_identifier(xml_content)
    if review_org_data:
        merge_review_org_identifier(release_json, review_org_data)
    else:
        logger.warning("No Review Organization Technical Identifier Reference data found")

    # Parse and merge OPT-301-Lot-Mediator Mediator Technical Identifier Reference
    logger.info("Processing OPT-301-Lot-Mediator: Mediator Technical Identifier Reference")
    mediator_data = parse_mediator_identifier(xml_content)
    if mediator_data:
        merge_mediator_identifier(release_json, mediator_data)
    else:
        logger.warning("No Mediator Technical Identifier Reference data found")

    # Parse and merge OPT-301-Lot-ReviewInfo Review Info Provider Technical Identifier Reference
    logger.info("Processing OPT-301-Lot-ReviewInfo: Review Info Provider Technical Identifier Reference")
    review_info_data = parse_review_info_identifier(xml_content)
    if review_info_data:
        merge_review_info_identifier(release_json, review_info_data)
    else:
        logger.warning("No Review Info Provider Technical Identifier Reference data found")

    # Parse and merge OPT_301_Lot_TenderEval
    try:
        tender_evaluator_data = parse_tender_evaluator_identifier(xml_content)
        if tender_evaluator_data:
            merge_tender_evaluator_identifier(release_json, tender_evaluator_data)
        else:
            logger.info("No Tender Evaluator Identifier data found")
    except Exception as e:
        logger.error(f"Error processing Tender Evaluator Identifier data: {str(e)}")

    # Parse and merge OPT-301-Lot-TenderReceipt Tender Recipient Technical Identifier Reference
    logger.info("Processing OPT-301-Lot-TenderReceipt: Tender Recipient Technical Identifier Reference")
    recipient_data = parse_tender_recipient_identifier(xml_content)
    if recipient_data:
        merge_tender_recipient_identifier(release_json, recipient_data)
    else:
        logger.warning("No Tender Recipient Technical Identifier Reference data found")

    # Parse and merge OPT-301 LotResult_Financing
    financing_data = parse_lotresult_financing(xml_content)
    if financing_data:
        merge_lotresult_financing(release_json, financing_data)
    else:
        logger.warning("No LotResult Financing data found")

    # Parse and merge OPT-301 LotResult_Paying
    paying_data = parse_lotresult_paying(xml_content)
    if paying_data:
        merge_lotresult_paying(release_json, paying_data)
    else:
        logger.warning("No LotResult Paying data found")

    # Parse and merge OPT-301 Part_AddInfo
    addinfo_data = parse_part_addinfo(xml_content)
    if addinfo_data:
        merge_part_addinfo(release_json, addinfo_data)
    else:
        logger.warning("No Part Additional Info data found")

    # Parse and merge OPT_301_Part_DocProvider
    docprovider_data = parse_part_docprovider(xml_content)
    if docprovider_data:
        merge_part_docprovider(release_json, docprovider_data)
    else:
        logger.warning("No Part Document Provider data found")

    # Parse and merge OPT_301_Part_EmployLegis
    employlegis_data = parse_part_employlegis(xml_content)
    if employlegis_data:
        merge_part_employlegis(release_json, employlegis_data)
    else:
        logger.warning("No Part Employment Legislation data found")
    
    # Parse and merge OPT_301_Part_EnvironLegis
    environlegis_data = parse_part_environlegis(xml_content)
    if environlegis_data:
        merge_part_environlegis(release_json, environlegis_data)
    else:
        logger.warning("No Part Environmental Legislation data found")

    # Parse and merge OPT_301_Part_FiscalLegis
    fiscallegis_data = parse_part_fiscallegis(xml_content)
    if fiscallegis_data:
        merge_part_fiscallegis(release_json, fiscallegis_data)
    else:
        logger.warning("No Part Fiscal Legislation data found")

    # Parse and merge OPT_301_Part_Mediator
    mediator_data = parse_part_mediator(xml_content)
    if mediator_data:
        merge_part_mediator(release_json, mediator_data)
    else:
        logger.warning("No Part Mediator data found")

    # Parse and merge OPT_301_Part_ReviewInfo
    reviewinfo_data = parse_part_reviewinfo(xml_content)
    if reviewinfo_data:
        merge_part_reviewinfo(release_json, reviewinfo_data)
    else:
        logger.warning("No Part Review Info data found")

    # Parse and merge OPT_301_Part_ReviewOrg
    revieworg_data = parse_part_revieworg(xml_content)
    if revieworg_data:
        merge_part_revieworg(release_json, revieworg_data)
    else:
        logger.warning("No Part Review Organization data found")

    # Parse and merge OPT_301_Part_TenderEval
    tendereval_data = parse_part_tendereval(xml_content)
    if tendereval_data:
        merge_part_tendereval(release_json, tendereval_data)
    else:
        logger.warning("No Part Tender Evaluator data found")

    # Parse and merge OPT_301_Part_TenderReceipt
    tenderreceipt_data = parse_part_tenderreceipt(xml_content)
    if tenderreceipt_data:
        merge_part_tenderreceipt(release_json, tenderreceipt_data)
    else:
        logger.warning("No Part Tender Recipient data found")

    # Parse and merge OPT_301_Tenderer_MainCont
    maincont_data = parse_tenderer_maincont(xml_content)
    if maincont_data:
        merge_tenderer_maincont(release_json, maincont_data)
    else:
        logger.warning("No Tenderer Main Contractor data found")
# add more OPT-301 her



    # Parse and merge OPT-302-Organization Beneficial Owner Reference
    logger.info("Processing OPT-302-Organization: Beneficial Owner Reference")
    bo_reference_data = parse_beneficial_owner_reference(xml_content)
    if bo_reference_data:
        merge_beneficial_owner_reference(release_json, bo_reference_data)
    else:
        logger.warning("No Beneficial Owner Reference data found")

    # Parse and merge OPT-310-Tender Tendering Party ID Reference
    logger.info("Processing OPT-310-Tender: Tendering Party ID Reference")
    tendering_party_data = parse_tendering_party_id_reference(xml_content)
    if tendering_party_data:
        merge_tendering_party_id_reference(release_json, tendering_party_data)
    else:
        logger.warning("No Tendering Party ID Reference data found")

    # Parse and merge OPT-315-LotResult Contract Identifier Reference
    logger.info("Processing OPT-315-LotResult: Contract Identifier Reference")
    contract_id_data = parse_contract_identifier_reference(xml_content)
    if contract_id_data:
        merge_contract_identifier_reference(release_json, contract_id_data)
    else:
        logger.warning("No Contract Identifier Reference data found")

    # Parse and merge OPT-316-Contract Contract Technical Identifier
    logger.info("Processing OPT-316-Contract: Contract Technical Identifier")
    contract_tech_id_data = parse_contract_technical_identifier(xml_content)
    if contract_tech_id_data:
        merge_contract_technical_identifier(release_json, contract_tech_id_data)
    else:
        logger.warning("No Contract Technical Identifier data found")

    # Parse and merge OPT-320-LotResult Tender Identifier Reference
    logger.info("Processing OPT-320-LotResult: Tender Identifier Reference")
    tender_id_data = parse_tender_identifier_reference(xml_content)
    if tender_id_data:
        merge_tender_identifier_reference(release_json, tender_id_data)
    else:
        logger.warning("No Tender Identifier Reference data found")
        
    # Before applying remove_empty_elements and remove_empty_dicts
    #logger.info(f"Release JSON before removing empty elements: {json.dumps(release_json, indent=2)}")
    
    release_json = remove_empty_elements(release_json)
    #logger.info(f"Release JSON after removing empty elements: {json.dumps(release_json, indent=2)}")

    release_json = remove_empty_dicts(release_json)
    #logger.info(f"Release JSON after removing empty dicts: {json.dumps(release_json, indent=2)}")

    # Before writing to output.json
    logger.info(f"Final release JSON: {json.dumps(release_json, indent=2)}")

    # Write the JSON output to a file
    with io.open('output.json', 'w', encoding='utf-8') as f:
        json.dump(release_json, f, ensure_ascii=False)

    logger.info("XML to JSON conversion completed")

    # Print the JSON string to console
    json_string = json.dumps(release_json, ensure_ascii=False)
    

    return release_json

if __name__ == "__main__":
    # Path to the XML file
    xml_path = 'xmlfile/can_24_minimal.xml'
    #xml_path = 'bt_198-106.xml'
    # Prefix for OCID
    ocid_prefix = 'ocid_prefix_value'
    
    main(xml_path, ocid_prefix)